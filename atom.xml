<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小白的文件整理箱</title>
  
  
  <link href="https://unkonwn404.github.io/unknown404.github.io/atom.xml" rel="self"/>
  
  <link href="https://unkonwn404.github.io/unknown404.github.io/"/>
  <updated>2025-05-14T09:22:44.652Z</updated>
  <id>https://unkonwn404.github.io/unknown404.github.io/</id>
  
  <author>
    <name>小白的文件整理箱</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React状态管理最新小结</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2025/04/30/stateManagement/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2025/04/30/stateManagement/</id>
    <published>2025-04-30T03:02:19.000Z</published>
    <updated>2025-05-14T09:22:44.652Z</updated>
    
    <content type="html"><![CDATA[<p>最近突然要从头搭一个 React 项目，构建自己项目的状态管理。对于平常用 umi+dva 一把梭的来说还真不太确定怎么搭会比较好。再加上随着时间变化，当初的新工具也成了老东西不再迭代，像 dva 就痛失了官方网站域名（hhh）。再加上调整一些 mobx 相关的开源项目踩了坑，所以还是决定要来梳理一番。</p><h2 id="mobx-mobx-state-tree"><a href="#mobx-mobx-state-tree" class="headerlink" title="mobx + mobx state tree"></a>mobx + mobx state tree</h2><p>mobx 是一个非常典型的响应式状态管理工具，即数据可变。它存在着几个比较关键的概念：</p><ul><li>observable，包裹普通的 JavaScript 数据结构，将其转换为响应式数据，任何依赖它的地方都会在数据变化时自动更新</li><li>action，用来修改状态的函数；如果涉及到异步动作，需要 then 内部的回调函数用 runInAction 或者 action.bound 包裹，或者直接用 flow 语法</li><li>reaction，追踪 observable 并在监听数据变化时触发效果函数；when 和 autorun 类似</li></ul><p>以下是 mobx 给出的示例。如果要获取和设置基本的状态值，可以将 store 作为 props 传入组件、利用 mobx-react 进行 store 连接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; observable, computed, action &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;mobx&quot;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">TodoModel</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./TodoModel&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TodoListModel</span> &#123;<br>  @observable todos = [];<br><br>  @computed<br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">unfinishedTodoCount</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">todo</span>) =&gt;</span> !todo.<span class="hljs-property">finished</span>).<span class="hljs-property">length</span>;<br>  &#125;<br><br>  @action<br>  <span class="hljs-title function_">addTodo</span>(<span class="hljs-params">title</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TodoModel</span>(title));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>它的特点是：</p><ul><li>事件触发 action 的执行，通过 action 来修改 state</li><li>state 更新后，computed Values 自动会根据依赖重新计算属性值</li><li>state 更新后会触发 reactions，来响应这次状态变化的一些操作</li></ul><p>mobx 虽然上手简单，但风格自由，如果没有统一团队的代码风格，可能会在 store 中看到各种各样的代码。因此也常用 mobx state tree 结合进行规范约束。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; types &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;mobx-state-tree&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CounterModel</span> = types<br>  .<span class="hljs-title function_">model</span>(<span class="hljs-string">&quot;Counter&quot;</span>, &#123;<br>    <span class="hljs-attr">count</span>: types.<span class="hljs-property">number</span>,<br>  &#125;)<br>  .<span class="hljs-title function_">actions</span>(<span class="hljs-function">(<span class="hljs-params">self</span>) =&gt;</span> (&#123;<br>    <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>      self.<span class="hljs-property">count</span> += <span class="hljs-number">1</span>;<br>    &#125;,<br>  &#125;));<br><br><span class="hljs-keyword">const</span> counter = <span class="hljs-title class_">CounterModel</span>.<span class="hljs-title function_">create</span>(&#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;);<br></code></pre></td></tr></table></figure><p>mobx state tree 特点：</p><ul><li>必须定义模型结构</li><li>状态只能通过 actions 修改</li><li>支持 .snapshot()、.applySnapshot()、中间件拦截等高级特性</li></ul><p><strong>注意点</strong>：组件中使用的 mobx 变量是 observable 对象，直接传入 antd 组件是有可能出现错误的，需要用 toJS 转为 js 结构数据。</p><h2 id="Zustand"><a href="#Zustand" class="headerlink" title="Zustand"></a>Zustand</h2><p>一个轻量级的状态管理库，不需要像 Redux 那样定义复杂的 Action、Reducer、Store 组合等模板代码，但仍具有单向数据流的特点。主要特点有：</p><ul><li>极简 API：仅需掌握 create、setState、getState 三个核心方法</li><li>灵活扩展：支持中间件生态</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> usePageStore = <span class="hljs-title function_">create</span>(<span class="hljs-function">(<span class="hljs-params">set</span>) =&gt;</span> (&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>,<br>  &#125;,<br>  <span class="hljs-attr">fetchData</span>: <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-title function_">set</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> (&#123; <span class="hljs-attr">state</span>: &#123; ...state.<span class="hljs-property">state</span>, <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">true</span> &#125; &#125;));<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getData</span>(&#123;<br>        <span class="hljs-attr">request_id</span>: <span class="hljs-string">&quot;12335&quot;</span>,<br>        <span class="hljs-attr">input</span>: <span class="hljs-string">&quot;qwdqwd&quot;</span>,<br>      &#125;);<br>      <span class="hljs-title function_">set</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> (&#123;<br>        <span class="hljs-attr">state</span>: &#123; ...state.<span class="hljs-property">state</span>, <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>, ...data &#125;,<br>      &#125;));<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      <span class="hljs-title function_">set</span>(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> (&#123; <span class="hljs-attr">state</span>: &#123; ...state.<span class="hljs-property">state</span>, <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span> &#125; &#125;));<br>    &#125;<br>  &#125;,<br>&#125;));<br></code></pre></td></tr></table></figure><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>不可变数据</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近突然要从头搭一个 React 项目，构建自己项目的状态管理。对于平常用 umi+dva 一把梭的来说还真不太确定怎么搭会比较好。再加上随着时间变化，当初的新工具也成了老东西不再迭代，像 dva 就痛失了官方网站域名（hhh）。再加上调整一些 mobx 相关的开源项目踩了</summary>
      
    
    
    
    <category term="技术学习" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="React" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/React/"/>
    
    <category term="状态管理" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>amis初探</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2025/03/12/amis/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2025/03/12/amis/</id>
    <published>2025-03-12T07:21:35.000Z</published>
    <updated>2025-04-30T02:21:29.111Z</updated>
    
    <content type="html"><![CDATA[<p>公司要求用低代码来协助产品搭建一些简单的产品，通过一段时间有限的调研，选择了这个开源项目，开启了一段噩梦。<br>接下来是吐槽时间。</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>现在 ai 盛行，老板希望能快速搭建一些 ai 产品推广。考虑对产品经理的友好性，需要选择一款合适的低代码开源项目。<br>但不搜不知道，一搜发现低代码平台还真是多啊，真是让人头疼。而且低代码其实还分前端、后端、应用各种类型的搭建<br>以下是各平台的不完整测评，就目前的体验来说是这样</p><h3 id="appsmith"><a href="#appsmith" class="headerlink" title="appsmith"></a>appsmith</h3><p>似乎是创建应用的，个人感觉比较适合 B 端的数据展示和处理。支持写 js 代码，但我还是没办法快速弄清如何让一个按钮触发弹窗显示（是的这是我个人评判是否好用的标准）。而且似乎也导不出代码或者 json</p><h3 id="华为-tinyEngine"><a href="#华为-tinyEngine" class="headerlink" title="华为 tinyEngine"></a>华为 tinyEngine</h3><p>不可思议的体验，我完全不能理解，提供的 demo 预览什么也看不到，我企图修改时模块总会莫名其妙消失，当我去组件树试图寻找时，点击某节点整个面板又自动滚到顶部了。。。完全感觉不到可用的可能，不知道这个 demo 是不是个死的。导出的话是整个 Vue 项目，有着清晰的结构</p><h3 id="阿里-LowCodeEngine"><a href="#阿里-LowCodeEngine" class="headerlink" title="阿里 LowCodeEngine"></a>阿里 LowCodeEngine</h3><p>文档十分不友好，内容少而不精准，在试图制作弹窗 demo 时发现使用<code>$</code>引用 dom 来控制弹窗开启和隐藏出了问题，然而这是官方文档提供的内容。极度依赖 React，交互没有 React 知识不好实现。估计得训练一下产品经理。</p><h3 id="百度-amis"><a href="#百度-amis" class="headerlink" title="百度 amis"></a>百度 amis</h3><p>倒是对前端知识的门槛要求降低了，如果只是纯展示页面估计还不错。可惜一涉及到交互同样是噩梦。说明文档写的很差，提供的 demo 也全部是 json 配置，可视化配置表格找不到配置对应的位置。导出只能是页面的 json，页面通过引用 amis 的 sdk 对 json 做处理</p><p>经过了这番并不全面而详尽的尝试后，我实在没兴趣继续了。。。</p><h2 id="低代码原理"><a href="#低代码原理" class="headerlink" title="低代码原理"></a>低代码原理</h2><p>低代码（Low-Code）平台的实现原理主要围绕 可视化开发、模型驱动架构、组件化、代码生成 等关键技术。它们通过拖拽式 UI、流程编排、数据绑定等方式，让开发者快速构建应用，而无需手写大量代码。详细解说原理前须先介绍平台的搭建特点：一般的低代码编辑器主要分为三个部分：页面左侧是物料区，也就是页面常用的组件，与 antd 库有几分类似，但不是所有都是有实体的组件，也有的物料是某种逻辑的抽离，例如在 amis 中的 service 组件就是；页面中间是画布，使用者可将左侧组件拖拽到画布中心构建页面结构；右侧则是配置区，针对页面中使用的组件做特点的逻辑配置和样式调整。<br><img src="/unknown404.github.io/img/amis/amis.jpg"></p><p>低代码实现的几个关键环节主要有这些：</p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>所谓协议，个人更感觉像是约定的规范，约定物料开发的规则、页面搭建的规则之类的。例如绝大多数低代码都是将组件涉及的样式、交互逻辑抽离成一个 json 配置，通过设定几个固定的属性来控制。这样当低代码的 SDK 解析到组件的 json 时可以将其转换为对应的代码逻辑。。。这种感觉。<br>例如：当在页面添加了一个按钮后、左侧的配置 schema 新增了一个新 json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;button&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;按钮&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;onEvent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;click&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;actions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;u:7f7930162cae&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>对应添加到页面的代码就是：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Button</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;amis&quot;</span>;<br> <span class="hljs-comment">// ...existing code...</span><br> <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">page</span>=(<span class="hljs-params">props</span>)=&gt;&#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="hljs-comment">// ...existing code...</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&#123;props.label&#125;/</span>&gt;</span></span><br>  )<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h3><p>个人更通俗的理解就是符合协议、可读取配置 json 完善逻辑的封装组件、组件对应的配置表单以及定制好的行为。在 amis 中就对应了这么几个文件夹：</p><ul><li>renderer：渲染组件</li><li>plugin：组件的配置项设计</li><li>action：定制行为<br>一般的低代码平台会提供通用的物料。但是如果涉及到 C 端可能需要考虑更多个性化的内容：例如埋点，图片上传等，这些都是与公司自身的服务相挂钩的，都是需要自己开发扩展的</li></ul><h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><p>渲染方式主要有两个大类：</p><ul><li>出码渲染</li><li>运行时渲染<br>常见的低代码渲染都是运行时渲染，只有少数对性能要求较高的产品才会使用出码渲染的方式。</li></ul><h4 id="出码渲染"><a href="#出码渲染" class="headerlink" title="出码渲染"></a>出码渲染</h4><p>出码渲染是将 schema 转化为 Vue 源码、React 源码或者其他语言的源码。</p><h4 id="运行时渲染"><a href="#运行时渲染" class="headerlink" title="运行时渲染"></a>运行时渲染</h4><p>页面 schema 渲染成页面都是在浏览器中完成的，不存在预编译的过程。amis 就属于这种渲染。</p><h2 id="低代码适用场景"><a href="#低代码适用场景" class="headerlink" title="低代码适用场景"></a>低代码适用场景</h2><p>个人理解是偏向于纯展示、低交互的页面，例如运营活动、B 端的表单，有复杂逻辑的页面就很难实现了。以下为几个代表</p><ul><li>海报，纯展示</li><li>H5 运营活动页，页面一次性，交互简单</li><li>中后台页面，表单页面，逻辑 curd 都在后端，前端不具备复杂逻辑</li></ul><p>如果真涉及到稍复杂的 C 端页面，用起来就比较痛苦了：产品只知道她的展示逻辑，不理解要实现这些逻辑需要经历哪些环节，只希望需要配置的内容越少越简洁；开发知道如何用代码实现，但必须完全代入低代码的思维、理解平台开发者的设计逻辑、沿着他的思路去抽离逻辑。而且万一配置出错了，不具有前端经验的人很难 debug，即使是前端在报错信息不全的情况下也很难快速定位问题点。综上所述，我很难想象谁需要这个。</p><h2 id="amis-使用注意事项"><a href="#amis-使用注意事项" class="headerlink" title="amis 使用注意事项"></a>amis 使用注意事项</h2><h3 id="SDK-使用说明"><a href="#SDK-使用说明" class="headerlink" title="SDK 使用说明"></a>SDK 使用说明</h3><p>虽然说明文档给出了 SDK 引入及自定义组件定义的说明，但实验时发现运行有问题，主要有以下几点：<br><strong>使用 import 方式导入 sdk.js 文件报错</strong><br>当前最新版的 sdk.js 文件依赖文件 rest.js，所以引入时需要将两个文件同时引入。如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;amis/sdk/sdk.js&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;amis/sdk/rest.js&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;amis/sdk/sdk.css&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;amis/sdk/helper.css&quot;</span>;<br></code></pre></td></tr></table></figure><p><strong>自定义组件渲染失败</strong><br>amis 在 SDK 引入自定义组件的说明里存在错误，估计是由于架构变更没有及时更新的缘故，现在 Renderer 属于 amis-core，所以正确的引入逻辑是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ...existing code...</span><br><span class="hljs-keyword">const</span> scoped = <span class="hljs-title function_">amisRequire</span>(<span class="hljs-string">&quot;amis/embed&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; normalizeLink, <span class="hljs-title class_">Renderer</span> &#125; = <span class="hljs-title function_">amisRequire</span>(<span class="hljs-string">&quot;amis-core&quot;</span>);<br><span class="hljs-comment">// 自定义组件，props 中可以拿到配置中的所有参数，比如 props.label 是 &#x27;Name&#x27;</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">React</span> = <span class="hljs-title function_">amisRequire</span>(<span class="hljs-string">&quot;react&quot;</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">CustomComponent</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">let</span> dom = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useEffect</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 从这里开始写自定义代码，dom.current 就是新创建的 dom 节点</span><br>    <span class="hljs-comment">// 可以基于这个 dom 节点对接任意 JavaScript 框架，比如 jQuery/Vue 等</span><br>    dom.<span class="hljs-property">current</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;custom&quot;</span>;<br>    <span class="hljs-comment">// 而 props 中能拿到这个</span><br>  &#125;);<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>, &#123;<br>    <span class="hljs-attr">ref</span>: dom,<br>  &#125;);<br>&#125;<br><br><span class="hljs-comment">//注册自定义组件，请参考后续对工作原理的介绍</span><br><span class="hljs-title class_">Renderer</span>(&#123;<br>  <span class="hljs-attr">test</span>: <span class="hljs-regexp">/(^|\/)my-custom-renderer/</span>,<br>&#125;)(<span class="hljs-title class_">CustomComponent</span>);<br></code></pre></td></tr></table></figure><p>自定义组件注册完成后，使用时则是配置以下 json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my-custom-renderer&quot;</span> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>hover 样式被 sdk 组件 hover 样式覆盖</strong><br>sdk 自动为渲染内容的容器元素添加了 amis-scope 的 class，同时将 css 文件的元素选择器全部添加了 amis-scope 的父元素，而在编辑器配置的 hover 属性没有自动附加 amis-scope 父元素，所以自定义的 hover 样式优先级反而劣于默认样式。只有手动写 hover 样式并加！important 才能实现</p><h3 id="amis-editor启动说明"><a href="#amis-editor启动说明" class="headerlink" title="amis-editor启动说明"></a>amis-editor启动说明</h3><p>虽然本地启动amis-editor-demo并不困难，但是到了部署一步却出了意外，因为amis依赖包里有个子依赖是个github仓库，所以docker镜像文件需要安装github镜像包，文件内容也就变成了：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dockerFile"><span class="hljs-keyword">FROM</span> node:<span class="hljs-number">20</span>-alpine<br><br><span class="hljs-keyword">ARG</span> DIR=/opt/apps/static<br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$DIR</span> /opt/logs/nginx /var/run/nginx</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> <span class="hljs-variable">$DIR</span></span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apk update &amp;&amp; apk add --no-cache nginx curl</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apk add --no-cache git</span><br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . <span class="hljs-variable">$DIR</span></span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com &amp;&amp; npm install --legacy-peer-deps&amp;&amp; npm run release:<span class="hljs-built_in">test</span></span><br><br><span class="hljs-comment"># 创建目标目录 $DIR/static，如果目录不存在则创建</span><br><span class="hljs-comment"># 将 build 目录下的所有文件和子目录递归复制到 $DIR/static/ 目录下</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$DIR</span>/static &amp;&amp; <span class="hljs-built_in">cp</span> -r dist/* <span class="hljs-variable">$DIR</span>/static/</span><br><br><span class="hljs-comment"># COPY ./nginx.conf $DIR/nginx.conf</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> Dockerfile/start.sh /usr/local/bin/</span><br><span class="hljs-comment"># 启动 Nginx</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;/usr/local/bin/start.sh&quot;</span>]</span><br></code></pre></td></tr></table></figure><h3 id="数据域与展示组件问题"><a href="#数据域与展示组件问题" class="headerlink" title="数据域与展示组件问题"></a>数据域与展示组件问题</h3><p>amis 在解决组件数据绑定和数据传递方面提出了数据域和数据链结构，简单来说，有以下要点：</p><ul><li>组件的 data 属性值是数据域的一种形式</li><li>顶级节点数据域，也就是 page 节点的 data 属性</li><li>不是所有组件都有数据域这一特点，主要是表单类；展示组件如文本、富文本没有该属性</li><li>数据链的规则是：当前组件在遇到获取变量的场景（例如模板渲染、展示表单数据、渲染列表等等）时，首先会先尝试在当前组件的数据域中寻找变量，没有找到变量时，则向上寻找，直到顶级节点</li></ul><p>因此当出现异步请求后需要更新页面内容的情况，如果涉及的组件是展示类的，行为‘变量赋值‘是无法直接赋值给组件的，唯一的办法就是展示组件配置时绑定父层或顶层数据域变量，让行为‘变量赋值‘去改变绑定的变量</p><h3 id="数据表达式"><a href="#数据表达式" class="headerlink" title="数据表达式"></a>数据表达式</h3><p>在前端编程中，通过单击按钮控制侧边栏的显隐是通过绑定的 click 函数，让显示状态赋值为当前状态的取反值。然而在 amis 中，由于配置是用 json 存储，所以 visible 变量初始赋值为 false 其实是字符串的 false，取反后变量为 false，所以第一次触发点击事件被该状态控制的组件不会显示。visible 变量初始赋值空字符串可以解决问题。</p><h2 id="amis-的扩展"><a href="#amis-的扩展" class="headerlink" title="amis 的扩展"></a>amis 的扩展</h2><p>针对 C 端丰富多彩的需求，扩展是很难避免的，尤其是当产品缺乏开发知识时。以下是关于如何扩展的说明。</p><h3 id="plugin-扩展"><a href="#plugin-扩展" class="headerlink" title="plugin 扩展"></a>plugin 扩展</h3><p>amis 提供了关于 plugin 的定义，以下是基本定义，在编写自定义组件的配置表单 plugin 时也可以参考；amis 包里的 plugin 插件则是对这个定义的进一步封装为了 BasePlugin 这个基类。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 插件的 interface 定义</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PluginInterface</span><br>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Partial</span>&lt;<span class="hljs-title class_">BasicRendererInfo</span>&gt;,<br>    <span class="hljs-title class_">Partial</span>&lt;<span class="hljs-title class_">BasicSubRenderInfo</span>&gt;,<br>    <span class="hljs-title class_">PluginEventListener</span> &#123;<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">manager</span>: <span class="hljs-title class_">EditorManager</span>;<br><br>  order?: <span class="hljs-built_in">number</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 插件作用场景</span><br><span class="hljs-comment">   */</span><br>  scene?: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">string</span>&gt;;<br><br>  <span class="hljs-comment">// 是否可绑定数据，一般容器类型就没有</span><br>  withDataSource?: <span class="hljs-built_in">boolean</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 渲染器的名字，关联后不用自己实现 getRendererInfo 了。</span><br><span class="hljs-comment">   */</span><br>  rendererName?: <span class="hljs-built_in">string</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 默认的配置面板信息</span><br><span class="hljs-comment">   */</span><br>  panelIcon?: <span class="hljs-built_in">string</span>;<br>  panelTitle?: <span class="hljs-built_in">string</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 新增属性，用于判断是否出现在组件面板中，默认为false，为ture则不展示</span><br><span class="hljs-comment">   */</span><br>  disabledRendererPlugin?: <span class="hljs-built_in">boolean</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@deprecated</span> 用 panelBody</span><br><span class="hljs-comment">   */</span><br>  panelControls?: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">any</span>&gt;;<br>  panelBody?: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">any</span>&gt;;<br>  panelDefinitions?: <span class="hljs-built_in">any</span>;<br>  panelApi?: <span class="hljs-built_in">any</span>;<br>  panelSubmitOnChange?: <span class="hljs-built_in">boolean</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 隐藏右侧面板表单项Tab</span><br><span class="hljs-comment">   * <span class="hljs-doctag">TODO:</span> 正式上线后要干掉这个属性</span><br><span class="hljs-comment">   */</span><br>  notRenderFormZone?: <span class="hljs-built_in">boolean</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * 事件定义集合</span><br><span class="hljs-comment">   */</span><br>  events?: <span class="hljs-title class_">RendererPluginEvent</span>[] | (<span class="hljs-function">(<span class="hljs-params">schema: <span class="hljs-built_in">any</span></span>) =&gt;</span> <span class="hljs-title class_">RendererPluginEvent</span>[]);<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * 专有动作定义集合</span><br><span class="hljs-comment">   */</span><br>  actions?: <span class="hljs-title class_">RendererPluginAction</span>[];<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 右侧面板是否需要两端对齐布局</span><br><span class="hljs-comment">   */</span><br>  panelJustify?: <span class="hljs-built_in">boolean</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * panelBodyAsyncCreator设置后异步加载层的配置项</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">async</span>?: <span class="hljs-title class_">AsyncLayerOptions</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 拖拽模式</span><br><span class="hljs-comment">   */</span><br>  dragMode?: <span class="hljs-built_in">string</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 有数据域的容器，可以为子组件提供读取的字段绑定页面</span><br><span class="hljs-comment">   */</span><br>  getAvailableContextFields?: <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-comment">// 提供数据域的容器节点</span></span></span><br><span class="hljs-params"><span class="hljs-function">    scopeNode: EditorNodeType,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-comment">// 数据域的应用节点</span></span></span><br><span class="hljs-params"><span class="hljs-function">    target: EditorNodeType,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-comment">// 节点所属的容器region</span></span></span><br><span class="hljs-params"><span class="hljs-function">    region?: EditorNodeType</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) =&gt;</span> <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">SchemaCollection</span> | <span class="hljs-built_in">void</span>&gt;;<br><br>  <span class="hljs-comment">/** 配置面板表单的 pipeOut function */</span><br>  panelFormPipeOut?: <span class="hljs-function">(<span class="hljs-params">value: <span class="hljs-built_in">any</span>, oldValue: <span class="hljs-built_in">any</span></span>) =&gt;</span> <span class="hljs-built_in">any</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@deprecated</span> 用 panelBodyCreator</span><br><span class="hljs-comment">   */</span><br>  panelControlsCreator?: <span class="hljs-function">(<span class="hljs-params">context: BaseEventContext</span>) =&gt;</span> <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">any</span>&gt;;<br>  panelBodyCreator?: <span class="hljs-function">(<span class="hljs-params">context: BaseEventContext</span>) =&gt;</span> <span class="hljs-title class_">SchemaCollection</span>;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 配置面板内容区的异步加载方法，设置后优先级大于panelBodyCreator</span><br><span class="hljs-comment">   */</span><br>  panelBodyAsyncCreator?: <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    context: BaseEventContext</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) =&gt;</span> <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">SchemaCollection</span>&gt;;<br><br>  popOverBody?: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">any</span>&gt;;<br>  popOverBodyCreator?: <span class="hljs-function">(<span class="hljs-params">context: BaseEventContext</span>) =&gt;</span> <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">any</span>&gt;;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 返回渲染器信息。不是每个插件都需要。</span><br><span class="hljs-comment">   */</span><br>  getRendererInfo?: <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    context: RendererInfoResolveEventContext</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) =&gt;</span> <span class="hljs-title class_">BasicRendererInfo</span> | <span class="hljs-built_in">void</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生成节点的 JSON Schema 的 uri 地址。</span><br><span class="hljs-comment">   */</span><br>  buildJSONSchema?: <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    context: RendererJSONSchemaResolveEventContext</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) =&gt;</span> <span class="hljs-built_in">void</span> | <span class="hljs-built_in">string</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 构建右上角功能按钮集合</span><br><span class="hljs-comment">   */</span><br>  buildEditorToolbar?: <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    context: BaseEventContext,</span></span><br><span class="hljs-params"><span class="hljs-function">    toolbars: <span class="hljs-built_in">Array</span>&lt;BasicToolbarItem&gt;</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) =&gt;</span> <span class="hljs-built_in">void</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 构建右键菜单项</span><br><span class="hljs-comment">   */</span><br>  buildEditorContextMenu?: <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    context: ContextMenuEventContext,</span></span><br><span class="hljs-params"><span class="hljs-function">    menus: <span class="hljs-built_in">Array</span>&lt;ContextMenuItem&gt;</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) =&gt;</span> <span class="hljs-built_in">void</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 构建编辑器面板。</span><br><span class="hljs-comment">   */</span><br>  buildEditorPanel?: <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    context: BuildPanelEventContext,</span></span><br><span class="hljs-params"><span class="hljs-function">    panels: <span class="hljs-built_in">Array</span>&lt;BasicPanelItem&gt;</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) =&gt;</span> <span class="hljs-built_in">void</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 构建子渲染器信息集合。</span><br><span class="hljs-comment">   */</span><br>  buildSubRenderers?: <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    context: RendererEventContext,</span></span><br><span class="hljs-params"><span class="hljs-function">    subRenderers: <span class="hljs-built_in">Array</span>&lt;SubRendererInfo&gt;,</span></span><br><span class="hljs-params"><span class="hljs-function">    renderers: <span class="hljs-built_in">Array</span>&lt;RendererConfig&gt;</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) =&gt;</span><br>    | <span class="hljs-title class_">BasicSubRenderInfo</span><br>    | <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">BasicSubRenderInfo</span>&gt;<br>    | <span class="hljs-built_in">void</span><br>    | <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">BasicSubRenderInfo</span> | <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">BasicSubRenderInfo</span>&gt; | <span class="hljs-built_in">void</span>&gt;;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 更新NPM自定义组件分类和排序[异步方法]</span><br><span class="hljs-comment">   * 备注：目前主要在npm自定义组件的分类和排序更新中使用</span><br><span class="hljs-comment">   */</span><br>  asyncUpdateCustomSubRenderersInfo?: <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    context: RendererEventContext,</span></span><br><span class="hljs-params"><span class="hljs-function">    subRenderers: <span class="hljs-built_in">Array</span>&lt;SubRendererInfo&gt;,</span></span><br><span class="hljs-params"><span class="hljs-function">    renderers: <span class="hljs-built_in">Array</span>&lt;RendererConfig&gt;</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) =&gt;</span> <span class="hljs-built_in">void</span>;<br><br>  markDom?: <span class="hljs-function">(<span class="hljs-params">dom: HTMLElement | <span class="hljs-built_in">Array</span>&lt;HTMLElement&gt;, props: <span class="hljs-built_in">any</span></span>) =&gt;</span> <span class="hljs-built_in">void</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取上下文数据结构</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> node 当前容器节点</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> region 所属容器节点</span><br><span class="hljs-comment">   */</span><br>  buildDataSchemas?: <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    node: EditorNodeType,</span></span><br><span class="hljs-params"><span class="hljs-function">    region?: EditorNodeType,</span></span><br><span class="hljs-params"><span class="hljs-function">    trigger?: EditorNodeType,</span></span><br><span class="hljs-params"><span class="hljs-function">    parent?: EditorNodeType</span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) =&gt;</span> <span class="hljs-built_in">any</span> | <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">any</span>&gt;;<br><br>  rendererBeforeDispatchEvent?: <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    node: EditorNodeType,</span></span><br><span class="hljs-params"><span class="hljs-function">    e: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    data: <span class="hljs-built_in">any</span></span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) =&gt;</span> <span class="hljs-built_in">void</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 给 schema 打补丁，纠正一下 schema 配置。</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> <span class="hljs-variable">schema</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> <span class="hljs-variable">renderer</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> <span class="hljs-variable">props</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment">   */</span><br>  patchSchema?: <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    schema: Schema,</span></span><br><span class="hljs-params"><span class="hljs-function">    renderer: RendererConfig,</span></span><br><span class="hljs-params"><span class="hljs-function">    props?: <span class="hljs-built_in">any</span></span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) =&gt;</span> <span class="hljs-title class_">Schema</span> | <span class="hljs-built_in">void</span>;<br><br>  dispose?: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 组件 ref 回调，mount 和 unmount 的时候都会调用</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> <span class="hljs-variable">ref</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment">   */</span><br>  componentRef?: <span class="hljs-function">(<span class="hljs-params">node: EditorNodeType, ref: <span class="hljs-built_in">any</span></span>) =&gt;</span> <span class="hljs-built_in">void</span>;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasePlugin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PluginInterface</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">readonly</span> manager: EditorManager</span>) &#123;&#125;<br><br>  <span class="hljs-keyword">static</span> scene = [<span class="hljs-string">&quot;global&quot;</span>];<br><br>  name?: <span class="hljs-built_in">string</span>;<br>  rendererName?: <span class="hljs-built_in">string</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 如果配置里面有 rendererName 自动返回渲染器信息。</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> <span class="hljs-variable">renderer</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">getRendererInfo</span>(&#123;<br>    renderer,<br>    schema,<br>  &#125;: <span class="hljs-title class_">RendererInfoResolveEventContext</span>): <span class="hljs-title class_">BasicRendererInfo</span> | <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">plugin</span>: <span class="hljs-title class_">PluginInterface</span> = <span class="hljs-variable language_">this</span>;<br><br>    <span class="hljs-keyword">if</span> (<br>      schema.<span class="hljs-property">$$id</span> &amp;&amp;<br>      plugin.<span class="hljs-property">name</span> &amp;&amp;<br>      plugin.<span class="hljs-property">rendererName</span> &amp;&amp;<br>      plugin.<span class="hljs-property">rendererName</span> === renderer.<span class="hljs-property">name</span> <span class="hljs-comment">// renderer.name 会从 renderer.type 中取值</span><br>    ) &#123;<br>      <span class="hljs-keyword">let</span> curPluginName = plugin.<span class="hljs-property">name</span>;<br>      <span class="hljs-keyword">if</span> (schema?.<span class="hljs-property">isFreeContainer</span>) &#123;<br>        curPluginName = <span class="hljs-string">&quot;自由容器&quot;</span>;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (schema?.<span class="hljs-property">isSorptionContainer</span>) &#123;<br>        curPluginName = <span class="hljs-string">&quot;吸附容器&quot;</span>;<br>      &#125;<br>      <span class="hljs-comment">// 复制部分信息出去</span><br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">name</span>: curPluginName,<br>        <span class="hljs-attr">regions</span>: plugin.<span class="hljs-property">regions</span>,<br>        <span class="hljs-attr">inlineEditableElements</span>: plugin.<span class="hljs-property">inlineEditableElements</span>,<br>        <span class="hljs-attr">patchContainers</span>: plugin.<span class="hljs-property">patchContainers</span>,<br>        <span class="hljs-attr">vRendererConfig</span>: plugin.<span class="hljs-property">vRendererConfig</span>,<br>        <span class="hljs-attr">wrapperProps</span>: plugin.<span class="hljs-property">wrapperProps</span>,<br>        <span class="hljs-attr">wrapperResolve</span>: plugin.<span class="hljs-property">wrapperResolve</span>,<br>        <span class="hljs-attr">filterProps</span>: plugin.<span class="hljs-property">filterProps</span>,<br>        <span class="hljs-attr">$schema</span>: plugin.<span class="hljs-property">$schema</span>,<br>        <span class="hljs-attr">renderRenderer</span>: plugin.<span class="hljs-property">renderRenderer</span>,<br>        <span class="hljs-attr">multifactor</span>: plugin.<span class="hljs-property">multifactor</span>,<br>        <span class="hljs-attr">scaffoldForm</span>: plugin.<span class="hljs-property">scaffoldForm</span>,<br>        <span class="hljs-attr">disabledRendererPlugin</span>: plugin.<span class="hljs-property">disabledRendererPlugin</span>,<br>        <span class="hljs-attr">isBaseComponent</span>: plugin.<span class="hljs-property">isBaseComponent</span>,<br>        <span class="hljs-attr">isListComponent</span>: plugin.<span class="hljs-property">isListComponent</span>,<br>        <span class="hljs-attr">rendererName</span>: plugin.<span class="hljs-property">rendererName</span>,<br>        <span class="hljs-attr">memberImmutable</span>: plugin.<span class="hljs-property">memberImmutable</span>,<br>        <span class="hljs-attr">getSubEditorVariable</span>: plugin.<span class="hljs-property">getSubEditorVariable</span>,<br>      &#125;;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 配置了 panelControls 自动生成配置面板</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> <span class="hljs-variable">context</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> <span class="hljs-variable">panels</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">buildEditorPanel</span>(<span class="hljs-params"></span><br><span class="hljs-params">    context: BuildPanelEventContext,</span><br><span class="hljs-params">    panels: <span class="hljs-built_in">Array</span>&lt;BasicPanelItem&gt;</span><br><span class="hljs-params">  </span>) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">plugin</span>: <span class="hljs-title class_">PluginInterface</span> = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">const</span> store = <span class="hljs-variable language_">this</span>.<span class="hljs-property">manager</span>.<span class="hljs-property">store</span>;<br><br>    <span class="hljs-comment">// 没有选中元素 或者 多选时不处理</span><br>    <span class="hljs-keyword">if</span> (!store.<span class="hljs-property">activeId</span> || context.<span class="hljs-property">selections</span>.<span class="hljs-property">length</span>) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<br>      !context.<span class="hljs-property">info</span>.<span class="hljs-property">hostId</span> &amp;&amp;<br>      (plugin.<span class="hljs-property">panelControls</span> ||<br>        plugin.<span class="hljs-property">panelControlsCreator</span> ||<br>        plugin.<span class="hljs-property">panelBody</span> ||<br>        plugin.<span class="hljs-property">panelBodyCreator</span> ||<br>        plugin.<span class="hljs-property">panelBodyAsyncCreator</span>) &amp;&amp;<br>      context.<span class="hljs-property">info</span>.<span class="hljs-property">plugin</span> === <span class="hljs-variable language_">this</span><br>    ) &#123;<br>      <span class="hljs-keyword">const</span> enableAsync = !!(<br>        plugin.<span class="hljs-property">panelBodyAsyncCreator</span> &amp;&amp;<br>        <span class="hljs-keyword">typeof</span> plugin.<span class="hljs-property">panelBodyAsyncCreator</span> === <span class="hljs-string">&quot;function&quot;</span><br>      );<br>      <span class="hljs-keyword">const</span> body = plugin.<span class="hljs-property">panelBodyAsyncCreator</span><br>        ? plugin.<span class="hljs-title function_">panelBodyAsyncCreator</span>(context)<br>        : plugin.<span class="hljs-property">panelBodyCreator</span><br>        ? plugin.<span class="hljs-title function_">panelBodyCreator</span>(context)<br>        : plugin.<span class="hljs-property">panelBody</span>!;<br><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">manager</span>.<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&quot;after-build-panel-body&quot;</span>, &#123;<br>        context,<br>        <span class="hljs-attr">data</span>: body,<br>        plugin,<br>      &#125;);<br><br>      <span class="hljs-keyword">const</span> baseProps = &#123;<br>        <span class="hljs-attr">definitions</span>: plugin.<span class="hljs-property">panelDefinitions</span>,<br>        <span class="hljs-attr">submitOnChange</span>: plugin.<span class="hljs-property">panelSubmitOnChange</span>,<br>        <span class="hljs-attr">api</span>: plugin.<span class="hljs-property">panelApi</span>,<br>        <span class="hljs-attr">controls</span>: plugin.<span class="hljs-property">panelControlsCreator</span><br>          ? plugin.<span class="hljs-title function_">panelControlsCreator</span>(context)<br>          : plugin.<span class="hljs-property">panelControls</span>!,<br>        <span class="hljs-attr">justify</span>: plugin.<span class="hljs-property">panelJustify</span>,<br>        <span class="hljs-attr">panelById</span>: store.<span class="hljs-property">activeId</span>,<br>        <span class="hljs-attr">pipeOut</span>: plugin.<span class="hljs-property">panelFormPipeOut</span>?.<span class="hljs-property">bind</span>?.(plugin),<br>      &#125;;<br><br>      panels.<span class="hljs-title function_">push</span>(&#123;<br>        <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;config&quot;</span>,<br>        <span class="hljs-attr">icon</span>: plugin.<span class="hljs-property">panelIcon</span> || plugin.<span class="hljs-property">icon</span> || <span class="hljs-string">&quot;fa fa-cog&quot;</span>,<br>        <span class="hljs-attr">pluginIcon</span>: plugin.<span class="hljs-property">pluginIcon</span>,<br>        <span class="hljs-attr">title</span>: plugin.<span class="hljs-property">panelTitle</span> || <span class="hljs-string">&quot;设置&quot;</span>,<br>        <span class="hljs-attr">render</span>: enableAsync<br>          ? <span class="hljs-title function_">makeAsyncLayer</span>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>              <span class="hljs-keyword">const</span> panelBody = <span class="hljs-keyword">await</span> (body <span class="hljs-keyword">as</span> <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">SchemaCollection</span>&gt;);<br><br>              <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">manager</span>.<span class="hljs-title function_">makeSchemaFormRender</span>(&#123;<br>                ...baseProps,<br>                <span class="hljs-attr">body</span>: panelBody,<br>              &#125;);<br>            &#125;, <span class="hljs-title function_">omit</span>(plugin.<span class="hljs-property">async</span>, <span class="hljs-string">&quot;enable&quot;</span>))<br>          : <span class="hljs-variable language_">this</span>.<span class="hljs-property">manager</span>.<span class="hljs-title function_">makeSchemaFormRender</span>(&#123;<br>              ...baseProps,<br>              <span class="hljs-attr">body</span>: body <span class="hljs-keyword">as</span> <span class="hljs-title class_">SchemaCollection</span>,<br>            &#125;),<br>      &#125;);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<br>      context.<span class="hljs-property">info</span>.<span class="hljs-property">plugin</span> === <span class="hljs-variable language_">this</span> &amp;&amp;<br>      context.<span class="hljs-property">info</span>.<span class="hljs-property">hostId</span> &amp;&amp;<br>      (plugin.<span class="hljs-property">vRendererConfig</span>?.<span class="hljs-property">panelControls</span> ||<br>        plugin.<span class="hljs-property">vRendererConfig</span>?.<span class="hljs-property">panelControlsCreator</span> ||<br>        plugin.<span class="hljs-property">vRendererConfig</span>?.<span class="hljs-property">panelBody</span> ||<br>        plugin.<span class="hljs-property">vRendererConfig</span>?.<span class="hljs-property">panelBodyCreator</span>)<br>    ) &#123;<br>      panels.<span class="hljs-title function_">push</span>(&#123;<br>        <span class="hljs-attr">key</span>: context.<span class="hljs-property">info</span>.<span class="hljs-property">multifactor</span> ? <span class="hljs-string">&quot;vconfig&quot;</span> : <span class="hljs-string">&quot;config&quot;</span>,<br>        <span class="hljs-attr">icon</span>: plugin.<span class="hljs-property">vRendererConfig</span>.<span class="hljs-property">panelIcon</span> || <span class="hljs-string">&quot;fa fa-cog&quot;</span>,<br>        <span class="hljs-attr">title</span>: plugin.<span class="hljs-property">vRendererConfig</span>.<span class="hljs-property">panelTitle</span> || <span class="hljs-string">&quot;设置&quot;</span>,<br>        <span class="hljs-attr">render</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">manager</span>.<span class="hljs-title function_">makeSchemaFormRender</span>(&#123;<br>          <span class="hljs-attr">submitOnChange</span>: plugin.<span class="hljs-property">panelSubmitOnChange</span>,<br>          <span class="hljs-attr">api</span>: plugin.<span class="hljs-property">panelApi</span>,<br>          <span class="hljs-attr">definitions</span>: plugin.<span class="hljs-property">vRendererConfig</span>.<span class="hljs-property">panelDefinitions</span>,<br>          <span class="hljs-attr">controls</span>: plugin.<span class="hljs-property">vRendererConfig</span>.<span class="hljs-property">panelControlsCreator</span><br>            ? plugin.<span class="hljs-property">vRendererConfig</span>.<span class="hljs-title function_">panelControlsCreator</span>(context)<br>            : plugin.<span class="hljs-property">vRendererConfig</span>.<span class="hljs-property">panelControls</span>!,<br>          <span class="hljs-attr">body</span>: plugin.<span class="hljs-property">vRendererConfig</span>.<span class="hljs-property">panelBodyCreator</span><br>            ? plugin.<span class="hljs-property">vRendererConfig</span>.<span class="hljs-title function_">panelBodyCreator</span>(context)<br>            : plugin.<span class="hljs-property">vRendererConfig</span>.<span class="hljs-property">panelBody</span>!,<br>          <span class="hljs-attr">justify</span>: plugin.<span class="hljs-property">vRendererConfig</span>.<span class="hljs-property">panelJustify</span>,<br>          <span class="hljs-attr">panelById</span>: store.<span class="hljs-property">activeId</span>,<br>        &#125;),<br>      &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">// 如果是个多重身份证</span><br>    <span class="hljs-keyword">if</span> (context.<span class="hljs-property">info</span>.<span class="hljs-property">plugin</span> === <span class="hljs-variable language_">this</span> &amp;&amp; context.<span class="hljs-property">info</span>.<span class="hljs-property">multifactor</span>) &#123;<br>      <span class="hljs-keyword">const</span> <span class="hljs-attr">sameIdChild</span>: <span class="hljs-title class_">EditorNodeType</span> = context.<span class="hljs-property">node</span>.<span class="hljs-property">sameIdChild</span>;<br><br>      <span class="hljs-keyword">if</span> (sameIdChild) &#123;<br>        <span class="hljs-keyword">const</span> subPanels = <span class="hljs-variable language_">this</span>.<span class="hljs-property">manager</span>.<span class="hljs-title function_">collectPanels</span>(sameIdChild, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>        subPanels.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">panel</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (panel.<span class="hljs-property">key</span> === <span class="hljs-string">&quot;config&quot;</span> || panel.<span class="hljs-property">key</span> === <span class="hljs-string">&quot;vconfig&quot;</span>) &#123;<br>            panels.<span class="hljs-title function_">push</span>(&#123;<br>              ...panel,<br>              <span class="hljs-attr">key</span>: <span class="hljs-string">`sub-<span class="hljs-subst">$&#123;panel.key&#125;</span>`</span>,<br>              <span class="hljs-attr">icon</span>: sameIdChild.<span class="hljs-property">info</span>?.<span class="hljs-property">plugin</span>?.<span class="hljs-property">icon</span> || panel.<span class="hljs-property">icon</span>,<br>            &#125;);<br>          &#125;<br>        &#125;);<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 默认什么组件都加入的子组件里面，子类里面可以复写这个改变行为。</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> <span class="hljs-variable">context</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> <span class="hljs-variable">subRenderers</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">buildSubRenderers</span>(<br>    <span class="hljs-attr">context</span>: <span class="hljs-title class_">RendererEventContext</span>,<br>    <span class="hljs-attr">subRenderers</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">SubRendererInfo</span>&gt;,<br>    <span class="hljs-attr">renderers</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">RendererConfig</span>&gt;<br>  ): <span class="hljs-title class_">BasicSubRenderInfo</span> | <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">BasicSubRenderInfo</span>&gt; | <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">plugin</span>: <span class="hljs-title class_">PluginInterface</span> = <span class="hljs-variable language_">this</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(plugin.<span class="hljs-property">scaffolds</span>)) &#123;<br>      <span class="hljs-keyword">return</span> plugin.<span class="hljs-property">scaffolds</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">scaffold</span>) =&gt;</span> (&#123;<br>        <span class="hljs-attr">name</span>: (scaffold.<span class="hljs-property">name</span> ?? plugin.<span class="hljs-property">name</span>)!,<br>        <span class="hljs-attr">icon</span>: scaffold.<span class="hljs-property">icon</span> ?? plugin.<span class="hljs-property">icon</span>,<br>        <span class="hljs-attr">pluginIcon</span>: plugin.<span class="hljs-property">pluginIcon</span>,<br>        <span class="hljs-attr">description</span>: scaffold.<span class="hljs-property">description</span> ?? plugin.<span class="hljs-property">description</span>,<br>        <span class="hljs-attr">previewSchema</span>: scaffold.<span class="hljs-property">previewSchema</span> ?? plugin.<span class="hljs-property">previewSchema</span>,<br>        <span class="hljs-attr">tags</span>: scaffold.<span class="hljs-property">tags</span> ?? plugin.<span class="hljs-property">tags</span>,<br>        <span class="hljs-attr">docLink</span>: scaffold.<span class="hljs-property">docLink</span> ?? plugin.<span class="hljs-property">docLink</span>,<br>        <span class="hljs-attr">type</span>: scaffold.<span class="hljs-property">type</span> ?? plugin.<span class="hljs-property">type</span>,<br>        <span class="hljs-attr">scaffold</span>: scaffold.<span class="hljs-property">scaffold</span> ?? plugin.<span class="hljs-property">scaffold</span>,<br>        <span class="hljs-attr">scaffoldForm</span>: plugin.<span class="hljs-property">scaffoldForm</span>,<br>        <span class="hljs-attr">disabledRendererPlugin</span>: plugin.<span class="hljs-property">disabledRendererPlugin</span>,<br>        <span class="hljs-attr">isBaseComponent</span>: plugin.<span class="hljs-property">isBaseComponent</span>,<br>        <span class="hljs-attr">rendererName</span>: plugin.<span class="hljs-property">rendererName</span>,<br>      &#125;));<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (plugin.<span class="hljs-property">name</span> &amp;&amp; plugin.<span class="hljs-property">description</span>) &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">searchKeywords</span>: plugin.<span class="hljs-property">searchKeywords</span>,<br>        <span class="hljs-attr">name</span>: plugin.<span class="hljs-property">name</span>,<br>        <span class="hljs-attr">icon</span>: plugin.<span class="hljs-property">icon</span>,<br>        <span class="hljs-attr">description</span>: plugin.<span class="hljs-property">description</span>,<br>        <span class="hljs-attr">previewSchema</span>: plugin.<span class="hljs-property">previewSchema</span>,<br>        <span class="hljs-attr">tags</span>: plugin.<span class="hljs-property">tags</span>,<br>        <span class="hljs-attr">docLink</span>: plugin.<span class="hljs-property">docLink</span>,<br>        <span class="hljs-attr">type</span>: plugin.<span class="hljs-property">type</span>,<br>        <span class="hljs-attr">scaffold</span>: plugin.<span class="hljs-property">scaffold</span>,<br>        <span class="hljs-attr">scaffoldForm</span>: plugin.<span class="hljs-property">scaffoldForm</span>,<br>        <span class="hljs-attr">disabledRendererPlugin</span>: plugin.<span class="hljs-property">disabledRendererPlugin</span>,<br>        <span class="hljs-attr">isBaseComponent</span>: plugin.<span class="hljs-property">isBaseComponent</span>,<br>        <span class="hljs-attr">pluginIcon</span>: plugin.<span class="hljs-property">pluginIcon</span>,<br>        <span class="hljs-attr">rendererName</span>: plugin.<span class="hljs-property">rendererName</span>,<br>      &#125;;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">renderPlaceholder</span>(<span class="hljs-params">text: <span class="hljs-built_in">string</span>, key?: <span class="hljs-built_in">any</span>, style?: <span class="hljs-built_in">any</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>, &#123;<br>      key,<br>      <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;wrapper-sm b-a b-light m-b-sm&quot;</span>,<br>      <span class="hljs-attr">style</span>: style,<br>      <span class="hljs-attr">children</span>: <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;span&quot;</span>, &#123;<br>        <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;text-muted&quot;</span>,<br>        <span class="hljs-attr">children</span>: text,<br>      &#125;),<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-title function_">getPlugin</span>(<span class="hljs-params">rendererNameOrKlass: <span class="hljs-built_in">string</span> | <span class="hljs-keyword">typeof</span> BasePlugin</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">find</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">manager</span>.<span class="hljs-property">plugins</span>, <span class="hljs-function">(<span class="hljs-params">plugin</span>) =&gt;</span><br>      <span class="hljs-keyword">typeof</span> rendererNameOrKlass === <span class="hljs-string">&quot;string&quot;</span><br>        ? plugin.<span class="hljs-property">rendererName</span> === rendererNameOrKlass<br>        : plugin <span class="hljs-keyword">instanceof</span> rendererNameOrKlass<br>    );<br>  &#125;<br><br>  <span class="hljs-title function_">buildDataSchemas</span>(<span class="hljs-params"></span><br><span class="hljs-params">    node: EditorNodeType,</span><br><span class="hljs-params">    region?: EditorNodeType,</span><br><span class="hljs-params">    trigger?: EditorNodeType,</span><br><span class="hljs-params">    parent?: EditorNodeType</span><br><span class="hljs-params">  </span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;string&quot;</span>,<br>      <span class="hljs-attr">rawType</span>: <span class="hljs-variable constant_">RAW_TYPE_MAP</span>[node.<span class="hljs-property">schema</span>.<span class="hljs-property">type</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">SchemaType</span>] || <span class="hljs-string">&quot;string&quot;</span>,<br>      <span class="hljs-attr">title</span>:<br>        <span class="hljs-keyword">typeof</span> node.<span class="hljs-property">schema</span>.<span class="hljs-property">label</span> === <span class="hljs-string">&quot;string&quot;</span><br>          ? node.<span class="hljs-property">schema</span>.<span class="hljs-property">label</span><br>          : node.<span class="hljs-property">schema</span>.<span class="hljs-property">name</span>,<br>      <span class="hljs-attr">originalValue</span>: node.<span class="hljs-property">schema</span>.<span class="hljs-property">value</span>, <span class="hljs-comment">// 记录原始值，循环引用检测需要</span><br>    &#125; <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>;<br>  &#125;<br><br>  <span class="hljs-title function_">getKeyAndName</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">key</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">rendererName</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>,<br>    &#125;;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里有几个比较重要的属性必须命名：</p><ul><li>rendererName：关联的渲染组件名，与渲染器的名称一致配置结果才会赋值给渲染器的 props</li><li>name：组件名称（即组件面板显示的 Title）</li><li>tags：决定会在编辑器左侧组件面板哪个 tab 下面显示的</li><li>scaffold：拖入组件里面时的初始数据</li><li>panelTitle：右侧面板名称</li><li>panelControls、panelBodyCreator：右侧面板内容展示配置，符合 amis 的 json 渲染页面规则</li></ul><p>如果是设置自定义组件的 plugin，按照上面的属性编写即可，而如果是希望在已有的组件上增加一些配置，可以通过直接继承原有 plugin 进行改写，例如如果希望 service 组件可以增加一个模式，在该模式下直接填写一些请求相关参数，则可以采用继承原有的 ServicePlugin、改写目标属性，例如下写法：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomServicePlugin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">ServicePlugin</span> &#123;<br>  <span class="hljs-comment">// 需要显式声明静态属性</span><br>  <span class="hljs-keyword">static</span> id = <span class="hljs-string">&quot;ServicePlugin&quot;</span>;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">manager: EditorManager</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(manager); <span class="hljs-comment">// 这会调用父类构造函数，初始化 dsManager</span><br>    <span class="hljs-comment">// 如果需要，可以在这里添加自定义初始化逻辑</span><br>  &#125;<br><br>  <span class="hljs-comment">// 覆写方法</span><br>  panelBodyCreator = <span class="hljs-function">(<span class="hljs-params">context: BaseEventContext</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> dsManager = <span class="hljs-variable language_">this</span>.<span class="hljs-property">dsManager</span>;<br>    <span class="hljs-comment">/** 数据源控件 */</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">generateDSControls</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>      <span class="hljs-keyword">const</span> dsTypeSelector = dsManager.<span class="hljs-title function_">getDSSelectorSchema</span>(<br>        &#123;<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;select&quot;</span>,<br>          <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;horizontal&quot;</span>,<br>          <span class="hljs-attr">horizontal</span>: &#123;<br>            <span class="hljs-attr">justify</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">left</span>: <span class="hljs-string">&quot;col-sm-4&quot;</span>,<br>          &#125;,<br>          <span class="hljs-attr">onChange</span>: <span class="hljs-function">(<span class="hljs-params">value: <span class="hljs-built_in">any</span>, oldValue: <span class="hljs-built_in">any</span>, model: <span class="hljs-built_in">any</span>, form: <span class="hljs-built_in">any</span></span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (value !== oldValue) &#123;<br>              <span class="hljs-keyword">const</span> data = form.<span class="hljs-property">data</span>;<br>              <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(data).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">if</span> (<br>                  key?.<span class="hljs-title function_">toLowerCase</span>()?.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&quot;fields&quot;</span>) ||<br>                  key?.<span class="hljs-title function_">toLowerCase</span>().<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&quot;api&quot;</span>)<br>                ) &#123;<br>                  form.<span class="hljs-title function_">deleteValueByName</span>(key);<br>                &#125;<br>              &#125;);<br>              form.<span class="hljs-title function_">deleteValueByName</span>(<span class="hljs-string">&quot;__fields&quot;</span>);<br>              form.<span class="hljs-title function_">deleteValueByName</span>(<span class="hljs-string">&quot;__relations&quot;</span>);<br>              form.<span class="hljs-title function_">setValueByName</span>(<span class="hljs-string">&quot;api&quot;</span>, <span class="hljs-literal">undefined</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> value;<br>          &#125;,<br>        &#125;,<br>        &#123; <span class="hljs-attr">schema</span>: context?.<span class="hljs-property">schema</span>, <span class="hljs-attr">sourceKey</span>: <span class="hljs-string">&quot;api&quot;</span> &#125;<br>      );<br>      <span class="hljs-comment">/** 默认数据源类型 */</span><br>      <span class="hljs-keyword">const</span> defaultDsType = dsTypeSelector.<span class="hljs-property">value</span>;<br>      <span class="hljs-keyword">const</span> dsSettings = dsManager.<span class="hljs-title function_">buildCollectionFromBuilders</span>(<br>        <span class="hljs-function">(<span class="hljs-params">builder, builderKey</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;container&quot;</span>,<br>            <span class="hljs-attr">visibleOn</span>: <span class="hljs-string">`data.dsType == null ? &#x27;<span class="hljs-subst">$&#123;builderKey&#125;</span>&#x27; === &#x27;<span class="hljs-subst">$&#123;</span></span><br><span class="hljs-subst"><span class="hljs-string">              defaultDsType || ApiDSBuilderKey</span></span><br><span class="hljs-subst"><span class="hljs-string">            &#125;</span>&#x27; : data.dsType === &#x27;<span class="hljs-subst">$&#123;builderKey&#125;</span>&#x27;`</span>,<br>            <span class="hljs-attr">body</span>: <span class="hljs-title function_">flattenDeep</span>([<br>              builder.<span class="hljs-title function_">makeSourceSettingForm</span>(&#123;<br>                <span class="hljs-attr">feat</span>: <span class="hljs-string">&quot;View&quot;</span>,<br>                <span class="hljs-attr">renderer</span>: <span class="hljs-string">&quot;service&quot;</span>,<br>                <span class="hljs-attr">inScaffold</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">sourceSettings</span>: &#123;<br>                  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;api&quot;</span>,<br>                  <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;接口配置&quot;</span>,<br>                  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;horizontal&quot;</span>,<br>                  ...(builderKey === <span class="hljs-string">&quot;api&quot;</span> || builderKey === <span class="hljs-string">&quot;apicenter&quot;</span><br>                    ? &#123;<br>                        <span class="hljs-attr">horizontalConfig</span>: &#123;<br>                          <span class="hljs-attr">labelAlign</span>: <span class="hljs-string">&quot;left&quot;</span>,<br>                          <span class="hljs-attr">horizontal</span>: &#123;<br>                            <span class="hljs-attr">justify</span>: <span class="hljs-literal">true</span>,<br>                            <span class="hljs-attr">left</span>: <span class="hljs-number">4</span>,<br>                          &#125;,<br>                        &#125;,<br>                      &#125;<br>                    : &#123;&#125;),<br><br>                  <span class="hljs-attr">useFieldManager</span>: builderKey === <span class="hljs-title class_">ModelDSBuilderKey</span>,<br>                &#125;,<br>              &#125;),<br>            ]),<br>          &#125;;<br>        &#125;<br>      );<br>      dsSettings[<span class="hljs-number">0</span>].<span class="hljs-property">body</span>[<span class="hljs-number">0</span>].<span class="hljs-property">value</span> = <span class="hljs-string">`\$&#123;</span><br><span class="hljs-string">    isDIFY ? &#123;</span><br><span class="hljs-string">      url: &#x27;http://dify.com/adaptor/workflows/run&#x27;,</span><br><span class="hljs-string">      method: &#x27;post&#x27;,</span><br><span class="hljs-string">      requestAdaptor:</span><br><span class="hljs-string">        &#x27;function getUUID() &#123;\n  function generateRand(len = 7) &#123;\n    const rands =\n      &quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;\n    return Array.from(Array(len))\n      .map(() =&gt; rands[parseInt((Math.random() * rands.length).toString())])\n      .join(&quot;&quot;);\n  &#125;\n\n  return new Date().getTime() + generateRand(7);\n&#125;\napi.data.request_id = getUUID()\nreturn api&#x27;,</span><br><span class="hljs-string">      adaptor: &#x27;&#x27;</span><br><span class="hljs-string">    &#125; : &#123;</span><br><span class="hljs-string">      </span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;`</span>;<br>      <span class="hljs-keyword">return</span> [dsTypeSelector, ...dsSettings];<br>    &#125;;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">getSchemaTpl</span>(<span class="hljs-string">&quot;tabs&quot;</span>, [<br>      &#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;属性&quot;</span>,<br>        <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;p-none&quot;</span>,<br>        <span class="hljs-attr">body</span>: [<br>          <span class="hljs-title function_">getSchemaTpl</span>(<span class="hljs-string">&quot;collapseGroup&quot;</span>, [<br>            &#123;<br>              <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;基本&quot;</span>,<br>              <span class="hljs-attr">body</span>: [<br>                <span class="hljs-title function_">getSchemaTpl</span>(<span class="hljs-string">&quot;layout:originPosition&quot;</span>, &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;left-top&quot;</span> &#125;),<br>                <span class="hljs-title function_">getSchemaTpl</span>(<span class="hljs-string">&quot;switch&quot;</span>, &#123;<br>                  <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;是否使用dify&quot;</span>,<br>                  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;isDIFY&quot;</span>,<br>                  <span class="hljs-attr">value</span>: <span class="hljs-literal">true</span>,<br>                &#125;),<br>                ...<span class="hljs-title function_">generateDSControls</span>(),<br>              ],<br>            &#125;,<br>          ]),<br>        ],<br>      &#125;,<br>      <span class="hljs-comment">// ...existing code...</span><br>    ]);<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里 id 需要注明，因为 ServicePlugin 的 id 是静态变量不会被继承。这里因为要改写的方法 panelBodyCreator 使用了 dsManager，所以要在构造函数调用父类构造函数。这里首先增加了一个 isDIFY 的配置，用于控制是否要填入一个默认的 API 配置。原代码的 dsTypeSelector 是用于设置数据来源的配置、即 dsType；dsSettings 用于配置 api 的 json 内容，所以可以等 dsSettings 返回后再做 api 配置修改。<br>以上修改逻辑较为粗糙，适用于配置嵌套比较浅的组件 plugin，如果是嵌套比较深的例如 Container 的背景图片上传配置，则由于配置很难全部透传到 input-image 组件内部，所以修改无效。<br>完成 plugin 编写后，如果是自定义组件的 plugin，直接用 registerEditorPlugin 全局注册组件即可；如果是扩展已有组件，需要用<code>unRegisterEditorPlugin(id:string)</code>注销掉原组件，再全局注册新的即可</p><h3 id="自定义组件扩展"><a href="#自定义组件扩展" class="headerlink" title="自定义组件扩展"></a>自定义组件扩展</h3><p>自定义组件扩展需要注意两件事：</p><ol><li>需要在编辑器添加自定义组件的 plugin 和 renderer</li><li>需要在 SDK 添加自定义组件的 renderer</li></ol><p>plugin 的开发在上一节已经叙述，过程是一致的。而 renderer 的开发简单来说是将 plugin 配置的变量作为 props 的入参，和默认参数结合，最终将数据渲染进组件进行展示。由于 amis 开发依赖 react，所以 renderer 利用 react 开发最为有利，如果要使用 Vue 开发，就需要利用 amis-widget 的包装函数进行一层转换，而且还是转 React。。。</p><p>我个人在开发时就遇到了问题：在 nuxt 3 项目引入 renderer 文件时整个页面都阻塞无法展示，不确定是不是因为 nuxt 3 对 react 有什么排斥的</p><h3 id="action-扩展"><a href="#action-扩展" class="headerlink" title="action 扩展"></a>action 扩展</h3><p>关于如何开发 action 的内容较少，只能根据源码内容进行推测。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> interface <span class="hljs-title class_">RendererAction</span> &#123;<br>  <span class="hljs-comment">// 运行这个 Action，每个类型的 Action 都只有一个实例，run 函数是个可重入的函数</span><br>  <span class="hljs-attr">run</span>: <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    action: ListenerAction,</span></span><br><span class="hljs-params"><span class="hljs-function">    renderer: ListenerContext,</span></span><br><span class="hljs-params"><span class="hljs-function">    event: RendererEvent&lt;any&gt;,</span></span><br><span class="hljs-params"><span class="hljs-function">    mergeData?: any <span class="hljs-comment">// 有些Action内部需要通过上下文数据处理专有逻辑，这里的数据是事件数据+渲染器数据</span></span></span><br><span class="hljs-params"><span class="hljs-function">  </span>) =&gt;</span> <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">RendererEvent</span>&lt;any&gt; | <span class="hljs-keyword">void</span>&gt;;<br>&#125;<br></code></pre></td></tr></table></figure><p>action 的基本结构如上所示，action 传入内容应该为 json 配置内容；renderer 不太明确，似乎是获取组件渲染内部的方法，通过 renderer.props 访问；event 应该是获取外部配置的一些函数，在编辑器的 demo 和 sdk 的 embed 都配置了一些函数，如请求 fetcher、跳转 jumpTo 等，在这个函数里可以通过 event.context.env 来访问到。<br>amis 提供了函数<code>registerAction(type: string, action: RendererAction)</code>当使用时就成功注册了一种行为动作，调用时使用形如<code>actionType: &#39;ajax&#39;</code>的格式就可以实现。</p><p>如果要在编辑器动作配置弹窗里出现配置的内容，则需要使用<code>registerActionPanel(actionType: string,actionPanel?: ActionPanel)</code>函数，其中 actionType 对应于注册动作的 type 内容，actionPanel 则大致包含如下内容：</p><ul><li>label：功能说明，对应于动作配置弹窗左侧菜单选项名</li><li>tag：所属大类，对应于动作配置弹窗左侧菜单选项集合名</li><li>description：对应动作说明</li><li>supportComponents：支持的组件类型</li><li>schema：动作对应的 json</li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>（1）<a href="https://mp.weixin.qq.com/s/yqYey76qLGYPfDtpGkVFfA">低代码渲染那些事</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;公司要求用低代码来协助产品搭建一些简单的产品，通过一段时间有限的调研，选择了这个开源项目，开启了一段噩梦。&lt;br&gt;接下来是吐槽时间。&lt;/p&gt;</summary>
    
    
    
    <category term="工作技巧" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="低代码" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/%E4%BD%8E%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Nuxt3项目实践踩坑</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/12/08/nuxt3/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/12/08/nuxt3/</id>
    <published>2024-12-08T04:39:13.000Z</published>
    <updated>2025-04-15T02:02:42.252Z</updated>
    
    <content type="html"><![CDATA[<p>最近因产品需求，需要搭建一个支持 ssr 渲染的项目。在搭建 Nuxt3 项目的过程中，出现了很多问题，在此集中记录一下。</p><span id="more"></span><p>之所以选 Nuxt3 是考虑团队技术栈和 Vue 2 停止维护的事实决定的，本以为会多少兼容一下 Nuxt 2、Vue 2 的语法，事实证明太天真了。</p><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><p>项目需求：<br>Nodejs &gt;&#x3D; 18<br>执行指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npx nuxi@latest init &lt;project-name&gt;<br></code></pre></td></tr></table></figure><p>执行完成后进入<code>&lt;project-name&gt;</code>目录下，执行指令 <code>npm run dev</code>即可访问 <a href="http://localhost:3000/">http://localhost:3000</a></p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>初始化的 Nuxt 项目目录结构如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Nuxt3<br>├── assets                    <span class="hljs-meta"># 工程化处理的静态资源</span><br>├── components                <span class="hljs-meta"># 项目组件</span><br>├── composables               <span class="hljs-meta"># 响应式共享状态</span><br>├── layouts                   <span class="hljs-meta"># 布局组件</span><br>├── middleware                <span class="hljs-meta"># 路由中间件</span><br>├── pages                     <span class="hljs-meta"># 页面视图</span><br>├── plugins                   <span class="hljs-meta"># 项目公共插件</span><br>├── <span class="hljs-keyword">public</span>                    <span class="hljs-meta"># 不需要工程化处理的静态资源</span><br>├── store                     <span class="hljs-meta"># 状态管理</span><br>├── utils                     <span class="hljs-meta"># 静态工具函数</span><br>├── app.vue                   <span class="hljs-meta"># 入口页面</span><br>├── .gitignore                    <span class="hljs-meta"># git仓库提交忽略配置</span><br>├── nuxt.config.ts                <span class="hljs-meta"># Vite 构建配置入口</span><br>├── package.json                  <span class="hljs-meta"># 项目包管理文件</span><br>├── pnpm-<span class="hljs-keyword">lock</span>.yaml                <span class="hljs-meta"># pnpm包版本管理锁定</span><br>└── README.md                     <span class="hljs-meta"># 项目说明</span><br></code></pre></td></tr></table></figure><p>一般情况下我们认为项目开发内容（如页面、组件等）统一放在 src 文件夹内方便管理，因此需要修改 nuxt.config.ts 的配置为</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NuxtConfig</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nuxt/config&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineNuxtConfig</span>(&#123;<br>++  <span class="hljs-attr">srcDir</span>: <span class="hljs-string">&#x27;src/&#x27;</span>,<br>&#125; <span class="hljs-keyword">as</span> <span class="hljs-title class_">NuxtConfig</span>);<br></code></pre></td></tr></table></figure><p>同时将 app.vue、pages、server 文件等移到 src 目录下，变更为以下目录结构</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs 1c">-<span class="hljs-string">| /</span><br>---<span class="hljs-string">| node_modules/</span><br>---<span class="hljs-string">| nuxt.config.js</span><br>---<span class="hljs-string">| package.json</span><br>---<span class="hljs-string">| src/</span><br>------<span class="hljs-string">| assets/</span><br>------<span class="hljs-string">| components/</span><br>------<span class="hljs-string">| layouts/</span><br>------<span class="hljs-string">| middleware/</span><br>------<span class="hljs-string">| pages/</span><br>------<span class="hljs-string">| plugins/</span><br>------<span class="hljs-string">| public/</span><br>------<span class="hljs-string">| store/</span><br>------<span class="hljs-string">| server/</span><br>------<span class="hljs-string">| app.config.ts</span><br>------<span class="hljs-string">| app.vue</span><br>------<span class="hljs-string">| error.vue</span><br></code></pre></td></tr></table></figure><h4 id="重要目录介绍"><a href="#重要目录介绍" class="headerlink" title="重要目录介绍"></a>重要目录介绍</h4><h5 id="pages"><a href="#pages" class="headerlink" title="pages"></a>pages</h5><p>页面目录。Nuxt 提供了一个基于文件的路由，使用 Vue Router 在底层创建路由。<code>pages/index.vue</code> 文件将映射到应用程序的 <code>/ </code>路由。如果要设置动态路由，可用带方括号的文件名或文件夹表示，双方括号表示参数是可选的</p><h5 id="components"><a href="#components" class="headerlink" title="components"></a>components</h5><p>组件目录，放置全部的组件，Nuxt 项目会自动导入注册目录下的组件<br>如果您在嵌套目录中有一个组件，例如：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">| components/</span><br>--<span class="hljs-string">| base/</span><br>----<span class="hljs-string">| foo/</span><br>------<span class="hljs-string">| Button.vue</span><br></code></pre></td></tr></table></figure><p>那么组件的名称将基于其自身的路径目录和文件名，成为 BaseFooButton。如果希望仅根据组件名称而不是路径自动导入组件，则需要使用扩展形式的配置对象将 pathPrefix 选项设置为 false</p><h5 id="app-vue"><a href="#app-vue" class="headerlink" title="app.vue"></a>app.vue</h5><p>根视图组件，可以在组件中定义全局的样式和行为，并且在应用程序的整个生命周期内始终存在，可以说 app.vue 是 Nuxt.js 3 应用程序的视图层的入口文件。</p><h3 id="常用工具配置"><a href="#常用工具配置" class="headerlink" title="常用工具配置"></a>常用工具配置</h3><p>nuxt 自身提供了很多适配的模块，可优先在<a href="https://www.nuxt.com.cn/modules">官网</a>上进行查找，阅读安装指南</p><h4 id="pinia"><a href="#pinia" class="headerlink" title="pinia"></a>pinia</h4><p>Nuxt 3 不支持 Vuex，推荐 pinia，在插件市场提供了 pinia 的安装。<br>安装指令：<code>npm i pinia @pinia/nuxt</code><br>配置调整：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineNuxtConfig</span>(&#123;<br>  <span class="hljs-attr">modules</span>: [<span class="hljs-string">&quot;@pinia/nuxt&quot;</span>],<br>&#125;);<br></code></pre></td></tr></table></figure><p>对于选项式文件，如果要引入 pinia 内部的方法和 data 时应使用 setup 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> baseStore = <span class="hljs-title function_">useBaseStore</span>();<br>    <span class="hljs-keyword">return</span> &#123; baseStore &#125;;<br>&#125;,<br></code></pre></td></tr></table></figure><h4 id="element-ui"><a href="#element-ui" class="headerlink" title="element ui"></a>element ui</h4><p>Nuxt 3 支持 element plus，和之前的 element ui 略有差异，但基本语法一致<br>安装指令：<code>npm i element-plus @element-plus/nuxt -D</code><br>配置调整：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineNuxtConfig</span>(&#123;<br>  <span class="hljs-attr">modules</span>: [<span class="hljs-string">&quot;@element-plus/nuxt&quot;</span>],<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="postcss-px-to-viewport-8-plugin"><a href="#postcss-px-to-viewport-8-plugin" class="headerlink" title="postcss-px-to-viewport-8-plugin"></a>postcss-px-to-viewport-8-plugin</h4><p>如果页面包括 wap 页面，需要引入 postcss-px-to-viewport-8-plugin 插件，实现页面样式与屏幕适配。该插件可以将代码中的 px 自动转换为 vw 单位。<br>安装指令：<code>npm i postcss-px-to-viewport-8-plugin --save-dev</code><br>配置调整：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineNuxtConfig</span>(&#123;<br>  <span class="hljs-attr">postcss</span>: &#123;<br>    <span class="hljs-attr">plugins</span>: &#123;<br>      <span class="hljs-string">&quot;postcss-px-to-viewport-8-plugin&quot;</span>: &#123;<br>        <span class="hljs-attr">unitToConvert</span>: <span class="hljs-string">&quot;px&quot;</span>, <span class="hljs-comment">// 要转化的单位</span><br>        <span class="hljs-attr">viewportWidth</span>: <span class="hljs-number">375</span>, <span class="hljs-comment">// UI设计稿的宽度</span><br>        <span class="hljs-attr">unitPrecision</span>: <span class="hljs-number">6</span>, <span class="hljs-comment">// 转换后的精度，即小数点位数</span><br>        <span class="hljs-attr">propList</span>: [<span class="hljs-string">&quot;*&quot;</span>], <span class="hljs-comment">// 指定转换的css属性的单位，*代表全部css属性的单位都进行转换</span><br>        <span class="hljs-attr">viewportUnit</span>: <span class="hljs-string">&quot;vw&quot;</span>, <span class="hljs-comment">// 指定需要转换成的视窗单位，默认vw</span><br>        <span class="hljs-attr">fontViewportUnit</span>: <span class="hljs-string">&quot;vw&quot;</span>, <span class="hljs-comment">// 指定字体需要转换成的视窗单位，默认vw</span><br>        <span class="hljs-attr">minPixelValue</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 默认值1，小于或等于1px则不进行转换</span><br>        <span class="hljs-attr">mediaQuery</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否在媒体查询的css代码中也进行转换，默认false</span><br>        <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否转换后直接更换属性值</span><br>        <span class="hljs-attr">exclude</span>: [<span class="hljs-regexp">/node_modules/</span>, <span class="hljs-regexp">/src\/pages\/pc/</span>, <span class="hljs-regexp">/src\/components\/pc/</span>], <span class="hljs-comment">// 设置忽略文件，用正则做目录名匹配</span><br>      &#125;,<br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>插件的配置规则与之前写过的 postcss-px-to-viewport 一致，只是 postcss-px-to-viewport 已废弃了。</p><h3 id="工程化配置"><a href="#工程化配置" class="headerlink" title="工程化配置"></a>工程化配置</h3><h4 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h4><p>安装指令：<code>npx nuxi module add eslint</code><br>指令会自动将模块添加到 nuxt.config.ts 中<br>配置调整：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineNuxtConfig</span>(&#123;<br>  <span class="hljs-attr">modules</span>: [<span class="hljs-string">&quot;@nuxt/eslint&quot;</span>],<br>&#125;);<br></code></pre></td></tr></table></figure><p>eslint 规则的修改放到根目录的 eslint.config.mjs 中（基本上就是提交时看哪个校验规则不顺眼，就把插件规则关掉或者从错误降级为 warn）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> withNuxt <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./.nuxt/eslint.config.mjs&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">withNuxt</span>(<br>  <span class="hljs-comment">// Your custom configs here</span><br>  &#123;<br>    <span class="hljs-attr">rules</span>: &#123;<br>      <span class="hljs-string">&quot;no-empty&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,<br>      <span class="hljs-string">&quot;@typescript-eslint/no-this-alias&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,<br>      <span class="hljs-string">&quot;@typescript-eslint/no-unused-expressions&quot;</span>: <span class="hljs-string">&quot;warn&quot;</span>,<br>    &#125;,<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><h4 id="husky"><a href="#husky" class="headerlink" title="husky"></a>husky</h4><p>为保证代码格式一致、避免多人提交时因本地代码规则不同出现大量的样式变动修改，影响 review；同时有效防止错误的代码提交到远程，需要用 husky 对提交进行检查。<br>安装指令：<code>npm i husky prettier lint-staged --save-dev</code><br>prettier 是规范代码样式的模块，确保团队的代码使用统一相同的格式。lint-staged 是一个基于 Node.js 的库,它可以对 Git 仓库中的暂存区(staged)代码进行线性检测,从而确保代码质量。<br>接下来的操作包括：</p><ol><li>向 package.json 的 scripts 中添加命令：<code>&quot;lint&quot;: &quot;lint-staged&quot;,</code>同时在 package.json 添加 lint-staged 配置：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;lint-staged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;*.&#123;js,vue&#125;&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eslint --fix&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;*.&#123;css,less,html,json,vue&#125;&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;prettier --write&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这样会对提交的 js、vue 代码做 eslint 检查，对 css,less,html,json,vue 做代码样式检查 2. 运行指令<code>npx husky install</code>会在项目根目录下生成一个 .husky&#x2F; 文件夹，用于存放 Git 钩子。找到 pre-commit 文件，添加指令：npm run lint。或者在 package.json 中增加配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;husky&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;hooks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;pre-commit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lint-staged&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="项目开发"><a href="#项目开发" class="headerlink" title="项目开发"></a>项目开发</h2><h3 id="host-别名访问"><a href="#host-别名访问" class="headerlink" title="host 别名访问"></a>host 别名访问</h3><p>Nuxt 默认启动时会将开发服务器绑定到 localhost（即 127.0.0.1），这意味着它只允许来自本地主机的访问。如果需要通过其他主机名或 IP 地址访问，必须明确设置绑定的 host。需要修改 nuxt.config.ts 配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">3000</span>,<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&quot;0.0.0.0&quot;</span>,<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="环境区分"><a href="#环境区分" class="headerlink" title="环境区分"></a>环境区分</h3><p>nuxt 3 无法和 nuxt 2 一样设置 cross-env、服务端和客户端都可以从 process.env 中获取环境变量。只能在 nuxt.config.ts 设置 runtimeConfig，使用 API useRuntimeConfig 获取设置的环境变量；以前静态获取环境变量、导出请求域名的方式无法实现。<br>示例：<br>在运行项目的指令中设置形如：<code>&quot;dev:prod&quot;: &quot;cross-env CODE_ENV=prod nuxt dev&quot;</code>的指令，确定了运行环境变量 CODE_ENV<br>项目的 utils 目录下的方法会全局注册，可以在目录下增加一个方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getEnv</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> config = <span class="hljs-title function_">useRuntimeConfig</span>();<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CODE_ENV</span> = config.<span class="hljs-property">public</span>.<span class="hljs-property">CODE_ENV</span> || <span class="hljs-string">&quot;prod&quot;</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable constant_">CODE_ENV</span>;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> getEnv;<br></code></pre></td></tr></table></figure><p>在使用组合式 API 写法时可以直接用 getEnv 方法获取运行环境。选项式文件就只能用 setup 生命周期获取了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> env = <span class="hljs-title function_">getEnv</span>();<br>    <span class="hljs-keyword">return</span> &#123; env &#125;;<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="错误页面"><a href="#错误页面" class="headerlink" title="错误页面"></a>错误页面</h3><p>与 app.vue 同级增加一个 error.vue，当项目找不到目标页面、或者页面出现错误就会跳转到该文件的页面</p><h3 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h3><p>如果项目里包含有 pc 和 wap 的页面，可以在项目内部进行重定向（当然对部署域名做 ng 配置也是可以的）<br>重定向的方法是在中间件文件夹 middleware 下添加一个全局中间件 xxx.global.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineNuxtRouteMiddleware</span>(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-keyword">from</span>, to</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// skip middleware on client side entirely</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">client</span>) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">const</span> userAgent = <span class="hljs-title function_">useRequestHeaders</span>()[<span class="hljs-string">&quot;user-agent&quot;</span>] || <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">isMobile</span> = (<span class="hljs-params">ua</span>) =&gt; &#123;<br>    ua = ua.<span class="hljs-title function_">toLowerCase</span>();<br>    <span class="hljs-keyword">return</span> !!(<br>      ua.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/AppleWebKit.*Mobile.*/</span>) || <span class="hljs-regexp">/iphone|ipad|ipod|android/</span>.<span class="hljs-title function_">test</span>(ua)<br>    );<br>  &#125;;<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isMobile</span>(userAgent) &amp;&amp; to.<span class="hljs-property">path</span>.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;/pc/&quot;</span>)) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">from</span>.<span class="hljs-property">fullPath</span> === to.<span class="hljs-property">fullPath</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;/pc/&quot;</span>, <span class="hljs-string">&quot;/wap/&quot;</span>)) &#123;<br>      <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 避免重定向回来的死循环</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">navigateTo</span>(to.<span class="hljs-property">fullPath</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;/pc/&quot;</span>, <span class="hljs-string">&quot;/wap/&quot;</span>));<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isMobile</span>(userAgent) &amp;&amp; to.<span class="hljs-property">path</span>.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;/wap/&quot;</span>)) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">from</span>.<span class="hljs-property">fullPath</span> === to.<span class="hljs-property">fullPath</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;/wap/&quot;</span>, <span class="hljs-string">&quot;/pc/&quot;</span>)) &#123;<br>      <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 避免重定向回来的死循环</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">navigateTo</span>(to.<span class="hljs-property">fullPath</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;/wap/&quot;</span>, <span class="hljs-string">&quot;/pc/&quot;</span>));<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>需要注意的点是重定向的条件判断没有针对所有可能性做返回，vue router 检验逻辑会认为有隐患；因此需要对所有可能性做条件处理</p><h3 id="server-端接口书写"><a href="#server-端接口书写" class="headerlink" title="server 端接口书写"></a>server 端接口书写</h3><p>接口命名两种方式：<br>1）server&#x2F;api 文件夹下命名文件，在此文件夹下的文件都会被 nuxt 扫描并自动加载<br>2）server&#x2F;routes 下命名文件，在此文件夹下的文件接口访问路径名为&#x2F;[文件名]<br>其他书写方式不会形成对外可访问的接口</p><h4 id="接口跨域处理"><a href="#接口跨域处理" class="headerlink" title="接口跨域处理"></a>接口跨域处理</h4><p>浏览器在发送跨域请求时，会先发送一个 OPTIONS 请求（预检请求）来检查服务器是否允许跨域。所以要针对 options 请求作正确的返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;<br>  defineEventHandler,<br>  createError,<br>  readBody,<br>  setResponseHeaders,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;h3&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineEventHandler</span>(<span class="hljs-keyword">async</span> (event) =&gt; &#123;<br>  <span class="hljs-comment">// 设置 CORS 头</span><br>  <span class="hljs-title function_">setResponseHeaders</span>(event, &#123;<br>    <span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>: <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-comment">// 允许所有来源</span><br>    <span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>: <span class="hljs-string">&quot;GET, POST, PUT, DELETE, OPTIONS&quot;</span>, <span class="hljs-comment">// 允许的 HTTP 方法</span><br>    <span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>: <span class="hljs-string">&quot;Content-Type, Authorization&quot;</span>, <span class="hljs-comment">// 允许的请求头</span><br>  &#125;);<br><br>  <span class="hljs-comment">// 如果是预检请求（OPTIONS），直接返回</span><br>  <span class="hljs-keyword">if</span> (event.<span class="hljs-property">node</span>.<span class="hljs-property">req</span>.<span class="hljs-property">method</span> === <span class="hljs-string">&quot;OPTIONS&quot;</span>) &#123;<br>    event.<span class="hljs-property">node</span>.<span class="hljs-property">res</span>.<span class="hljs-property">statusCode</span> = <span class="hljs-number">204</span>; <span class="hljs-comment">// No Content</span><br>    event.<span class="hljs-property">node</span>.<span class="hljs-property">res</span>.<span class="hljs-title function_">end</span>();<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// 处理实际的 POST 请求</span><br>  <span class="hljs-keyword">const</span> body = <span class="hljs-keyword">await</span> <span class="hljs-title function_">readBody</span>(event).<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;);<br>  <span class="hljs-keyword">const</span> &#123; routeName &#125; = body;<br>  <span class="hljs-keyword">const</span> target = schemaList.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">path</span> === routeName);<br>  <span class="hljs-keyword">if</span> (target) &#123;<br>    <span class="hljs-keyword">return</span> &#123; ...target &#125;;<br>  &#125;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-title function_">createError</span>(&#123;<br>    <span class="hljs-attr">status</span>: <span class="hljs-number">400</span>,<br>    <span class="hljs-attr">statusMessage</span>: <span class="hljs-string">&quot;Bad Request&quot;</span>,<br>    <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Invalid route&quot;</span>,<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><h3 id="镜像打包"><a href="#镜像打包" class="headerlink" title="镜像打包"></a>镜像打包</h3><p>因为对 docker 镜像文件编写不熟，所以就不分阶段写了，实现还是可以比较简单的：<br>1）选择合适版本的 node 源<br>2）添加文件夹&#x2F;opt&#x2F;project、设置文件夹为工作目录<br>3）选择 npm 源（如果项目使用了私有源）执行指令 npm install 安装依赖<br>4）执行指令 npm run build:test 打包<br>5）设置必要的环境变量<br>6）暴露容器端口 3000（nuxt 默认端口）<br>7）启动服务器</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dockerFile"><span class="hljs-keyword">FROM</span> node:<span class="hljs-number">20</span>-alpine<br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> . /opt/project</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /opt/project</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm config <span class="hljs-built_in">set</span> registry  http://verdaccio.privacy.com/ &amp;&amp; npm install</span><br><span class="hljs-comment"># 不缓存安装包</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apk add --no-cache curl</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm run build:<span class="hljs-built_in">test</span></span><br><br><span class="hljs-keyword">ENV</span> NODE_ENV production<br><span class="hljs-comment"># 暴露容器端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">3000</span><br><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;node&quot;</span>,<span class="hljs-string">&quot;./.output/server/index.mjs&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>因为打包完后 nuxt 的入口文件为.output&#x2F;server&#x2F;index.mjs，直接用 node 指令运行就能看到结果。<br>之后使用容器服务、拉取打包好的镜像即可。</p><p>一般部署到这里就结束了，然而如果项目通过 ng 配置、放在一个和其他项目共用的域名下可能会有问题，因为打包后.output&#x2F;public 文件夹下存有静态文件，项目访问这些文件时会通过域名+文件夹的路径访问，可能会出现因域名 ng 配置规则无法命中导致静态资源请求 404。如果要解决这个问题，需要将 public 文件夹下的内容上传至 cdn，同时将 nuxt.config.ts 添加配置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">app: &#123;<br>    cdnURL: <span class="hljs-built_in">getPublicPath</span>(),<br>&#125;<br></code></pre></td></tr></table></figure><p>镜像打包文件增加一行上传 cdn 指令：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dockerFile"><span class="hljs-keyword">FROM</span> node:<span class="hljs-number">20</span>-alpine<br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> . /opt/project</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /opt/project</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm config <span class="hljs-built_in">set</span> registry  http://verdaccio.privacy.com/ &amp;&amp; npm install</span><br><span class="hljs-comment"># 不缓存安装包</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apk add --no-cache curl</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm run build:<span class="hljs-built_in">test</span></span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm run upload:<span class="hljs-built_in">test</span></span><br><br><span class="hljs-keyword">ENV</span> NODE_ENV production<br><span class="hljs-comment"># 暴露容器端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">3000</span><br><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;node&quot;</span>,<span class="hljs-string">&quot;./.output/server/index.mjs&quot;</span>]</span><br></code></pre></td></tr></table></figure><h3 id="日志服务"><a href="#日志服务" class="headerlink" title="日志服务"></a>日志服务</h3><p>为了偷懒不研究 pm2 的用法，使用了 nuxt3-winston-log，是官方推荐的插件。配置可参考 <a href="https://www.npmjs.com/package/nuxt3-winston-log">npm 说明</a><br>nuxt3-winston-log 会收集代码中所有的 console 打印语句，日志内容可通过登录容器服务器，在项目根目录的 logs 文件夹下查看 info 和 error 的打印情况</p><h2 id="附录：踩坑记录"><a href="#附录：踩坑记录" class="headerlink" title="附录：踩坑记录"></a>附录：踩坑记录</h2><ol><li>选项式文件有概率无法实现 ssr<br>原因不明，debug 时能看到请求在后端已经发出，但 html 文件里没有请求渲染的结果；最后只能借 ai 转成组合式了</li><li>服务端判断 iPad 有问题<br>原来的判断方法<code>UA.match(/(iPad)/) || (UA.match(/(Macintosh)/) &amp;&amp; navigator.maxTouchPoints &gt;= 1)</code>前一个判断条件太宽泛，容易命中，后一个依赖浏览器。目前没想到好办法，因此服务端渲染的页面无法适配 iPad</li><li>element-plus 样式改写不生效<br>原因：Vue 2 语法&#x2F;deep&#x2F;无法生效，element-plus 和 element-ui 在一些组件的 class 命名方式也有所改变，需要注意<br>解决方法：全局将&#x2F;deep&#x2F;替换为::v-deep，虽然这个语法也不是 Vue 3 的标准语法，但生效了，所以就这么无赖的写了</li><li>element-plus 不支持 i 标签 class 引入 icon 方式。<br>解决方法：如下代码</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;el-icon<br>      v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;isLogin &amp;&amp; userInfo&quot;</span><br>      <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;el-icon-switch-button logout-icon&quot;</span><br>      @click.<span class="hljs-property">stop</span>=<span class="hljs-string">&quot;handleLogout&quot;</span><br>   &gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ElIconSwitchButton</span>/&gt;</span></span><br>&lt;/el-icon&gt;<br></code></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="https://juejin.cn/post/7379521155285843980">Nuxt3 项目工程化、环境变量、SEO 配置</a></li><li><a href="https://juejin.cn/post/7236635191379509308?searchId=202412031133081B66D928AF3CC959C84B">超完整的 Nuxt3 踩坑实录，那真是泰裤辣！</a></li><li><a href="https://juejin.cn/post/7224435010072346683?searchId=20241215213456642157F15B260AB6947E">nuxt3 项目打包部署上线</a></li><li><a href="https://juejin.cn/post/7197214505347137592">使用 Docker 部署 Nuxt 3 的专家技术</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近因产品需求，需要搭建一个支持 ssr 渲染的项目。在搭建 Nuxt3 项目的过程中，出现了很多问题，在此集中记录一下。&lt;/p&gt;</summary>
    
    
    
    <category term="工作技巧" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Nuxt" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/Nuxt/"/>
    
    <category term="ssr" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/ssr/"/>
    
    <category term="Vue" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>electron初步调研</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/11/20/electron/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/11/20/electron/</id>
    <published>2024-11-20T09:29:59.000Z</published>
    <updated>2025-03-05T02:11:17.037Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要开发桌面端，需要研究 electron。这里只打算研究最基础的开发。</p><span id="more"></span><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>是的，electron 事实上连安装本身都是个问题。在换了几个源以后发现只能求助于万能的网络，根据网上的建议，更换了几个 npm 相关的配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com<br>npm config <span class="hljs-built_in">set</span> electron_mirror https://cdn.npmmirror.com/binaries/electron/<br>npm config <span class="hljs-built_in">set</span> electron_builder_binaries_mirror https://npmmirror.com/mirrors/electron-builder-binaries/<br></code></pre></td></tr></table></figure><p>第一个指令是更换了最新的淘宝 npm 源，说不定以后还会变。<br>然后就是执行指令<code>npm i electron -D</code>，经过漫长的等待终于成功了。</p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>目前 Electron 打包方法分为两大类：</p><ul><li>社区提供的 Electron Builder</li><li>官方提供的 Electron Packager 和 Electron Forge<br>两方都声称自己已经提供了完整的功能。不过从网上的技术博文来看，还是 Electron Builder 用的更多一些，它的配置简单，涉及的插件少，更适合新手。</li></ul><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li>安装指令<code>npm i electron-builder -D</code></li><li>在 package.json 配置安装包相关参数</li><li>在 package.json 配置打包指令<code>electron-builder -mw</code>指令可以同时打包 mac 和 windows 安装包，如果当前环境是 mac，该指令可以正确执行。但 windows 环境下打不出 mac 包</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1024.png&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;publish&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;provider&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;generic&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://xxx.upload.com/&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;directories&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;output&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;electron_dist&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;nsis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;include&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build/installer.nsh&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;oneClick&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;allowToChangeInstallationDirectory&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;createDesktopShortcut&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;createStartMenuShortcut&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;shortcutName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;test&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;win&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nsis&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;arch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;x64&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;ia32&quot;</span><br>          <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;mac&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dmg&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;arch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;x64&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;universal&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;arm64&quot;</span><br>          <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这里对常用的配置做一下记录</p><h4 id="一般配置"><a href="#一般配置" class="headerlink" title="一般配置"></a>一般配置</h4><p>直接放在 build 配置下</p><ul><li><strong>productName</strong> ：项目名 这也是生成的 exe 文件的前缀名</li><li><strong>icon</strong> ：图标路径 要求至少 512*512</li><li><strong>directories</strong> ：输出文件夹</li></ul><h4 id="windows-配置"><a href="#windows-配置" class="headerlink" title="windows 配置"></a>windows 配置</h4><p>如果要打包 windows 可安装的 exe 文件，需要做 win 配置。鉴于 windows 目前常用的安装程序为 nsis，所以设置打包格式为 nsis，兼容 32 位和 64 位系统<br>nsis 如果不做任何配置，项目会一键安装到 c 盘，没有用户操作的余地，感觉不太好，所以对配置做了如下更改</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;nsis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;include&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build/installer.nsh&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//包含的自定义nsis脚本</span><br>      <span class="hljs-attr">&quot;oneClick&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//是否一键安装</span><br>      <span class="hljs-attr">&quot;allowToChangeInstallationDirectory&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//允许修改安装目录</span><br>      <span class="hljs-attr">&quot;createDesktopShortcut&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//创建桌面图标</span><br>      <span class="hljs-attr">&quot;createStartMenuShortcut&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//创建开始菜单图标</span><br>      <span class="hljs-attr">&quot;shortcutName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;test&quot;</span><span class="hljs-comment">//图标名称</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>nsis 配置里 include 和 scripts 的区别？</p><ul><li>include：在 nsis 已有的脚本上合并作者自己的自定义安装配置修改，文件路径下的内容应该不包含 nsis 完整的流程</li><li>scripts：用脚本语言对 nsis 安装过程完全自定义</li></ul><p>目前我的实力不足，没把握对全过程进行改写，所以只改写了如下内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh">!macro preInit<br>    SetRegView 64<br>    ReadRegStr <span class="hljs-variable">$0</span> HKLM <span class="hljs-string">&quot;Software\Microsoft\Windows\CurrentVersion\Uninstall\&#123;GUID&#125;&quot;</span> <span class="hljs-string">&quot;UninstallString&quot;</span><br>    <span class="hljs-variable">$&#123;If&#125;</span> <span class="hljs-variable">$0</span> == <span class="hljs-string">&#x27;&#x27;</span><br>        WriteRegStr HKLM <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;INSTALL_REGISTRY_KEY&#125;</span>&quot;</span> InstallLocation <span class="hljs-string">&quot;C:\Program Files (x86)\myAPP-electron&quot;</span><br>    <span class="hljs-variable">$&#123;Endif&#125;</span><br>    SetRegView 32<br>    ReadRegStr <span class="hljs-variable">$0</span> HKLM <span class="hljs-string">&quot;Software\Microsoft\Windows\CurrentVersion\Uninstall\&#123;GUID&#125;&quot;</span> <span class="hljs-string">&quot;UninstallString&quot;</span><br>    <span class="hljs-variable">$&#123;If&#125;</span> <span class="hljs-variable">$0</span> == <span class="hljs-string">&#x27;&#x27;</span><br>        WriteRegStr HKLM <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;INSTALL_REGISTRY_KEY&#125;</span>&quot;</span> InstallLocation <span class="hljs-string">&quot;C:\Program Files (x86)\myAPP-electron&quot;</span><br>    <span class="hljs-variable">$&#123;Endif&#125;</span><br>!macroend<br><br>!macro customInit<br>  MessageBox MB_OK <span class="hljs-string">&quot;欢迎使用 xxx 安装程序！&quot;</span><br>!macroend<br></code></pre></td></tr></table></figure><p>只是按网上的说法，针对允许修改目录的操作对应修改注册表</p><h4 id="mac-配置"><a href="#mac-配置" class="headerlink" title="mac 配置"></a>mac 配置</h4><p>相比之下 mac 配置比较简单，常见安装包是 dmg，旧系统 universal，新系统 arm64</p><h2 id="自动更新"><a href="#自动更新" class="headerlink" title="自动更新"></a>自动更新</h2><p>自动更新的方法目前调研起来有这么几种：</p><ol><li>找台服务器，上传、版本更新、下载、执行安装都自己写，大概像<a href="https://juejin.cn/post/7428154064720412710">这篇文章</a>一样。<br>好处是不受 autoUpdater 限制，但是这个流程感觉还挺麻烦的</li><li>使用 electron 内部的 autoUpdater<br>但是看起来 windows 的安装只能使用 Squirrel.Windows，好像有点类似一键安装，所以也不支持换文件夹，感觉不友好，再加上<a href="https://segmentfault.com/a/1190000007616641?utm_source=sf-similar-article">技术太老</a></li><li>electron-updater，网上常见的解决方案</li></ol><p>但是 electron-updater 的使用方法也有多种：</p><ul><li>github release：需要是公开的，不知道能不能允许在 github 上开一个专门 release 的仓库，而且就现在 github 连接不稳的情况能不能顺利下载呢？有这些问题</li><li>http server：如果按<a href="https://juejin.cn/post/7302724955700264999?searchId=20241129105329614CF8B9472F2A1AD84D">这篇</a> 的意思只要提供的地址能找到 yml 和 exe 文件就可以下载更新了，那么放在 cdn 上应该也可以吧</li><li>私有 gitlab：看起来要写 gitlab ci 文件，嗯感觉有点麻烦</li></ul><p>如果要检查更新相关的信息打印情况，可以打开终端，执行指令<code>open ~/Library/Logs/&lt;app name&gt;/main.log</code><br>根据官方示例<a href="https://github.com/iffy/electron-updater-example/blob/master/main.js#L117C1-L119C4">https://github.com/iffy/electron-updater-example/blob/master/main.js#L117C1-L119C4</a> 应该用 checkForUpdatesAndNotify 就能实现了，但实际上只监听到了可更新资源没有任何操作。。。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>（1）<a href="https://www.cnblogs.com/bokemoqi/p/18389113">解决 Electron 安装失败问题的实用指南</a><br>（2）<a href="https://juejin.cn/post/7250085815430430781">详解 Electron 打包</a><br>（3）<a href="https://juejin.cn/post/7140962767275556901?searchId=2024112617310837464B7109099AA135BE">【Electron】electron-builder 打包基础配置介绍</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近需要开发桌面端，需要研究 electron。这里只打算研究最基础的开发。&lt;/p&gt;</summary>
    
    
    
    <category term="工作技巧" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="electron" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>npm发包流程</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/11/14/npmPackage/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/11/14/npmPackage/</id>
    <published>2024-11-14T09:51:44.000Z</published>
    <updated>2024-11-15T03:31:36.021Z</updated>
    
    <content type="html"><![CDATA[<p>总结一下自己第一次 npm 发包经历，以免忘记了。</p><span id="more"></span><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ol><li><p>新建一个文件夹，在文件夹内部使用指令 <code>npm init -y</code> 来快速生成一个带有默认值的 package.json。</p></li><li><p>使用指令安装 ts-loader、typescript、webpack、webpack-cli，其中 ts-loader 是 Webpack 的 TypeScript 加载器，在打包配置中处理以 ts 结尾的文件</p></li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li>ts 配置：在项目根目录下创建 tsconfig.json 文件，常见配置为以下内容</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;outDir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./dist&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;declaration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;declarationDir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./dist/types&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESNext&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ES5&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;moduleResolution&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Node&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;strict&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;include&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;src/**/*&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;exclude&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;node_modules&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;dist&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>webpack 配置：在项目根目录创建 webpack.config.js 文件，配置 Webpack</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; library &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;webpack&quot;</span>);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-string">&quot;@&quot;</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;../src&quot;</span>),<br>    &#125;,<br>    <span class="hljs-attr">extensions</span>: [<span class="hljs-string">&quot;.js&quot;</span>, <span class="hljs-string">&quot;.ts&quot;</span>, <span class="hljs-string">&quot;.jsx&quot;</span>, <span class="hljs-string">&quot;.tsx&quot;</span>, <span class="hljs-string">&quot;.json&quot;</span>], <span class="hljs-comment">// 添加必要的文件扩展名</span><br>  &#125;,<br>  <span class="hljs-comment">// entry: 指定入口文件</span><br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./src/index.ts&quot;</span>,<br>  <span class="hljs-comment">// 入口文件指定完成之后对文件进行打包，把文件输出到指定的位置  【指定打包文件所在的目录】</span><br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-comment">// 指定打包文件的目录     __dirname,是一个成员，用来动态获取当前文件模块所属的绝对路径</span><br>    <span class="hljs-comment">//  所以说path:path.resolve(__dirname,&quot;dist&quot;)就是在打包之后的文件夹上拼接了一个文件夹，在打包时，直接生成。</span><br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>    <span class="hljs-comment">// 打包后文件的文件名</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span>,<br>    <span class="hljs-attr">globalObject</span>: <span class="hljs-string">&quot;this&quot;</span>,<br>    <span class="hljs-attr">library</span>: <span class="hljs-string">&quot;newsSDK&quot;</span>,<br>    <span class="hljs-attr">libraryTarget</span>: <span class="hljs-string">&quot;umd&quot;</span>,<br>    <span class="hljs-attr">clean</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-comment">// 指定webpack打包时要使用的模块</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-comment">// 指定要加载的规则</span><br>    <span class="hljs-attr">rules</span>: [<br>      <span class="hljs-comment">// 用ts-loader 处理以ts结尾的文件</span><br>      &#123;<br>        <span class="hljs-comment">// test 指定的是规则生效的文件</span><br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.ts$/</span>, <span class="hljs-comment">// 表示去【匹配所有以ts结尾的文件</span><br>        <span class="hljs-comment">// ts要使用的loader</span><br>        <span class="hljs-attr">use</span>: <span class="hljs-string">&quot;ts-loader&quot;</span>,<br>        <span class="hljs-comment">// 要排除的文件</span><br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node-modules/</span>,<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>设置说明：</p><ul><li>resolve.extensions：支持解析的扩展名，如果不写 ts 实例中的入口文件路径无法识别</li><li>output.globalObject：设置为 ‘this’ 来确保在不同环境（例如 Node.js 和浏览器）下正确获取全局对象，避免直接使用 window。</li><li>output.library：指定模块作为全局变量的名称。在上面的示例中当直接在浏览器中引入时，该库会以 newsSDK 这个全局变量提供访问。</li><li>output.libraryTarget：设置 library 的暴露方式，常见选项包括：<br>‘var’：将库作为一个变量（变量名由 output.library 设置）放入全局对象上，在浏览器端使用时需要先加载该模块并引用相关变量。<br>‘window’：当库加载完成，入口起点的返回值将分配给 window 对象。<br>‘assign’：将库返回值分配给一个没使用 var 申明的变量中，如果这个变量没有在引入作用域中提前申明过，那么将会挂载在全局作用域中。<br>‘this’：将库的返回值分配给 this 对象的由 output.library 指定的属性。其中 this 的意义由用户决定。<br>‘global’：将库的返回值分配给全局对象的由 output.library 指定的属性。<br>‘commonjs’：以 CommonJS 模块定义方式导出，使这些模块可以在 Node.js 中被引用。<br>‘commonjs2’：和 commonjs 类似，但是会通过 module.exports 导出所有内容，适用于多个 CommonJS require 对同一个库进行重复调用的情况。<br>‘amd’：以 AMD 模块定义方式导出，使这些模块可以在 AMD 环境中被引用。<br>‘umd’：这是一种可以将你的库能够在所有的模块定义下都可运行的方式（并且导出的完全不是模块）。它将在 CommonJS、AMD 环境下运行，或将模块导出到全局下的变量。<br>具体在什么环境下使用可参见<a href="https://zhuanlan.zhihu.com/p/108216236">这篇文章</a></li></ul><p>除了示例中列举出来的配置，还有一些和打包相关的配置，例如：</p><ul><li>externals：指定哪些模块不需要被打包进最终的输出文件中，而是直接在外部环境中引用。这对于依赖于第三方库的项目尤其有用，通常用于避免重复打包体积较大的库，从而减少输出文件的大小。</li></ul><ol start="3"><li>devServer 配置</li></ol><p>对打包的结果进行文件引入测试时可以使用 webpack-dev-server，使用方法：<br>1）指令<code>npm install webpack-dev-server --save-dev</code>导入 webpack-dev-server 模块<br>2）在 webpack.config.js 中进行基本配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">devServer:</span> &#123;<br>    <span class="hljs-attr">static:</span> <span class="hljs-string">path.join(__dirname</span>, <span class="hljs-string">&quot;./examples&quot;</span><span class="hljs-string">)</span>,<br>    <span class="hljs-attr">compress:</span> <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">port:</span> <span class="hljs-number">9000</span>,<br>&#125;<span class="hljs-string">,</span><br></code></pre></td></tr></table></figure><p>3）指令<code>webpack serve --config webpack.config.js</code>启动服务</p><h2 id="模块编写"><a href="#模块编写" class="headerlink" title="模块编写"></a>模块编写</h2><p>需要注意的点是如果使用 export default 后，在 UMD 模式下需访问 .default 才是默认导出的内容</p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>执行 webpack 打包指令<code>webpack</code>默认按 webpack.config.js 文件配置打包，如果存在多个 webpack 配置文件，可以用指令如<code>webpack --config build/webpack.config.dev.js</code>指定打包配置。示例中没有指定打包的 mode 可以用指令<code>webpack --mode development</code>指定。</p><h2 id="发包"><a href="#发包" class="headerlink" title="发包"></a>发包</h2><p>如果还没有登录 npm 账户，可以使用以下命令登录：npm login。（注意如果是在内网发布的包 npm 源要切到内部的 npm 源）<br>然后，在项目根目录下运行以下命令发布包：npm publish。<br>后续更新包时应该注意的点有：1）用户下载的包是用的 package.json 的 main 文件路径，所以更新代码后要重新打包更新 main 路径下的文件；2）包的版本号应该同步更新；3）考虑浏览器直接引入文件的情况，可以写一个 dist 文件上传静态资源到 cdn 方法<br>综上，可以设置一个复合指令<code>npm run release:patch</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;build:dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack --mode development&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build:prod&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack --mode production&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;server&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack serve --config webpack.config.js --mode development&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;release:patch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;npm run build:prod &amp;&amp; npm version patch &amp;&amp; npm publish &amp;&amp; node publishCDN.mjs&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;总结一下自己第一次 npm 发包经历，以免忘记了。&lt;/p&gt;</summary>
    
    
    
    <category term="工作技巧" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="npm" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>AGI基础概念总结</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/09/11/agiStart/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/09/11/agiStart/</id>
    <published>2024-09-11T09:08:59.000Z</published>
    <updated>2024-11-14T08:45:28.742Z</updated>
    
    <content type="html"><![CDATA[<p>自 chatgpt 面世以来，ai 相关的产品层出不穷，如何用好 ai、让它更好的为自己服务也是一大新课题。</p><span id="more"></span><h2 id="Agent"><a href="#Agent" class="headerlink" title="Agent"></a>Agent</h2><h3 id="什么是-Agent（代理-x2F-智能体）"><a href="#什么是-Agent（代理-x2F-智能体）" class="headerlink" title="什么是 Agent（代理&#x2F;智能体）"></a>什么是 Agent（代理&#x2F;智能体）</h3><p>Agent，可以翻译为代理或者智能体。在 AGI 领域，则指的是一个通过传感器&#x2F;计算器感知其环境、做出决策并相应地响应的主体。</p><h3 id="Agent-发展史"><a href="#Agent-发展史" class="headerlink" title="Agent 发展史"></a>Agent 发展史</h3><p>简单来说 Agent 不是现在才有的概念，早期的 Agent 依赖于制定的类似 ifelse 语句进行决策，后来基于强化学习的 Agent 的代表性产品——AlphaGo 出名后，人们将精力放在深度学习以及出现后深度神经网络来训练 Agent 学习复杂的策略。</p><p>而近年来，大型语言模型（LLM）非常火热，潜力巨大。因此，一个新的研究领域已经出现，使用 LLM 作为 Agent 的核心控制器。</p><h3 id="基于-LLM-的-Agent-的架构"><a href="#基于-LLM-的-Agent-的架构" class="headerlink" title="基于 LLM 的 Agent 的架构"></a>基于 LLM 的 Agent 的架构</h3><p>大致可以拆分为大模型、规划、记忆与工具使用四个组件部分。</p><h4 id="大模型"><a href="#大模型" class="headerlink" title="大模型"></a>大模型</h4><p>LLM 是 Agent 的核心组件，基于 GPT-3、GPT-4 或类似的大型语言模型。LLM 负责处理自然语言理解（NLU）和自然语言生成（NLG），与用户进行对话，回答问题，生成文本等。</p><h4 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h4><p>LLM 具备逻辑推理能力，但对于复杂的问题难以给出正确的答案，因为用户使用的 prompt（提示语）不合适，导致大模型直接给出了关联度高的字词。一项复杂的任务往往涉及许多步骤。AI Agent 需要首先拆解这些步骤，进行多步推理。<br>当下普遍的技术模式包括思维链和思维树。</p><h4 id="记忆"><a href="#记忆" class="headerlink" title="记忆"></a>记忆</h4><p>记忆模块负责存储信息，包括过去的交互、学习到的知识，甚至是临时的任务信息。<br>在 LLM 中，记忆模块仿照了人类的记忆模式：短期记忆指 transformer 架构限制的上下文窗口内的输入信息；长期记忆类似于外部向量存储</p><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p>AI Agent 与大模型的一大区别在于能够使用外部工具拓展模型能力。LLM 本身虽然强大，但也会有局限。因此，Agent 通常会与外部工具和 API 进行集成。插件系统允许 Agent 调用各种外部服务，如数据库查询、调用 Web API，甚至是与物理设备交互（如 IoT 设备）。<br>以 openAI 的 chatgpt 为例，其训练数据只截止到了 2021 年底，对于更新一些的知识内容它无法直接做出回答。后来 openAI 发布了 FunctionCall 模式，大概就是写一份规则，让 chatgpt 知道什么时候去调用外部工具。</p><h3 id="Agent-应用"><a href="#Agent-应用" class="headerlink" title="Agent 应用"></a>Agent 应用</h3><p>目前各大企业都提供了制作 agent 的平台，比较有名的有字节的 coze、钉钉的AI助理、Dify等，主要可以分为以下几类</p><h4 id="AI-插件"><a href="#AI-插件" class="headerlink" title="AI+插件"></a>AI+插件</h4><p>特点：提供为模型写人设（即 prompt）的功能，可替换模型、添加插件、数据库，以及配置好后的对话调试</p><h4 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h4><p>特点：可以设置节点，处理一些复杂的任务：例如实现跳转和循环、根据多次输入的内容进行作答的场景；对不同类问题的回答有不同的输出格式要求的场景</p><h2 id="prompt"><a href="#prompt" class="headerlink" title="prompt"></a>prompt</h2><h3 id="什么是-prompt（提示词）？"><a href="#什么是-prompt（提示词）？" class="headerlink" title="什么是 prompt（提示词）？"></a>什么是 prompt（提示词）？</h3><p>提示词在人工智能领域是一种特定的输入，用于激发 AI 系统进行特定的思考或行为。它们可以是问题、指令或描述，旨在引导 AI 理解用户的意图并作出相应的反应。提示词的设计需要考虑到 AI 的理解和生成能力，确保它们能够激发出期望的输出</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>（1）<a href="https://juejin.cn/post/7359119142786154546">全面讲解基于大型语言模型的智能 Agent：发展历程、架构与基于 Langchain 的实现 demo</a><br>（2）<a href="https://agijuejin.feishu.cn/wiki/F1jPwKffhiXedTkp26bcFuQInQb">十种 agent 工具，多种思路</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;自 chatgpt 面世以来，ai 相关的产品层出不穷，如何用好 ai、让它更好的为自己服务也是一大新课题。&lt;/p&gt;</summary>
    
    
    
    <category term="技术学习" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="AGI" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/AGI/"/>
    
  </entry>
  
  <entry>
    <title>vite小记</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/09/02/vite/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/09/02/vite/</id>
    <published>2024-09-02T07:36:19.000Z</published>
    <updated>2024-11-14T08:45:28.853Z</updated>
    
    <content type="html"><![CDATA[<p>记录一点 vite 的小知识</p><span id="more"></span><h2 id="什么是-vite"><a href="#什么是-vite" class="headerlink" title="什么是 vite"></a>什么是 vite</h2><p>一个新型前端构建工具，构建速度快于 webpack</p><h2 id="概念区分：vite、webpack、vue-cli、create-vue"><a href="#概念区分：vite、webpack、vue-cli、create-vue" class="headerlink" title="概念区分：vite、webpack、vue-cli、create-vue"></a>概念区分：vite、webpack、vue-cli、create-vue</h2><p>vue-cli、create-vue 都属于脚手架，作用是创建项目，选择性安装需要的插件，指定统一的风格，生成示例代码。区别在于：vue-cli 用于创建 vue2 的项目，使用 webpack 创建；create-vue 是 Vue3 的专用脚手架，使用 vite 创建。</p><p>webpack 属于打包代码：代码写好之后，为了更好的使用，需要打包处理一下。配置文件的 output 就是预期处理的结果</p><p>vite 属于构建项目：建立项目的运行环境，需要手动安装插件。打包代码只是构建项目的一环</p><h2 id="vite-特点"><a href="#vite-特点" class="headerlink" title="vite 特点"></a>vite 特点</h2><ul><li>开发环境：使用 esbuild 打包代码，基于 原生 ES 模块 提供了 丰富的内建功能，如速度快到惊人的 模块热更新（HMR）</li><li>生产环境：使用 Rollup 打包代码，可预配置，最终输出用于生产环境的高度优化过的静态资源</li><li>插件生态：通过其 插件 API 和 JavaScript API 进行扩展，并提供完整的类型支持。例如支持 React、TypeScript</li></ul><h3 id="vite-快速启动原因"><a href="#vite-快速启动原因" class="headerlink" title="vite 快速启动原因"></a>vite 快速启动原因</h3><ol><li>预构建：vite 会对 package.json 中的 dependencies 部分先进行构建，然后把构建后的文件换存在 node_modules&#x2F;.vite 文件夹中，当启动项目时，直接请求该缓存内容。</li><li>esbuild：vite 利用了目前大部分浏览器都支持 es 模块化语法的特性，直接引入需要的 es 模块代码；es 模块具有动态引入的特点，实现了按需加载，因此页面的加载速度就提升了。</li><li>热更新打包：不会像webpack一样更改了单个文件就重新打包后再传给server，而是监听到模块变化后让浏览器重新请求该模块</li></ol><h3 id="vite的风险"><a href="#vite的风险" class="headerlink" title="vite的风险"></a>vite的风险</h3><ol><li>开发环境和线上环境的打包方式不一样，所以可能会出现线上版展示效果与开发版不一致的情况</li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>（1）<a href="https://juejin.cn/post/7095603836072493086?searchId=20240902144719D7C75F0E69B15A07B83B">一篇文章说清 webpack、vite、vue-cli、create-vue 的区别</a><br>（2）<a href="https://juejin.cn/post/7095603836072493086?searchId=20240902144719D7C75F0E69B15A07B83B">一篇文章说清 webpack、vite、vue-cli、create-vue 的区别</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一点 vite 的小知识&lt;/p&gt;</summary>
    
    
    
    <category term="前端技术体系" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/"/>
    
    
    <category term="前端打包工具" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/%E5%89%8D%E7%AB%AF%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Taro项目开发中的问题总结</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/08/22/taroBug/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/08/22/taroBug/</id>
    <published>2024-08-22T09:51:18.000Z</published>
    <updated>2025-02-28T09:33:19.271Z</updated>
    
    <content type="html"><![CDATA[<p>最近领导迷恋上了跨端开发，把以前的一个项目迁移成 Taro 了。中间踩了不少奇奇怪怪的坑，终于忍不住列出来吐槽了。</p><span id="more"></span><h2 id="1-样式设置为-scoped-无法生效"><a href="#1-样式设置为-scoped-无法生效" class="headerlink" title="1. 样式设置为 scoped 无法生效"></a>1. 样式设置为 scoped 无法生效</h2><p>这好像没什么解决方法，自己写 scss 的时候小心点吧</p><h2 id="2-Taro-redirectTo-url-“-x2F-pages-x2F-404-x2F-index”-小程序跳转正常，h5-端报-page-x2F-wap-x2F-error-notfound"><a href="#2-Taro-redirectTo-url-“-x2F-pages-x2F-404-x2F-index”-小程序跳转正常，h5-端报-page-x2F-wap-x2F-error-notfound" class="headerlink" title="2. Taro.redirectTo({ url: “&#x2F;pages&#x2F;404&#x2F;index” });小程序跳转正常，h5 端报 page &#x2F;wap&#x2F;error notfound"></a>2. Taro.redirectTo({ url: “&#x2F;pages&#x2F;404&#x2F;index” });小程序跳转正常，h5 端报 page &#x2F;wap&#x2F;error notfound</h2><p>原因：配置文件里配置了 customRoutes: { ‘&#x2F;pages&#x2F;404&#x2F;index’: ‘&#x2F;error’ }<br>解决方法：去除 customRoutes 配置，h5 的这个配置好像只是改了个 path 名字，并不能做为 route 使用。</p><h2 id="3-百度小程序-first-child-的样式写法失效"><a href="#3-百度小程序-first-child-的样式写法失效" class="headerlink" title="3. 百度小程序 :first-child 的样式写法失效"></a>3. 百度小程序 :first-child 的样式写法失效</h2><p>原因：编译百度小程序的时候子元素外面都套了一层 dom，所以 first-child 对不上了<br>解决方法：改用 :first-of-type 或者在 template 代码加 class 判断条件</p><h2 id="4-H5-下，button-在-active-状态下有默认的白色背景"><a href="#4-H5-下，button-在-active-状态下有默认的白色背景" class="headerlink" title="4. H5 下，button 在 active 状态下有默认的白色背景"></a>4. H5 下，button 在 active 状态下有默认的白色背景</h2><p>设置 <code>&amp;:active &#123; background: none; &#125;</code> 关掉背景色</p><h2 id="5-mixins、extends-在-onShow、onHide-周期代码无法生效"><a href="#5-mixins、extends-在-onShow、onHide-周期代码无法生效" class="headerlink" title="5. mixins、extends 在 onShow、onHide 周期代码无法生效"></a>5. mixins、extends 在 onShow、onHide 周期代码无法生效</h2><p>原因：页面已经书写了 onShow 和 onHide 的代码，Taro 的代码扩展效果只限于 Vue 的几个生命周期<br>解决方法：手动在页面 onShow 和 onHide 添加目标逻辑</p><h2 id="6-eventCenter-监听-onShow-事件在-iOS-失效"><a href="#6-eventCenter-监听-onShow-事件在-iOS-失效" class="headerlink" title="6. eventCenter 监听 onShow 事件在 iOS 失效"></a>6. eventCenter 监听 onShow 事件在 iOS 失效</h2><p>原因：官方提供的监听示例代码为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; eventCenter, getCurrentInstance &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@tarojs/taro&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>    eventCenter.<span class="hljs-title function_">on</span>(<span class="hljs-title function_">getCurrentInstance</span>().<span class="hljs-property">router</span>.<span class="hljs-property">onShow</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;onShow&quot;</span>);<br>    &#125;);<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>实际 iOS 的 router 实例里没有 onShow，就算手动构造也仍然会在 iOS 部分页面监听失效</p><h2 id="7-抖音小程序-Button-唤起客服操作不生效"><a href="#7-抖音小程序-Button-唤起客服操作不生效" class="headerlink" title="7. 抖音小程序 Button 唤起客服操作不生效"></a>7. 抖音小程序 Button 唤起客服操作不生效</h2><p>原因：button 组件缺失 im 客服涉及的属性<br>解决方法：参考<a href="https://github.com/NervJS/taro/issues/14118">这个 issue</a>，使用插件@tarojs&#x2F;plugin-inject 这个插件，并在 config 文件里添加这个配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">plugins</span>: [<br>  [<br>    <span class="hljs-string">&quot;@tarojs/plugin-inject&quot;</span>,<br>    &#123;<br>      <span class="hljs-attr">components</span>: &#123;<br>        <span class="hljs-comment">// 给button组件添加自定义事件</span><br>        <span class="hljs-title class_">Button</span>: &#123;<br>          <span class="hljs-string">&quot;data-im-id&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>          <span class="hljs-attr">dataImId</span>: <span class="hljs-string">&quot;&quot;</span>,<br>          <span class="hljs-attr">dataImType</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// im卡片类型</span><br>          <span class="hljs-string">&quot;data-im-type&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>          <span class="hljs-attr">dataGoodsId</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// 商品id</span><br>          <span class="hljs-string">&quot;data-goods-id&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>          <span class="hljs-attr">dataBizLine</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// 类型</span><br>          <span class="hljs-string">&quot;data-biz-line&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// 类型</span><br>          <span class="hljs-attr">dataOrderId</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// 订单id</span><br>          <span class="hljs-string">&quot;data-order-id&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>          <span class="hljs-attr">bindim</span>: <span class="hljs-string">&quot;&#x27;eh&#x27;&quot;</span>, <span class="hljs-comment">// 监听跳转IM的成功回调</span><br>          <span class="hljs-attr">bindIm</span>: <span class="hljs-string">&quot;&#x27;eh&#x27;&quot;</span>, <span class="hljs-comment">// 监听跳转IM的成功回调</span><br>          <span class="hljs-attr">binderror</span>: <span class="hljs-string">&quot;&#x27;eh&#x27;&quot;</span>, <span class="hljs-comment">// 监听跳转IM的失败回调</span><br>          <span class="hljs-attr">bindError</span>: <span class="hljs-string">&quot;&#x27;eh&quot;</span>, <span class="hljs-comment">// 监听跳转IM的失败回调</span><br>        &#125;,<br>      &#125;,<br>    &#125;,<br>  ],<br>];<br></code></pre></td></tr></table></figure><p>使用 Vue 组件书写时格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;button<br>  open-type=&quot;im&quot;<br>  dataImId=&quot;123456&quot;<br>  :onIm=&quot;imCallback&quot;<br>  :onError=&quot;onimError&quot;<br>&gt;<br>联系客服<br>&lt;/button&gt;<br></code></pre></td></tr></table></figure><p><strong>延伸</strong>：抖音小程序 textarea 无法监听键盘弹起，也是因为属性缺失（很神奇，input 组件对此进行了补充，但 textarea 却没有，截止目前 4.0.9 版本 <a href="https://github.com/NervJS/taro/pull/16098%EF%BC%89">https://github.com/NervJS/taro/pull/16098）</a><br>解决方法同上，如果不想改包的话：<br>在 config 文件里添加这个配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">plugins</span>: [<br>  [<br>    <span class="hljs-string">&quot;@tarojs/plugin-inject&quot;</span>,<br>    &#123;<br>      <span class="hljs-attr">components</span>: &#123;<br>        <span class="hljs-title class_">Textarea</span>: &#123;<br>          <span class="hljs-attr">bindkeyboardheightchange</span>: <span class="hljs-string">&quot;&#x27;eh&#x27;&quot;</span>,<br>          <span class="hljs-attr">bindKeyboardHeightChange</span>: <span class="hljs-string">&quot;&#x27;eh&#x27;&quot;</span>,<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>  ],<br>];<br></code></pre></td></tr></table></figure><p>组件使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;textarea<br>  type=&quot;text&quot;<br>  v-model.trim=&quot;inputValue&quot;<br>  maxlength=&quot;-1&quot;<br>  class=&quot;textarea&quot;<br>  :cursor-spacing=&quot;12&quot;<br>  placeholder=&quot;请输入消息…&quot;<br>  placeholder-style=&quot;color: rgba(255,255,255,0.8);&quot;<br>  :auto-height=&quot;true&quot;<br>  :fixed=&quot;true&quot;<br>  :adjust-position=&quot;false&quot;<br>  @focus=&quot;inputFocusHandler&quot;<br>  @blur=&quot;inputBlurHandler&quot;<br>  @keyboardheightchange=&quot;keyboardHeightHandler&quot;<br>&gt;&lt;/textarea&gt;<br></code></pre></td></tr></table></figure><h2 id="8-h5-页面跳转使用-navigateTo、redirectTo-会失败"><a href="#8-h5-页面跳转使用-navigateTo、redirectTo-会失败" class="headerlink" title="8. h5 页面跳转使用 navigateTo、redirectTo 会失败"></a>8. h5 页面跳转使用 navigateTo、redirectTo 会失败</h2><p>原因：跳转目标带参数且用 customRoute 改写过路径<br>解决方法：？？？基本没有，当时官方说后续版本修复，但实际如果使用这些 API 跳转在 wap 上的效果是创建了一个页面而不是像 spa 的跳转，也就是说如果连续点击跳转、就会创建好几个相同的页面</p><h2 id="9-配置打包环境变量后运行代码报错"><a href="#9-配置打包环境变量后运行代码报错" class="headerlink" title="9. 配置打包环境变量后运行代码报错"></a>9. 配置打包环境变量后运行代码报错</h2><p>原因：环境变量名只设置了双引号，而实际运行时 Taro 会对变量名做解析，所以需要写成如下格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">env</span>: &#123;<br>    <span class="hljs-attr">NODE_ENV</span>: <span class="hljs-string">&#x27;&quot;development&quot;&#x27;</span>, <span class="hljs-comment">// JSON.stringify(&#x27;development&#x27;)</span><br>    <span class="hljs-attr">TARO_APP_VERSION</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;process.env.TARO_ENV&#125;</span>_<span class="hljs-subst">$&#123;getTimeTag()&#125;</span>`</span>),<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>这个其实在<a href="https://docs.taro.zone/docs/next/config-detail#env">说明文档</a>里有反映出来，但这不合常规的设置居然一点解释都没有，差评。。。</p><h2 id="10-H5-的-TextArea-设置-autoHeight-为-true-时在数据清空时-TextArea-高度仍然是清空前的高度"><a href="#10-H5-的-TextArea-设置-autoHeight-为-true-时在数据清空时-TextArea-高度仍然是清空前的高度" class="headerlink" title="10. H5 的 TextArea 设置 autoHeight 为 true 时在数据清空时 TextArea 高度仍然是清空前的高度"></a>10. H5 的 TextArea 设置 autoHeight 为 true 时在数据清空时 TextArea 高度仍然是清空前的高度</h2><p>原因：原代码是在输入的时候调整高度，数据清除不触发 input 事件<br>解决方法：监听输入内容，当输入内容为空时手动设置高度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-title function_">inputValue</span>(<span class="hljs-params">_new</span>) &#123;<br>      <span class="hljs-keyword">if</span> (!_new || _new.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">isH5</span>) &#123;<br>          <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<br>            <span class="hljs-string">&#x27;.textarea .taro-textarea.auto-height&#x27;</span>,<br>          ).<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = <span class="hljs-string">&#x27;21px&#x27;</span>;<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">isH5</span>) &#123;<br>          <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<br>            <span class="hljs-string">&#x27;.textarea .taro-textarea.auto-height&#x27;</span>,<br>          ).<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = <span class="hljs-string">&#x27;auto&#x27;</span>;<br>        &#125;<br>      &#125;<br>    &#125;,<br>  &#125;,<br></code></pre></td></tr></table></figure><h2 id="11-onNetworkStatusChange-API-没生效"><a href="#11-onNetworkStatusChange-API-没生效" class="headerlink" title="11. onNetworkStatusChange API 没生效"></a>11. onNetworkStatusChange API 没生效</h2><p>原因：<br>1）其实不是 Taro 的问题，根据<a href="https://blog.51cto.com/u_16175487/6665743">这篇文章</a>，onNetworkStatusChange 方法是通过监听设备的网络状态来判断网络是否可用。在真实的移动设备上，网络状态的变化是由设备的网络模块来控制，并且设备会及时通知应用程序。但是，在自己电脑上测试时，我们通常会使用模拟器或者浏览器来模拟移动设备的环境，这就导致了一些问题，例如模拟器或者浏览器本身没有真实的网络模块，它们无法真实地模拟设备的网络状态变化。<br>2）onNetworkStatusChange 设置的位置不对，最好的是在页面的 onShow，app 的 onShow 也可以</p><h2 id="12-h5-的图片上传请求一直报-500"><a href="#12-h5-的图片上传请求一直报-500" class="headerlink" title="12. h5 的图片上传请求一直报 500"></a>12. h5 的图片上传请求一直报 500</h2><p>原因：似乎是浏览器本身的问题，图片上传的请求头部是<code>&#39;Content-Type&#39;: &#39;multipart/form-data&#39;</code>，但不能在接口中设置这个请求头（axios 例外），Content-Type 需要让浏览器自己识别添加。所以不要使用 Taro.uploadFile，而应该使用 request 函数，大概配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">request</span>(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;imgDomain&#125;</span>/image/upload`</span>,<br>  <span class="hljs-attr">header</span>: &#123;<br>    <span class="hljs-attr">authorization</span>: <span class="hljs-title class_">Taro</span>.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&quot;access_token&quot;</span>),<br>    <span class="hljs-attr">requestId</span>: <span class="hljs-title function_">getRequestId</span>(),<br>  &#125;,<br>  <span class="hljs-attr">data</span>: file,<br>  <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="13-小程序-requestTask-abort-不生效"><a href="#13-小程序-requestTask-abort-不生效" class="headerlink" title="13. 小程序 requestTask.abort()不生效"></a>13. 小程序 requestTask.abort()不生效</h2><p>原因：不明。看网上说法这个函数是在请求未发出时实现的，无法像 axios 一样直接阻止请求连接？？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近领导迷恋上了跨端开发，把以前的一个项目迁移成 Taro 了。中间踩了不少奇奇怪怪的坑，终于忍不住列出来吐槽了。&lt;/p&gt;</summary>
    
    
    
    <category term="踩坑经历" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E8%B8%A9%E5%9D%91%E7%BB%8F%E5%8E%86/"/>
    
    
    <category term="Taro" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/Taro/"/>
    
  </entry>
  
  <entry>
    <title>页面效果实现整理</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/08/13/pageStyle/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/08/13/pageStyle/</id>
    <published>2024-08-13T07:50:58.000Z</published>
    <updated>2024-11-14T08:45:28.777Z</updated>
    
    <content type="html"><![CDATA[<p>随手记一下一些页面效果实现小技巧</p><span id="more"></span><h2 id="打字机效果"><a href="#打字机效果" class="headerlink" title="打字机效果"></a>打字机效果</h2><p>单行文字的实现：主要是靠函数定时调用自身来实现每个文字的显示都存在时间间隔</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> text = <span class="hljs-string">&quot;Welcome to the Typing Effect!&quot;</span>;<br><span class="hljs-keyword">const</span> speed = <span class="hljs-number">100</span>; <span class="hljs-comment">// 打字速度（毫秒）</span><br><br><span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">typeWriter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (i &lt; text.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;typewriter&quot;</span>).<span class="hljs-property">innerHTML</span> += text.<span class="hljs-title function_">charAt</span>(i);<br>    i++;<br>    <span class="hljs-built_in">setTimeout</span>(typeWriter, speed);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 开始打字效果</span><br><span class="hljs-title function_">typeWriter</span>();<br></code></pre></td></tr></table></figure><p>标题轮播打字效果实现：实现点包括打字的定时显示和标题的循环替换，打字的定时显示可以用 for 循环加 await、用定时器控制 Promise 状态完成的时间，等待 Promise 结束后，进入下一次循环，处理下一个字符直到标题字符完成；标题的循环替换也是靠函数定时调用自身来实现，注意在调用自身之前需要考虑标题数组循环到最后一个时的边界条件、以及需要重置展示标题的变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> currentItemIndex = <span class="hljs-number">0</span>,<br>  timer = <span class="hljs-literal">null</span>,<br>  titles = [<span class="hljs-string">&quot;test1&quot;</span>, <span class="hljs-string">&quot;test2&quot;</span>],<br>  currentItem = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">showNextItem</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (currentItemIndex &gt;= titleInfo.<span class="hljs-property">length</span>) currentItemIndex = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-comment">// 在打印下一项之前重置 currentItem</span><br>  currentItem = <span class="hljs-string">&quot;&quot;</span>;<br><br>  <span class="hljs-comment">// 开始打印下一项</span><br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">typeNextItem</span>();<br><br>  currentItemIndex++;<br>  timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">showNextItem</span>();<br>  &#125;, speed);<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">typeNextItem</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> currentLine = titles[currentItemIndex];<br>  <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>闪烁问题及报错问题解决</span><br>  <span class="hljs-keyword">if</span> (currentLine?.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> charIndex = <span class="hljs-number">0</span>; charIndex &lt; currentLine.<span class="hljs-property">length</span>; charIndex++) &#123;<br>    <span class="hljs-keyword">const</span> currentChar = currentLine[charIndex];<br>    currentItem += currentChar;<br><br>    <span class="hljs-comment">// 使用 Promise 等待打字速度</span><br>    <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, typingSpeed));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="浏览器刷新或者关闭时弹的提示弹窗"><a href="#浏览器刷新或者关闭时弹的提示弹窗" class="headerlink" title="浏览器刷新或者关闭时弹的提示弹窗"></a>浏览器刷新或者关闭时弹的提示弹窗</h2><p>当用户尝试刷新、关闭或离开当前页面时，可以使用 beforeunload 事件来触发一个提示弹窗。这种弹窗通常用于警告用户他们可能会丢失未保存的数据，例如在编辑表单或文档时。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;beforeunload&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-comment">// 检查用户是否有未保存的更改或其他需要提醒的条件</span><br>  <span class="hljs-keyword">const</span> shouldWarn = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 假设条件成立</span><br><br>  <span class="hljs-keyword">if</span> (shouldWarn) &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>(); <span class="hljs-comment">// 标准的阻止行为</span><br>    e.<span class="hljs-property">returnValue</span> = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 必须设置为非空值才能触发默认对话框</span><br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="组件扫光效果"><a href="#组件扫光效果" class="headerlink" title="组件扫光效果"></a>组件扫光效果</h2><p>CSS 扫光动画的原理很简单，就是一条斜向上 45deg 的线性渐变长方形从左到右的、无限循环的位移动画。需要我们创建一个伪元素，然后通过改变伪元素的位移来实现扫光动画了。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@keyframes</span> sweep &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">visibility</span>: visible;<br>    <span class="hljs-attribute">left</span>: -<span class="hljs-number">100%</span>;<br>  &#125;<br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">visibility</span>: hidden;<br>  &#125;<br>&#125;<br><span class="hljs-selector-class">.sheen-area</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  &amp;<span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">10%</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">180%</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">70%</span>;<br>    <span class="hljs-attribute">background</span>: linear-gradient(<br>      to bottom,<br>      rgba(<span class="hljs-number">229</span>, <span class="hljs-number">172</span>, <span class="hljs-number">142</span>, <span class="hljs-number">0</span>),<br>      rgba(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.5</span>) <span class="hljs-number">50%</span>,<br>      rgba(<span class="hljs-number">229</span>, <span class="hljs-number">172</span>, <span class="hljs-number">142</span>, <span class="hljs-number">0</span>)<br>    );<br>    <span class="hljs-attribute">transform</span>: rotate(<span class="hljs-number">60deg</span>);<br>    <span class="hljs-attribute">animation</span>: sweep <span class="hljs-number">1.4s</span> ease-in infinite;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面这段代码里 sheen-area 是容器，设置 overflow: hidden;隐藏扫光超出容器的部分，伪元素作为扫光条执行从左到右的动画。也可以像<a href="https://segmentfault.com/a/1190000045122864">这篇文章</a>一样设计动画</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;随手记一下一些页面效果实现小技巧&lt;/p&gt;</summary>
    
    
    
    <category term="工作技巧" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="JavaScript" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/JavaScript/"/>
    
    <category term="CSS" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/CSS/"/>
    
    <category term="canvas" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>工具随记</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/08/01/toolInfo/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/08/01/toolInfo/</id>
    <published>2024-08-01T09:20:18.000Z</published>
    <updated>2024-11-14T08:45:28.852Z</updated>
    
    <content type="html"><![CDATA[<p>随手记一下一些工具小技巧</p><span id="more"></span><h2 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h2><p>（一）接口数据 mock<br>Chrome 117 优化了本地覆盖功能，因此可以在没有访问权限的情况下，通过 Network 面板轻松模拟远程资源的响应头和网页内容。</p><p>要覆盖网页内容，需要打开 Network 面板，右键点击一个请求，然后选择“Override content”。在 DevTools 中会自动定位到 Sources 标签下请求的文件位置，修改后保存刷新即可 mock 成功。</p><p>如果要取消覆盖内容，仍然是 Sources 标签下操作：要暂时禁用覆盖，取消选中 Enable Local Overrides 复选框；要取消全部覆盖，则点击 Enable Local Overrides 选项右侧的 Clear 图标找到修改的文件位置；若取消单个覆盖，则是将修改的文件选中后右键点击，在菜单中选中删除</p><p>（二）手机 ua 模拟</p><h2 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h2><p>（一） 将 Postman 请求转换为 cURL</p><ol><li>打开 Postman 并选择你要转换的请求。</li><li>点击右上角的“Code”按钮（有时显示为 &lt;&#x2F;&gt; 图标）。</li><li>在弹出的窗口中选择“cURL”。</li><li>复制生成的 cURL 命令，可以将其粘贴到终端或命令行中执行。</li></ol><p>（二）读取 cURL 格式的请求</p><ol><li>打开 Postman。</li><li>点击左上角的“Import”按钮。</li><li>选择“Raw text”选项。</li><li>粘贴你的 cURL 命令，然后点击“Continue”。</li><li>点击“Import”按钮，Postman 会自动解析并导入该请求</li></ol><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p>（一）定位组件代码<br>npm 安装 click-to-react-component，在 main.tsx 引入：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom/client&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.tsx&#x27;</span><br><span class="hljs-comment">// @ts-ignore</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ClickToComponent</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;click-to-react-component&#x27;</span>;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)!).<span class="hljs-title function_">render</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ClickToComponent</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>)<br></code></pre></td></tr></table></figure><p>按住 option + 单击，就会直接打开它的对应的组件的源码；按住 option + 右键单击，可以看到它的所有父级组件</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>（1）<a href="https://juejin.cn/post/7374631918111178790">React 项目里，如何快速定位你的组件源码？</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;随手记一下一些工具小技巧&lt;/p&gt;</summary>
    
    
    
    <category term="工作技巧" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Postman" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/Postman/"/>
    
  </entry>
  
  <entry>
    <title>tailwind</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/07/08/tailwind/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/07/08/tailwind/</id>
    <published>2024-07-08T02:56:43.000Z</published>
    <updated>2024-11-14T08:45:28.851Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7387611028988002314">https://juejin.cn/post/7387611028988002314</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7387611028988002314&quot;&gt;https://juejin.cn/post/7387611028988002314&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CI/CD初识</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/04/11/CICD/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/04/11/CICD/</id>
    <published>2024-04-11T13:07:01.000Z</published>
    <updated>2024-11-14T08:45:28.733Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CI-x2F-CD-简介"><a href="#CI-x2F-CD-简介" class="headerlink" title="CI&#x2F;CD 简介"></a>CI&#x2F;CD 简介</h2><p>CI 代表持续集成（Continuous Integration），在持续集成中，开发人员通常会将其代码提交到共享存储库，并且在每次提交后，会自动触发一系列的构建、测试和验证流程。</p><p>CD 代表持续交付（Continuous Delivery）和持续部署（Continuous Deployment）。持续交付是指自动化地将软件构建、测试和部署到预生产环境的过程，使得软件可以随时准备好进行发布。而持续部署更进一步，是指将软件构建、测试和部署的过程完全自动化，包括将新代码直接部署到生产环境，以便快速交付新功能和修复 bug。</p><h2 id="常见-CI-x2F-CD-工具"><a href="#常见-CI-x2F-CD-工具" class="headerlink" title="常见 CI&#x2F;CD 工具"></a>常见 CI&#x2F;CD 工具</h2><h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3><p>该软件提供了一个易于使用的 Web 界面，可以帮助开发团队快速、高效地构建、测试和交付软件。它与各种版本控制系统（如 Git、Subversion）和构建工具（如 Maven、Gradle）无缝集成，可以轻松地配置和管理项目的构建过程。</p><h3 id="gitlab"><a href="#gitlab" class="headerlink" title="gitlab"></a>gitlab</h3><h4 id="gitlab-runner-启动"><a href="#gitlab-runner-启动" class="headerlink" title="gitlab runner 启动"></a>gitlab runner 启动</h4><p>gitlab runner 是一个开源项目，用于运行流水线任务并将结果发送回 GitLab。本质就是一个服务器。</p><p>gitlab-runner 的三种类型：</p><ul><li>共享 Runner（Shared Runner），所有项目可以使用。</li><li>群组 Runner（Group Runner），特定群组里的所有项目和子群组。</li><li>特定 Runner（Specific Runner），用于独立的项目。</li></ul><h5 id="gitlab-runner-安装"><a href="#gitlab-runner-安装" class="headerlink" title="gitlab runner 安装"></a>gitlab runner 安装</h5><p>可以在任意一台 server 安装。首先添加 GitLab 官方源</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -L https:<span class="hljs-regexp">//</span>packages.gitlab.com<span class="hljs-regexp">/install/</span>repositories<span class="hljs-regexp">/runner/gi</span>tlab-ci-multi-runner/script.rpm.sh | sudo bash<br><br>sudo yum install gitlab-ci-multi-runner<br></code></pre></td></tr></table></figure><h5 id="gitlab-runner-注册"><a href="#gitlab-runner-注册" class="headerlink" title="gitlab runner 注册"></a>gitlab runner 注册</h5><p>安装完 gitlab-renner 并成功运行后，我们此时需要将 gitlab 和 gitlab-runner 之间产生关联，所以我们需要注册 runner 到 gitlab</p><p>点击 gitlab 仓库的 setting，选择 CI&#x2F;CD 的选项，runner 一栏可以看到注册 runner 需要的 url 和 token。在执行下列指令时需要把 url 和 token 的参数换成自己 gitlab 仓库的</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">gitlab-runner register \<br><span class="hljs-params">--non-interactive</span> \<br><span class="hljs-params">--executor</span> <span class="hljs-string">&quot;docker&quot;</span> \<br><span class="hljs-params">--docker-image</span> alpine<span class="hljs-function">:latest</span> \<br><span class="hljs-params">--url</span> <span class="hljs-string">&quot;http://gitlab.xxxx.com:9880/&quot;</span> \<br><span class="hljs-params">--registration-token</span> <span class="hljs-string">&quot;i-WPBnBbQtiQDYndpQkc&quot;</span> \<br><span class="hljs-params">--description</span> <span class="hljs-string">&quot;my first nine-runner&quot;</span> \<br><span class="hljs-params">--tag-list</span> <span class="hljs-string">&quot;nine-runner&quot;</span> \<br><span class="hljs-params">--run-untagged</span> \<br><span class="hljs-params">--locked=</span><span class="hljs-string">&quot;false&quot;</span><br></code></pre></td></tr></table></figure><p>成功注册的话我们就可以在 gitlab 的 runner 一栏看到它的基本信息</p><h4 id="gitlab-ci-yml"><a href="#gitlab-ci-yml" class="headerlink" title=".gitlab-ci.yml"></a>.gitlab-ci.yml</h4><p>位于项目代码仓库的根目录下的配置文件，该文件中可以指定代码扫描、构建、测试、部署等几个步骤的一系列的命令或者脚本。<br>以前端项目举例，配置文件最基础的情况也需包括以下几步</p><ul><li>npm install 安装依赖</li><li>npm run build 打包项目</li><li>将生成的 dist 文件打包目录部署</li></ul><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">stages</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">build</span><br><br><span class="hljs-attribute">build</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">stage</span><span class="hljs-punctuation">:</span> <span class="hljs-string">build</span><br>  <span class="hljs-attribute">only</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">test</span><br>  <span class="hljs-attribute">cache</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">key</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cache&quot;</span><br>    <span class="hljs-attribute">paths</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">node_modules/</span><br>  <span class="hljs-attribute">script</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">npm install</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">node publish</span><br>  <span class="hljs-attribute">tags</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">front-end</span><br></code></pre></td></tr></table></figure><p>以上面这个代码为例，这里设置了流水线的阶段只有 build，而任务名 build 就是会在该阶段执行的任务，代码会先后执行指令<code>npm install</code> 和<code>node publish</code>。<br>但实际 devops 设计中，可能不会把构建部署任务放在该文件内，一是为例防止开发人员随便乱改这个文件，二是篇幅过长看着很乱，不易于统一更新维护。</p><p>所以有些 devops 会利用模板拆分优化.gitlab-ci.yml。这时候开发代码根目录下的 .gitlab-ci.yml 文件如下：</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sml">variables:<br>  <span class="hljs-type">BUILD_TYPE</span>: <span class="hljs-type">JAVA</span><br><br><span class="hljs-keyword">include</span>:<br>  - project: <span class="hljs-symbol">&#x27;Group1</span>/gitlab-ci-template&#x27;<br>    <span class="hljs-built_in">ref</span>: <span class="hljs-symbol">&#x27;master&#x27;</span><br>    file: <span class="hljs-symbol">&#x27;src</span>/.gitlab-ci-template.yml&#x27;<br></code></pre></td></tr></table></figure><p>我们模板仓库在 Group1 这个组下的 gitlab-ci-template 目录，其中包含一个 src 目录，src 目录下包含一个 .gitlab-ci-template.yml 文件，里面就包含流水线任务配置。<br>这样就可以有效解决上述问题。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>（1）<a href="https://www.infoq.cn/article/WHt0wFMDRrBU-dtkh1Xp/">如何从零开始搭建 CI&#x2F;CD 流水线</a><br>（2）<a href="https://docs.gitlab.com/ee/ci/yaml/#includeproject">gitlab document</a><br>（3）<a href="https://zhuanlan.zhihu.com/p/453140826">Gitlab CI&#x2F;CD 浅谈模板拆分</a><br>（4）<a href="https://cloud.tencent.com/developer/article/1925580">GitLabCI 模板库的流水线优化实践</a><br>（5）<a href="https://juejin.cn/post/7137143919418015751?searchId=20240407153905A10825B44CD86F030868#heading-20">面向个人开发者应该打造的 CICD 部署系统</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CI-x2F-CD-简介&quot;&gt;&lt;a href=&quot;#CI-x2F-CD-简介&quot; class=&quot;headerlink&quot; title=&quot;CI&amp;#x2F;CD 简介&quot;&gt;&lt;/a&gt;CI&amp;#x2F;CD 简介&lt;/h2&gt;&lt;p&gt;CI 代表持续集成（Continuous Integra</summary>
      
    
    
    
    <category term="技术学习" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="CI/CD" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/CI-CD/"/>
    
    <category term="运维小知识" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/%E8%BF%90%E7%BB%B4%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>腾讯云服务基础操作记录</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/02/22/k8s/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/02/22/k8s/</id>
    <published>2024-02-22T14:47:26.000Z</published>
    <updated>2024-11-14T08:45:28.761Z</updated>
    
    <content type="html"><![CDATA[<p>最近因为项目迁移老要操作腾讯云服务，所以写个总结的文章，梳理一下涉及的知识和操作。说真的前端部署真的应该考虑这些吗？</p><span id="more"></span><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><h3 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h3><p>Kubernetes（简称 K8s）是一个开源的容器编排平台，用于自动化部署、扩展和管理容器化应用程序。<br>Kubernetes 集群的两种管理角色：Master 和 Node。</p><h4 id="集群架构"><a href="#集群架构" class="headerlink" title="集群架构"></a>集群架构</h4><p><img src="/unknown404.github.io/img/k8s/structure.jpg"></p><h5 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h5><p>集群的控制节点，每个 Kubernetes 集群需要有一个 master 节点来负责整个集群的管理和控制。包括以下结构</p><ul><li>Kubernetes API Server(kube-apiserver):提供了 HTTP Rest 接口的关键服务进程，是 Kubernetes 里所有资源的增，删，改，查等操作的唯一入口，也是集群控制的入口进程。</li><li>Kubernetes Controller Manager （kube-controller-manager）:Kubernetes 里所有资源对象的自动化控制中心，可以理解为资源对象的“大总管”</li><li>Kubernetes Schedule（kube-scheduler）:负责资源调度（Pod 调度）的进程，相当于公交公司的“调度室”。</li><li>etcd 服务：保存 Kubernetes 里所有资源对象的数据。</li></ul><h5 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h5><p>Kubernetes 集群中真正业务工作负载节点。当某个 Node 宕机后，其上的工作负载会被 Master 自动转移到其他节点上去。</p><ul><li>kubelet:负责 pod 对应的容器的创建，启停等任务。同时与 Master 节点密切协助，实现集群管理的基本功能。</li><li>kube-proxy:实现 Kubernetes service 的通信与负载均衡机制的重要组件。</li><li>Docker Engine（docker）：Docker 引擎，负责本机的容器创建和管理工作。</li></ul><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ul><li>DNS：Kubernetes 提供了内建的 DNS 服务，用于解析服务名称到 Pod IP 地址，实现服务之间的通信。</li><li>Ingress Controller：可选组件，用于管理集群的入口流量，实现 HTTP 和 HTTPS 等应用层协议的路由和负载均衡。</li><li>Dashboard：可选的 Web UI，用于管理和监控 Kubernetes 集群。</li></ul><h4 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h4><h5 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h5><p>一组紧密关联的容器集合，它们共享 IPC 和 Network namespace，是 Kubernetes 调度的基本单位。在 VMware 的世界中，调度的原子单位是虚拟机（VM）；在 Docker 的 世界中，调度的原⼦单位是容器；⽽在 Kubernetes 的世界中，调度的原子单位是 Pod。每一个 pod 都有一个特殊的被称为“根容器”的 Pause 容器对应的镜像属于 Kubernetes 平台的一部分，除了 Pause 容器，每个 Pod 还包括一个或多个紧密相关的用户业务容器。</p><p>通过与 Master 节点的交互，Pod 可以被创建、调度到适合的节点上运行；而在 Node 节点上，kubelet 负责管理 Pod 的生命周期，而 kube-proxy 则负责处理 Pod 的网络通信。</p><h5 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h5><p>Pod 控制器是 Pod 启动的一种模版，用来保证在 K8S 里启动的 Pod 应始终按照用户的预期运行（副本数、生命周期、健康状态检查等）。之前主要是 Replication Controller 与 Replica Set 来实现，1.2 版本后官方更推荐用 Deployment。</p><p>Deployment 属于无状态应用部署（不会在本地存储持久化数据 ，多个 pod 间是没有关系的）。Deployment 的作用是管理和控制 Pod 和 ReplicaSet，管控它们运行在用户期望的状态中。除 Pod 管理之外，还提供了如扩缩容管理、一键回滚、不停机更新以及版本控制及其他特性。</p><h5 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h5><p>Pod 是非常重要的，但是可能随时会出现故障并销毁。如果通过 Deployment 或者 DaemonSet 对 Pod 进行管理，出现故障的 Pod 会自动被替换。但替换后的新 Pod 会拥有完全不同的 IP 地址。</p><p>Service 就是用来解决这个问题的核心概念，它并不是我们常说的“服务”的含义，而更像是网关层，可以看作一组提供相同服务的 Pod 的对外访问接口、流量均衡器。</p><h5 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h5><p>一个 Label 是一个 key&#x3D;value 的键值对。其中 key 与 value 由用户自己定义。Label 可以附加到各个资源对象上，例如 Node，Pod，Service，RC 等，一个资源对象可以定义任意数量的 Label，同一个 Label 也可以被添加到任意数量的资源对象上去，Label 通常在资源对象定义时确定，也可以在对象创建后动态添加或者删除。</p><p>当给某个资源对象定义一个 Label，就相当于给它打了一个标签，然后可以通过“Label Selector”（标签选择器）查询和筛选拥有某些 Label 的资源对象</p><p>Label Selector 可以用于以下场景：</p><ul><li>kube-controller 进程通过资源对象 RC 上定义的 Label Selector 来筛选要监控的 Pod 副本的数量，从而实现 Pod 副本的数量始终符合预期设定的全自动控制流程。</li><li>kube-proxy 进程通过 Service 的 Label Selector 来选择对应的 Pod，自动建立起每个 Service 到对应 Pod 的请求转发路由表，从而实现 Service 的智能负载均衡机制。</li><li>通过对某些 Node 定义特定的 Label，并且在 Pod 定义文件中使用 NodeSelector 这种标签调度策略，kube-scheduler 进程可以实现‘定向调度’的特性。</li></ul><h3 id="腾讯云-TKE-容器服务"><a href="#腾讯云-TKE-容器服务" class="headerlink" title="腾讯云 TKE 容器服务"></a>腾讯云 TKE 容器服务</h3><p>腾讯云容器服务（Tencent Kubernetes Engine, TKE）基于原生 kubernetes 提供以容器为核心的、高度可扩展的高性能容器管理服务。可以帮助用户轻松地在云上部署、管理和扩展容器化应用程序（大概吧）。</p><p>目前腾讯云列出的可配置的 k8s 属性如下表格所示<br><img src="/unknown404.github.io/img/k8s/k8sObj.jpg"></p><h3 id="腾讯云容器镜像服务"><a href="#腾讯云容器镜像服务" class="headerlink" title="腾讯云容器镜像服务"></a>腾讯云容器镜像服务</h3><p>一种容器镜像云端托管服务。该服务支持 Docker 镜像和 Helm Chart 的存储与分发，以及镜像的安全扫描。它为企业级客户提供了细颗粒度的访问权限管理和网络访问控制，支持镜像的全球同步及触发器，以满足客户拓展全球业务及使用容器 CI&#x2F;CD 工作流的需求。此外，TCR 还支持具有上千节点的大规模容器集群并发拉取 GB 级大镜像，保障业务的极速部署。</p><p>通过使用容器镜像服务，客户无需自建并维护镜像托管服务，即可在云端享受安全高效的镜像托管和分发服务。同时，该服务可以与腾讯云的容器服务 TKE 结合使用，为客户提供顺畅的容器上云体验。</p><h2 id="项目部署迁移操作"><a href="#项目部署迁移操作" class="headerlink" title="项目部署迁移操作"></a>项目部署迁移操作</h2><h3 id="镜像仓库迁移"><a href="#镜像仓库迁移" class="headerlink" title="镜像仓库迁移"></a>镜像仓库迁移</h3><p>公司里每个组都是有自己的命名空间的，所以项目迁移时需要在自己小组的命名空间下新建镜像仓库<br><img src="https://qcloudimg.tencent-cloud.cn/image/document/b95228adfa9046858ad971882c800fe6.png"><br>在部署工具里更新镜像仓库地址，打包镜像</p><h3 id="容器迁移"><a href="#容器迁移" class="headerlink" title="容器迁移"></a>容器迁移</h3><p>进入容器服务页面、选择 Deployment 菜单。在自己小组所属的命名空间下创建新的 deployment。由于部署脚手架利用了 Label 特性，所以表单的 label 一栏要增加项目的 appcode<br><img src="/unknown404.github.io/img/k8s/deployment.jpg"><br>容器一栏容器名可以和 deployment 保持一致；镜像选择自己小组的命名空间下新建的镜像仓库，刚新建好的镜像仓库没有版本，需要提前打包镜像推送到仓库；cpu&#x2F;内存限制可以分环境考虑：</p><ul><li>测试环境 cpu 限制 0.25 核，内存 256</li><li>正式环境 cpu 设置 0.25-0.5，内存 256-512</li></ul><p>核心思想就是测试环境能跑就行，正式环境需要有一定的扩展性。后面实例设置也是如此。<br><img src="/unknown404.github.io/img/k8s/container.jpg"><br>实例数量：等同于 replicas，直接指定 pod 实例数量。测试环境可以手动限制为 1 个，正式环境选择自动调节，实例范围 2-5，触发自动调节策略根据实际情况可以设置多个，例如满足 cpu 使用率高于 50%、内存利用率高于 50%中的一个触发<br><img src="/unknown404.github.io/img/k8s/pod.jpg"><br>镜像访问凭证：针对镜像仓库设置的，在 pod 中指定仓库密钥，默认都配置了 qcloudregistrykey 和 tencenthubkey，如果这个 key 设置错误将导致从镜像仓库拉取私有镜像失败（一般来说之前的人已经设过了，可以看看下拉列表；不确定的时候可以删除这一栏、估计也能跑的原因是腾讯云主账号权限高吧）</p><h3 id="服务迁移"><a href="#服务迁移" class="headerlink" title="服务迁移"></a>服务迁移</h3><p><img src="/unknown404.github.io/img/k8s/service.jpg"><br>服务器访问方式中，仅在集群内访问即设置 ClusterIP 的选项，服务只会在集群内部被访问，一般正式环境使用该配置（因为正式环境代码会部署到两个集群，应该是为了防止单一集群挂掉整个网站不可访问的情况吧）；内网 LB 访问即使用 ip+port 的形式可以访问到</p><p>容器端口：项目启动时的端口，一般如果是 ssr 项目就是指令启动时的端口，如果是 nginx 项目在没大改配置的条件下是 80<br>服务端口：自己随便设的端口，最后服务在集群外可通过负载均衡域名或 IP+服务端口访问服务</p><h3 id="测试服务运行效果"><a href="#测试服务运行效果" class="headerlink" title="测试服务运行效果"></a>测试服务运行效果</h3><p>点击新建的负载，查看 pod 的运行情况，如果没有正常运行，点击 tab “修正历史”查看原因。<br>服务设置为“仅在集群内访问”时，可以通过远程登录 pod 进行测试：点击 tab“Pod 管理“，选择一个 pod 点击远程登录，进入 cmd 界面后执行<code>curl &lt;Kubernetes Service 的域名&gt;:&lt;服务端口&gt;</code>，看返回是否是打包项目的内容<br><img src="https://qcloudimg.tencent-cloud.cn/image/document/4b2622c6b32d982dd29c6b25eb847e10.png"></p><p>服务设置为“内网 LB 访问”时，可以直接在浏览器地址栏输入<code>&lt;负载均衡IP&gt;:&lt;服务端口&gt;</code>看打开的页面是否是打包项目的内容。负载均衡 IP 在点击新建的 Service 名称的“详情”tab 里可以看到</p><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><p><strong>Kubernetes Service 的域名</strong>：在 Kubernetes 中，每个 Service 都有一个唯一的域名，该域名遵循以下格式：<code>&lt;service-name&gt;.&lt;namespace&gt;.svc.cluster.local</code>。其中：</p><ul><li><service-name> 是 Service 的名称。</li><li><namespace> 是 Service 所属的命名空间（Namespace）。</li><li>svc.cluster.local 是 Kubernetes 集群中所有 Service 的域名后缀。</li></ul><p>Kubernetes Service 的域名会映射到该 Service 的 ClusterIP 地址上。当你创建一个 Service 时，Kubernetes 会为该 Service 分配一个 ClusterIP 地址，并为该 Service 自动生成一个域名，其格式为 <code>&lt;service-name&gt;.&lt;namespace&gt;.svc.cluster.local</code>。这个域名会自动解析到该 Service 的 ClusterIP 地址。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>（1）<a href="https://zhuanlan.zhihu.com/p/618249568">kubernetes 入门看这篇就够了</a><br>（2）<a href="https://blog.csdn.net/wang_dian1/article/details/132045116">【云原生】K8S 超详细概述</a><br>（3）<a href="https://cloud.tencent.com/developer/article/1412208">在 TKE 集群中新建工作负载</a><br>（4）<a href="https://cloud.tencent.com/document/product/457/45598">tke 容器服务</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近因为项目迁移老要操作腾讯云服务，所以写个总结的文章，梳理一下涉及的知识和操作。说真的前端部署真的应该考虑这些吗？&lt;/p&gt;</summary>
    
    
    
    <category term="备忘录" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
    <category term="k8s" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/k8s/"/>
    
    <category term="前端部署" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/%E5%89%8D%E7%AB%AF%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>h5使用canvas绘制海报</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/02/05/h5poster/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/02/05/h5poster/</id>
    <published>2024-02-05T09:00:26.000Z</published>
    <updated>2024-11-14T08:45:28.747Z</updated>
    
    <content type="html"><![CDATA[<p>最近开发 canvas 绘制时发现自己有点忘了绘制规则了，所以贴一下代码做个备份。</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> bg = <span class="hljs-string">&quot;xxx.png&quot;</span>;<br><span class="hljs-keyword">var</span> qrcode = <span class="hljs-string">&quot;xxxx.png&quot;</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 海报生成函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; sourceItem 「imgUrl：头图；text（array）；title；」</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; rect 海报宽高值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">*</span>&#125; base64图片</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">drawPoster</span>(<span class="hljs-params"></span><br><span class="hljs-params">  sourceItem,</span><br><span class="hljs-params">  rect = &#123; width: <span class="hljs-number">375</span>, height: <span class="hljs-number">667</span> &#125;</span><br><span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; imgUrl, text, title, type &#125; = sourceItem;<br>  <span class="hljs-keyword">const</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>  <span class="hljs-keyword">var</span> dpr = <span class="hljs-variable language_">window</span>.<span class="hljs-property">devicePixelRatio</span> || <span class="hljs-number">1</span>;<br>  canvas.<span class="hljs-property">width</span> = rect.<span class="hljs-property">width</span> * dpr;<br>  canvas.<span class="hljs-property">height</span> = rect.<span class="hljs-property">height</span> * dpr;<br>  <span class="hljs-keyword">const</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br>  ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>);<br>  <span class="hljs-comment">// 绘制背景图</span><br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">drawPic</span>(ctx, dpr, bg);<br>  <span class="hljs-comment">// 绘制ai图</span><br>  ctx.<span class="hljs-title function_">save</span>();<br>  <span class="hljs-title function_">drawArcFrame</span>(ctx, <span class="hljs-number">64</span> * dpr, <span class="hljs-number">64</span> * dpr, <span class="hljs-number">246</span> * dpr, <span class="hljs-number">376</span> * dpr, <span class="hljs-number">16</span> * dpr);<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">drawPic</span>(<br>    ctx,<br>    dpr,<br>    imgUrl,<br>    &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">64</span> * dpr, <span class="hljs-attr">y</span>: <span class="hljs-number">64</span> * dpr &#125;,<br>    &#123; <span class="hljs-attr">width</span>: <span class="hljs-number">246</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">376</span> &#125;<br>  );<br>  ctx.<span class="hljs-title function_">restore</span>();<br>  <span class="hljs-comment">// 绘制qrcode</span><br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">drawPic</span>(<br>    ctx,<br>    dpr,<br>    qrcode,<br>    &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">239</span> * dpr, <span class="hljs-attr">y</span>: <span class="hljs-number">369</span> * dpr &#125;,<br>    &#123; <span class="hljs-attr">width</span>: <span class="hljs-number">68</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">68</span> &#125;<br>  );<br>  <span class="hljs-comment">// 绘制文字</span><br>  <span class="hljs-keyword">const</span> lineHeight = <span class="hljs-number">25</span> * dpr;<br>  <span class="hljs-keyword">var</span> startY = <span class="hljs-number">467</span> * dpr + lineHeight,<br>    startX = <span class="hljs-number">0</span>;<br>  ctx.<span class="hljs-property">textAlign</span> = <span class="hljs-string">&quot;center&quot;</span>;<br>  <span class="hljs-comment">// 预处理，对每行文字进行折行逻辑处理</span><br>  <span class="hljs-keyword">let</span> lineCount = <span class="hljs-number">4</span>;<br>  <span class="hljs-keyword">let</span> row = [];<br>  ctx.<span class="hljs-property">font</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-number">17</span> * dpr&#125;</span>px PingFangSC, PingFang SC`</span>; <span class="hljs-comment">// 设置字体样式和大小</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; text.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> line = text[i];<br>    <span class="hljs-keyword">let</span> tempText = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> wordIndex = <span class="hljs-number">0</span>; wordIndex &lt; line.<span class="hljs-property">length</span>; wordIndex++) &#123;<br>      <span class="hljs-keyword">if</span> (ctx.<span class="hljs-title function_">measureText</span>(tempText).<span class="hljs-property">width</span> &lt; <span class="hljs-number">200</span> * dpr) &#123;<br>        tempText += line[wordIndex];<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        wordIndex--;<br>        row.<span class="hljs-title function_">push</span>(tempText);<br>        tempText = <span class="hljs-string">&quot;&quot;</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (tempText) row.<span class="hljs-title function_">push</span>(tempText);<br>  &#125;<br>  <span class="hljs-keyword">let</span> totalLineCount = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(row.<span class="hljs-property">length</span>, lineCount);<br>  <span class="hljs-keyword">if</span> (title) &#123;<br>    startX = canvas.<span class="hljs-property">width</span> / <span class="hljs-number">2</span>;<br>    totalLineCount++;<br>    startY = <span class="hljs-number">539</span> * dpr - (lineHeight * totalLineCount) / <span class="hljs-number">2</span> + lineHeight / <span class="hljs-number">2</span>;<br>    <span class="hljs-title function_">drawText</span>(<br>      ctx,<br>      dpr,<br>      title,<br>      &#123; <span class="hljs-attr">x</span>: startX, <span class="hljs-attr">y</span>: startY &#125;,<br>      <span class="hljs-number">17</span>,<br>      <span class="hljs-string">&quot;normal&quot;</span>,<br>      <span class="hljs-string">&quot;#AD2700&quot;</span><br>    );<br>    startY += lineHeight;<br>    totalLineCount--;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    startY = <span class="hljs-number">539</span> * dpr - (lineHeight * totalLineCount) / <span class="hljs-number">2</span> + lineHeight / <span class="hljs-number">2</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(row.<span class="hljs-property">length</span>, lineCount); i++) &#123;<br>    startX = canvas.<span class="hljs-property">width</span> / <span class="hljs-number">2</span>;<br>    <span class="hljs-title function_">drawText</span>(ctx, dpr, row[i], &#123; <span class="hljs-attr">x</span>: startX, <span class="hljs-attr">y</span>: startY &#125;, <span class="hljs-number">17</span>, <span class="hljs-string">&quot;bold&quot;</span>, <span class="hljs-string">&quot;#AD2700&quot;</span>);<br>    startY += lineHeight;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> imageURL = canvas.<span class="hljs-title function_">toDataURL</span>(<span class="hljs-string">&quot;image/png&quot;</span>); <span class="hljs-comment">// 将Canvas转换为PNG格式的图片URL</span><br>  <span class="hljs-keyword">return</span> imageURL;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">drawText</span>(<span class="hljs-params"></span><br><span class="hljs-params">  ctx,</span><br><span class="hljs-params">  dpr = <span class="hljs-number">2</span>,</span><br><span class="hljs-params">  text,</span><br><span class="hljs-params">  position = &#123; x: <span class="hljs-number">0</span>, y: <span class="hljs-number">0</span> &#125;,</span><br><span class="hljs-params">  fontSize = <span class="hljs-number">30</span>,</span><br><span class="hljs-params">  fontWeight = <span class="hljs-string">&quot;normal&quot;</span>,</span><br><span class="hljs-params">  color = <span class="hljs-string">&quot;red&quot;</span></span><br><span class="hljs-params"></span>) &#123;<br>  ctx.<span class="hljs-property">fillStyle</span> = color;<br>  ctx.<span class="hljs-property">font</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;fontWeight&#125;</span> <span class="hljs-subst">$&#123;fontSize * dpr&#125;</span>px PingFangSC, PingFang SC`</span>; <span class="hljs-comment">// 设置字体样式和大小</span><br>  ctx.<span class="hljs-title function_">fillText</span>(text, position.<span class="hljs-property">x</span>, position.<span class="hljs-property">y</span>); <span class="hljs-comment">// 设置文字位置和内容</span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">drawPic</span>(<span class="hljs-params"></span><br><span class="hljs-params">  ctx,</span><br><span class="hljs-params">  dpr = <span class="hljs-number">2</span>,</span><br><span class="hljs-params">  imgUrl,</span><br><span class="hljs-params">  position = &#123; x: <span class="hljs-number">0</span>, y: <span class="hljs-number">0</span> &#125;,</span><br><span class="hljs-params">  rect = &#123; width: <span class="hljs-number">375</span>, height: <span class="hljs-number">667</span> &#125;</span><br><span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> image = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();<br>    image.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;crossOrigin&quot;</span>, <span class="hljs-string">&quot;anonymous&quot;</span>);<br>    image.<span class="hljs-property">src</span> = imgUrl;<br>    image.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      ctx.<span class="hljs-title function_">drawImage</span>(<br>        image,<br>        position.<span class="hljs-property">x</span>,<br>        position.<span class="hljs-property">y</span>,<br>        rect.<span class="hljs-property">width</span> * dpr,<br>        rect.<span class="hljs-property">height</span> * dpr<br>      );<br>      <span class="hljs-title function_">resolve</span>();<br>    &#125;;<br>  &#125;);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">drawArcFrame</span>(<span class="hljs-params">ctx, x, y, w, h, r</span>) &#123;<br>  ctx.<span class="hljs-title function_">beginPath</span>();<br>  <span class="hljs-comment">// 因为边缘描边存在锯齿，最好指定使用 transparent 填充</span><br>  ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;transparent&quot;</span>;<br>  <span class="hljs-comment">// 左上角</span><br>  ctx.<span class="hljs-title function_">arc</span>(x + r, y + r, r, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">1.5</span>);<br><br>  <span class="hljs-comment">// border-top</span><br>  ctx.<span class="hljs-title function_">moveTo</span>(x + r, y);<br>  ctx.<span class="hljs-title function_">lineTo</span>(x + w - r, y);<br>  ctx.<span class="hljs-title function_">lineTo</span>(x + w, y + r);<br>  <span class="hljs-comment">// 右上角</span><br>  ctx.<span class="hljs-title function_">arc</span>(x + w - r, y + r, r, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">1.5</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>);<br><br>  <span class="hljs-comment">// border-right</span><br>  ctx.<span class="hljs-title function_">lineTo</span>(x + w, y + h - r);<br>  ctx.<span class="hljs-title function_">lineTo</span>(x + w - r, y + h);<br>  <span class="hljs-comment">// 右下角</span><br>  ctx.<span class="hljs-title function_">arc</span>(x + w - r, y + h - r, r, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">0.5</span>);<br><br>  <span class="hljs-comment">// border-bottom</span><br>  ctx.<span class="hljs-title function_">lineTo</span>(x + r, y + h);<br>  ctx.<span class="hljs-title function_">lineTo</span>(x, y + h - r);<br>  <span class="hljs-comment">// 左下角</span><br>  ctx.<span class="hljs-title function_">arc</span>(x + r, y + h - r, r, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">0.5</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>);<br><br>  <span class="hljs-comment">// border-left</span><br>  ctx.<span class="hljs-title function_">lineTo</span>(x, y + r);<br>  ctx.<span class="hljs-title function_">lineTo</span>(x + r, y);<br><br>  <span class="hljs-comment">// 这里是使用 fill 还是 stroke都可以，二选一即可，但是需要与上面对应</span><br>  ctx.<span class="hljs-title function_">fill</span>();<br>  <span class="hljs-comment">// ctx.stroke()</span><br>  ctx.<span class="hljs-title function_">closePath</span>();<br>  <span class="hljs-comment">// 剪切</span><br>  ctx.<span class="hljs-title function_">clip</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>注意点：</p><ul><li>绘制图片属于异步操作，只能等图片加载完才能绘制，如果存在显示于图片之上的文字，必须要让文字的绘制在图片回调函数执行之后发生，不能同步执行</li><li>绘制圆角时，需使用函数 ctx.save()保存之前的绘制内容；圆角的实现本质是对画板进行了剪切、再填充绘制内容实现的，绘制完成后用 ctx.restore()将画板剩余部分恢复</li><li>文字绘制时起始坐标默认是文字的左下而不是左上</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近开发 canvas 绘制时发现自己有点忘了绘制规则了，所以贴一下代码做个备份。&lt;/p&gt;</summary>
    
    
    
    <category term="备忘录" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
    <category term="canvas" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>babel初识</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/02/04/babel/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/02/04/babel/</id>
    <published>2024-02-04T03:11:17.000Z</published>
    <updated>2024-11-14T08:45:28.743Z</updated>
    
    <content type="html"><![CDATA[<p>了解一下 babel 相关配置</p><span id="more"></span><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>babel 最初是用于 es6 转 es5，确保各端浏览器能支持代码逻辑的运行。但现在 babel 作为转译器，还可以实现其他的功能</p><h2 id="babel-作用"><a href="#babel-作用" class="headerlink" title="babel 作用"></a>babel 作用</h2><h3 id="转译-es、typescript、flow-等到目标环境支持的-js"><a href="#转译-es、typescript、flow-等到目标环境支持的-js" class="headerlink" title="转译 es、typescript、flow 等到目标环境支持的 js"></a>转译 es、typescript、flow 等到目标环境支持的 js</h3><p>这个是最常用的功能，用来把代码中的 es 的新的语法、typescript 和 flow 的语法转成基于目标环境支持的语法的实现。并且还可以把目标环境不支持的 api 进行 polyfill。</p><p>babel7 提供了 @babel&#x2F;preset-env 的包，可以指定目标 env 来按需转换，转换更加的精准，产物更小。</p><h3 id="一些特定用途的转换"><a href="#一些特定用途的转换" class="headerlink" title="一些特定用途的转换"></a>一些特定用途的转换</h3><p>比如函数插桩（函数中自动插入一些代码，例如埋点代码）、自动国际化等。</p><h3 id="代码的静态分析"><a href="#代码的静态分析" class="headerlink" title="代码的静态分析"></a>代码的静态分析</h3><p>对代码进行 parse 之后，会生成 AST，通过 AST 能够理解代码结构，除了转换 AST 再打印成目标代码之外，也同样可以用于分析代码的信息，进行一些静态检查。例如：</p><ul><li>linter 工具就是分析 AST 的结构，对代码规范进行检查。</li><li>api 文档自动生成工具，可以提取源码中的注释，然后生成文档。</li><li>…</li></ul><h2 id="babel-配置的方式"><a href="#babel-配置的方式" class="headerlink" title="babel 配置的方式"></a>babel 配置的方式</h2><ul><li>babel.config.json：在项目的根目录（package.json 文件所在的目录）下</li><li>.babelrc.json：在项目的根目录（package.json 文件所在的目录）下</li><li>@babel&#x2F;cli</li></ul><p>三种配置方式的权重排序（由小到大） babel.config.json &lt; .babelrc &lt; programmatic options from @babel&#x2F;cli</p><h2 id="常用-babel-配置"><a href="#常用-babel-配置" class="headerlink" title="常用 babel 配置"></a>常用 babel 配置</h2><p>babel 中插件可配置两个属性——presets 和 plugins，应用顺序是：先 plugin 再 preset，plugin 从左到右，preset 从右到左。</p><h3 id="presets"><a href="#presets" class="headerlink" title="presets"></a>presets</h3><p>一般情况下一个插件用来解决一个语法转译问题，例如@babel&#x2F;plugin-transform-arrow-functions 可以用于箭头函数转为一般函数，@babel&#x2F;plugin-transform-destructuring 则用于将 es6 的解构语法进行转译。而 presets 可以理解为官方预置的 es 的新的语法、typescript 和 flow 的语法转译为目标环境支持语法的插件的集合，省去了我们一个个引入插件的麻烦。<br>babel 官方目前提供的预设包括：</p><ul><li>@babel&#x2F;preset-env (转译 es 6+语法)</li><li>@babel&#x2F;preset-typescript （转译 ts 语法）</li><li>@babel&#x2F;preset-react （转译 react 语法）</li><li>@babel&#x2F;preset-flow （转译 flow 语法）</li></ul><h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h3><p>常用的插件有：</p><h4 id="babel-x2F-plugin-transform-runtime"><a href="#babel-x2F-plugin-transform-runtime" class="headerlink" title="@babel&#x2F;plugin-transform-runtime"></a>@babel&#x2F;plugin-transform-runtime</h4><p>转译 class 语法时 babel 注入了一些辅助函数的声明，以便语法转换后使用。但如果多个文件都使用了 class 语法，转译时这些辅助函数都会在转换文件里定义，尽管函数功能是相同的<br>plugin-transform-runtime 则是可以将 helper 和 polyfill 都改为从一个统一的地方引入，并且引入的对象和全局变量是完全隔离的</p><h4 id="babel-x2F-plugin-proposal-decorators"><a href="#babel-x2F-plugin-proposal-decorators" class="headerlink" title="@babel&#x2F;plugin-proposal-decorators"></a>@babel&#x2F;plugin-proposal-decorators</h4><p>转译 js 装饰器语法</p><h4 id="babel-plugin-import"><a href="#babel-plugin-import" class="headerlink" title="babel-plugin-import"></a>babel-plugin-import</h4><p>模块化导入插件，可以实现按需引入依赖包模块<br>使用示例：<br>使用指令<code>npm install babel-plugin-import --save-dev</code>安装该依赖后对 babel 配置文件进行如下配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">&#123;<br>  plugins: [<br>    [<span class="hljs-string">&quot;import&quot;</span>, &#123;<br>      <span class="hljs-string">&quot;libraryName&quot;</span>: <span class="hljs-string">&quot;antd&quot;</span>, <span class="hljs-regexp">//</span> 指定导入包的名称<br>      <span class="hljs-string">&quot;libraryDirectory&quot;</span>: <span class="hljs-string">&quot;lib&quot;</span>, <span class="hljs-regexp">//</span> 指定模块的存放目录<br>      style: <span class="hljs-string">&quot;css&quot;</span>, <span class="hljs-regexp">//</span> 导入 css 样式<br>    &#125;]<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>不过理论上新版的 antd 和 material-ui 中，默认已支持基于 ES modules 的 tree shaking 功能；而打包工具如：Webpack、Rollup 等在打包层面也支持了 <a href="https://juejin.cn/post/7298966922329554995?searchId=20240206112751FE48D0DEEA2D4405759C">tree shaking</a>，使得我们不需要额外配置 babel-plugin-import 也能实现按需引入</p><h2 id="babel-编译流程"><a href="#babel-编译流程" class="headerlink" title="babel 编译流程"></a>babel 编译流程</h2><p>整体编译流程主要分为三步：</p><ul><li>parse：通过 parser 把源码转成抽象语法树（AST）</li><li>transform：遍历 AST，调用各种 transform 插件对 AST 进行增删改</li><li>generate：把转换后的 AST 打印成目标代码，并生成 sourcemap</li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>（1）<a href="https://juejin.cn/post/7049160361173319693?from=search-suggest">一文轻松掌握 babel</a><br>（2）<a href="https://zhuanlan.zhihu.com/p/394783228?utm_id=0">Babel 教程 11：@babel&#x2F;plugin-transform-runtime</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;了解一下 babel 相关配置&lt;/p&gt;</summary>
    
    
    
    <category term="技术学习" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="babel" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/babel/"/>
    
    <category term="前端编译" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>stylex</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/01/25/stylex/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/01/25/stylex/</id>
    <published>2024-01-25T06:40:51.000Z</published>
    <updated>2024-11-14T08:45:28.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>近日，Meta 开源了一款「CSS-in-JS 库」 —— StyleX。这个项目从提出到 Meta 内部使用到最终开源经历了大约 5 年的时间，据说这套解决方案让 facebook 首页样式文件体积减少了至少 80%。</p><h2 id="常见-css-方案"><a href="#常见-css-方案" class="headerlink" title="常见 css 方案"></a>常见 css 方案</h2><h3 id="BEM"><a href="#BEM" class="headerlink" title="BEM"></a>BEM</h3><p>BEM 是一种用于编写 CSS 类名的命名约定，它基于块（block）、元素（element）和修饰符（modifier）的概念。使用 BEM 命名约定，可以更清晰地表达 CSS 类之间的关系，并使代码更易于维护和扩展。<br>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card__header&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 块内的元素 --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card__body&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 块内的元素 --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card__footer card__footer--highlighted&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 块内的元素，并带有修饰符 --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在这个例子中，card 是一个块，它包含了 header、body 和 footer 这些元素。footer 元素还带有一个修饰符 highlighted，表示这个底部元素有一些突出显示的样式。</p><h3 id="CSS-Modules"><a href="#CSS-Modules" class="headerlink" title="CSS Modules"></a>CSS Modules</h3><p>CSS Modules 是一种将 CSS 文件与 JavaScript 模块分离的技术。通过使用 CSS Modules，可以将 CSS 类名限制在模块内部，从而避免全局命名冲突的问题。</p><p>示例：<br>在 webpack 中进行如下配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// 其他配置项</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>将 css 文件引入 js，样式表中的类名将被映射为一个对象，可以通过该对象访问局部化的类名，再在 jsx 或 html 中使用该类名。编译时会自动生成一个唯一的类名，避免全局命名冲突。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;<br>  <span class="hljs-attribute">overflow</span>: scroll;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#f5f7fa</span>;<br>  <span class="hljs-selector-class">.nav</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./styles.less&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NavBar</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;antd-mobile&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MyTask</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">FC</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.container&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">NavBar</span> <span class="hljs-attr">onBack</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;&#125;&#125; className=&#123;styles.nav&#125;&gt;</span><br><span class="language-xml">        我的任务</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">NavBar</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="原子-css"><a href="#原子-css" class="headerlink" title="原子 css"></a>原子 css</h3><p>原子 CSS 是一种将 CSS 属性分解为最基本的元素的技术。通过使用原子 CSS，可以将复杂的样式表分解为更小的、可重用和可维护的模块。目前这方面的实现有<a href="https://tailwindcss.com/">Tailwind CSS</a>、<a href="https://windicss.org/">Windi CSS</a>等<br>以 Tailwind CSS 为例，它提供了一组预定义的类名，每个类名都代表一个特定的样式属性。通过使用这些类名，可以轻松地创建具有不同样式和布局的组件。<br>示例：在 css 文件引入预设置的文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@tailwind</span> base;<br><span class="hljs-keyword">@tailwind</span> components;<br><span class="hljs-keyword">@tailwind</span> utilities;<br></code></pre></td></tr></table></figure><p>使用预设样式<br><img src="/unknown404.github.io/img/stylex/tailwind.jpg"></p><p>样式解释：</p><ul><li>max-w-7xl: 这个类设置了元素的宽度最大为 7XL 尺寸，其中 7XL 是 Tailwind CSS 的尺寸单位之一。7XL 通常对应于屏幕尺寸的非常大的屏幕。</li><li>mx-auto: 这个类设置元素的左右边距自动，使元素在水平方向上居中。</li><li>text-center: 这个类将文本内容居中对齐。</li><li>py-12: 这个类设置元素的上边距和下边距为 12 个尺寸单位。在 Tailwind CSS 中，py 是“padding-y”的缩写，表示元素的垂直内边距。</li><li>px-4: 这个类设置元素的左外边距和右外边距为 4 个尺寸单位。px 是“padding-x”的缩写，表示元素的水平内边距。</li><li>sm:px-6: 这个类是一个断点特定的类，它只在屏幕尺寸小于或等于小型设备时生效。在这种情况下，它将元素的水平内边距设置为 6 个尺寸单位。</li><li>lg:py-16: 这个类是一个断点特定的类，它只在屏幕尺寸大于或等于大型设备时生效。在这种情况下，它将元素的上边距和下边距设置为 16 个尺寸单位。</li><li>lg:px-8: 这个类也是一个断点特定的类，它只在屏幕尺寸大于或等于大型设备时生效。在这种情况下，它将元素的左外边距和右外边距设置为 8 个尺寸单位。</li></ul><h3 id="CSS-in-JS"><a href="#CSS-in-JS" class="headerlink" title="CSS-in-JS"></a>CSS-in-JS</h3><p>CSS 中的 JavaScript 是一种将 JavaScript 代码嵌入到 CSS 中的方式。通过这种方式，可以在 CSS 中使用 JavaScript 变量、函数和逻辑，以实现更灵活和动态的样式和布局。目前这方面实现的库有<a href="https://styled-components.com/docs/basics">style components</a>、<a href="https://emotion.sh/">Emotion</a>等</p><p>stylex 也属于 CSS-in-JS 库</p><h2 id="stylex-的基本用法"><a href="#stylex-的基本用法" class="headerlink" title="stylex 的基本用法"></a>stylex 的基本用法</h2><p>StyleX 的 API 很少，主要涉及两个常用方法：</p><ul><li>stylex.create，创建样式<br>代码示例如下，使用 stylex.create 函数创建了 4 个命名空间：header，logo，link，txtcenter</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> stylex <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@stylexjs/stylex&quot;</span>;<br><br><span class="hljs-keyword">const</span> styles = stylex.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">header</span>: &#123;<br>    <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&quot;#282c34&quot;</span>,<br>    <span class="hljs-attr">minHeight</span>: <span class="hljs-string">&quot;100vh&quot;</span>,<br>    <span class="hljs-attr">display</span>: <span class="hljs-string">&quot;flex&quot;</span>,<br>    <span class="hljs-attr">flexDirection</span>: <span class="hljs-string">&quot;column&quot;</span>,<br>    <span class="hljs-attr">alignItems</span>: <span class="hljs-string">&quot;center&quot;</span>,<br>    <span class="hljs-attr">justifyContent</span>: <span class="hljs-string">&quot;center&quot;</span>,<br>    <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&quot;calc(10px + 2vmin)&quot;</span>,<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;white&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">logo</span>: &#123;<br>    <span class="hljs-attr">height</span>: <span class="hljs-string">&quot;40vmin&quot;</span>,<br>    <span class="hljs-attr">pointerEvents</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">link</span>: &#123;<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#61dafb&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">txtcenter</span>: &#123;<br>    <span class="hljs-attr">textAlign</span>: <span class="hljs-string">&quot;center&quot;</span>,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>stylex.props，定义 html 的 props，将 stylex.create 定义的样式应用到 html 上（如果定义的是静态样式，dom 上增加的属性为 class；如果定义的是动态样式，dom 上增加的属性为 style）<br>代码示例如下：</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> &#123;<span class="hljs-attr">...stylex.props</span>(<span class="hljs-attr">styles.txtcenter</span>)&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">header</span> &#123;<span class="hljs-attr">...stylex.props</span>(<span class="hljs-attr">styles.header</span>)&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;logo&#125;</span> &#123;<span class="hljs-attr">...stylex.props</span>(<span class="hljs-attr">styles.logo</span>)&#125; <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;logo&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          Edit <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>src/App.js<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> and save to reload.</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span></span></span><br><span class="hljs-tag"><span class="language-xml">          &#123;<span class="hljs-attr">...stylex.props</span>(<span class="hljs-attr">styles.link</span>)&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://reactjs.org&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;noopener noreferrer&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &gt;</span></span><br><span class="language-xml">          Learn React</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>编译后运行的结果如图所示</p><p><img src="/unknown404.github.io/img/stylex/stylex.jpg"><br>可以看到命名空间的样式被拆成了多个类名</p><h2 id="stylex-优势"><a href="#stylex-优势" class="headerlink" title="stylex 优势"></a>stylex 优势</h2><h3 id="文件可扩展"><a href="#文件可扩展" class="headerlink" title="文件可扩展"></a>文件可扩展</h3><p>stylex 减少不必要的 CSS 规则和类名，从而减少最终输出的 CSS 文件大小；即使组件增加，css 大小也不会增加太多</p><p>假设样式设置为：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> logo <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./logo.svg&quot;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> stylex <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@stylexjs/stylex&quot;</span>;<br><br><span class="hljs-keyword">const</span> styles = stylex.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">link</span>: &#123;<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#61dafb&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">txt</span>: &#123;<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#61dafb&quot;</span>,<br>  &#125;,<br>&#125;);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;logo&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;logo&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> &#123;<span class="hljs-attr">...stylex.props</span>(<span class="hljs-attr">styles.txt</span>)&#125;&gt;</span></span><br><span class="language-xml">          Edit <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>src/App.js<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> and save to reload.</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span></span></span><br><span class="hljs-tag"><span class="language-xml">          &#123;<span class="hljs-attr">...stylex.props</span>(<span class="hljs-attr">styles.link</span>)&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://reactjs.org&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;noopener noreferrer&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &gt;</span></span><br><span class="language-xml">          Learn React</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p><img src="/unknown404.github.io/img/stylex/scaleable.jpg"></p><p>从编译结果可以看到即使命名空间不同，只要样式一致都会赋给相同的类名。这种原子类名的控制粒度确保了即使项目体积增大，样式表的体积也能控制在合理的范围内。</p><h3 id="样式效果可预测"><a href="#样式效果可预测" class="headerlink" title="样式效果可预测"></a>样式效果可预测</h3><p>没有特定的样式优先级问题，最后应用的样式将覆盖先前的样式。这使得样式的应用更加简单和一致。</p><p>假设存在如下 css 文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.blue</span> &#123;<br>  <span class="hljs-attribute">color</span>: blue;<br>&#125;<br><span class="hljs-selector-class">.red</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>以及如下 html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red blue&quot;</span>&gt;</span>我是什么颜色？<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最终显示的 p 标签是什么颜色的呢？实际上，样式取决于他们在样式表中定义的顺序，.red 的定义在.blue 后面，所以 p 应该是红色的。而如果 blue 和 red 分别在两个 css 文件里，则 p 标签的颜色取决于样式文件的加载顺序。</p><p>而在 stylex 中样式的优先级只需要考虑 styles.props 中的调用顺序，以最后一个为准。例如在下面的代码中 blue 在 red 后面，所以颜色为 blue</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> stylex <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;stylex&quot;</span>;<br><br><span class="hljs-comment">// 创建样式</span><br><span class="hljs-keyword">const</span> styles = stylex.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">red</span>: &#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;red&quot;</span> &#125;,<br>  <span class="hljs-attr">blue</span>: &#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;blue&quot;</span> &#125;,<br>&#125;);<br><br><span class="hljs-comment">// 使用</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> &#123;<span class="hljs-attr">...styles.props</span>(<span class="hljs-attr">styles.red</span>, <span class="hljs-attr">styles.blue</span>)&#125;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>;<br></code></pre></td></tr></table></figure><h3 id="样式的类型安全"><a href="#样式的类型安全" class="headerlink" title="样式的类型安全"></a>样式的类型安全</h3><p>可以与 typescript 结合、定义类型声明限制自定义组件的样式传参。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123;<span class="hljs-title class_">StyleXStyles</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@stylexjs/stylex&#x27;</span>;<br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Props</span> = &#123;<br>  <span class="hljs-comment">// ...</span><br>  style?: <span class="hljs-title class_">StyleXStyles</span>&lt;&#123;<br>    color?: <span class="hljs-built_in">string</span>;<br>    backgroundColor?: <span class="hljs-built_in">string</span>;<br>    borderColor?: <span class="hljs-built_in">string</span>;<br>    borderTopColor?: <span class="hljs-built_in">string</span>;<br>    borderEndColor?: <span class="hljs-built_in">string</span>;<br>    borderBottomColor?: <span class="hljs-built_in">string</span>;<br>    borderStartColor?: <span class="hljs-built_in">string</span>;<br>  &#125;&gt;;<br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComponent</span>(<span class="hljs-params">&#123;style, ...&#125;: Props</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &#123;<span class="hljs-attr">...stylex.props</span>(<span class="hljs-attr">localStyles.foo</span>, <span class="hljs-attr">localStyles.bar</span>, <span class="hljs-attr">style</span>)&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      &#123;/* ... */&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>例如在这段代码中限制了组件 MyComponent 的 style props 只能接受如下 stylex 样式</p><h2 id="stylex-缺点"><a href="#stylex-缺点" class="headerlink" title="stylex 缺点"></a>stylex 缺点</h2><ul><li>并不提供完整的 css 选择器功能，为了使应用可预测，一些伪类选择器可能并不支持，比如 .className &gt; _、.className ~ _、.className:hover &gt; div:first-child 等</li></ul><h2 id="stylex-适用范围"><a href="#stylex-适用范围" class="headerlink" title="stylex 适用范围"></a>stylex 适用范围</h2><ul><li>用 js 控制 ui 的框架项目如 react，angular 等，vue、svelte 使用的话需要额外的自定义配置</li><li>庞大且体积不断增加的项目</li><li>可复用组件项目</li></ul><h2 id="后续碎碎念"><a href="#后续碎碎念" class="headerlink" title="后续碎碎念"></a>后续碎碎念</h2><p>因为 stylex 提供的 demo 都太简陋了，所以自己尝试用 create-react-app 搭建了一个项目测试它的使用，结果发现居然没有修改打包配置的方法，要想实现还要安装 craco 脚手架，真是麻烦。。。node 版本还必须 16 以上才能运行正常，这个怎么没在文档里写啊。。。话说 create-react-app 这个框架这么封闭、复杂点的需求还要配router和redux、为什么这么多人还喜欢用啊不理解。。。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>（1）<a href="https://stylexjs.com/docs/learn/">Introduction to StyleX</a><br>（2）<a href="https://mp.weixin.qq.com/s/ysFnkHSTSGBn1UIdapZGVg">你了解 JSX，那你了解 StyleX 么？</a></p>]]></content>
    
    
    <summary type="html">2024技术分享的文档备份</summary>
    
    
    
    <category term="技术分享" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="CSS" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>监控告警设计</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/01/17/errorAlert/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/01/17/errorAlert/</id>
    <published>2024-01-17T07:03:03.000Z</published>
    <updated>2024-11-14T08:45:28.745Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>监控告警是当年接手的第一个 nodejs 需求，本来想在网上搜搜成熟的方案，然而可能是由于自己搜索能力太差了，没有找到合适的方案，于是自己就按照自己的想法写了一个监控告警的方案。现在回看当时的代码还是觉得有点稚嫩，只能说功能实现了，代码确实能跑。但是不是个稳健的代码自己心里一直没数，也不知道怎么写总结文档，所以一直拖到现在才想起来。可能是个糟糕的方案，但涉及的知识点还是值得记录的。</p><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ul><li>所有的项目采集到的前端错误都写入了专门的 es 了</li><li>提供 es 增删改查的能力及可视化展示的服务器是用 eggjs 框架搭建的</li><li>前端组有自己的一个 redis 库可供全部成员使用</li></ul><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>每个项目都可以配置多个告警规则（例如 “5min 内 js 报错次数超过 10 次”连续触发了 3 次、“30min 内资源错误影响用户数不超过 100 人”连续触发了 4 次）</li><li>告警规则命中时可以利用飞书机器人发送告警信息</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="告警规则校验"><a href="#告警规则校验" class="headerlink" title="告警规则校验"></a>告警规则校验</h3><p>要实现如 5min 内 js 报错次数超过 10 次的验证，首先需要统计每 5min 内 js 报错次数。考虑到可能会出现某一时间点报错数激增的情况，5min 的时间窗不应该重叠，重叠的话连续触发次数很容易达成。告警太频繁相当于没有作用，所以希望通过连续次数进行限制，确保告警上报的问题是持续存在的，是必须要检查修正的。分析需求后得出结论：</p><ul><li>为了检测连续触发次数，<strong>需要建立一个新表</strong>，用于存储每个项目每个告警规则的设置时间间隔内、设置的错误类型它的报错次数</li><li><strong>新表的数据写入依赖于定时任务</strong>，考虑到不同规则的时间间隔可能设置的不同，定时任务的执行间隔应该为设置时间间隔的最小公约数</li></ul><p>因为前端有现成的 redis 库，所以直接用它来存储每个告警规则的设置时间间隔内、设置的错误类型它的报错次数的数据。eggjs 连接 mongo 库需要 npm 安装模块 egg-mongoose（感谢上帝官方有做这种扩展）。在 config&#x2F;config.default.js 中配置 mongo 连接信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-function">(<span class="hljs-params">appInfo</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">const</span> mongoose = &#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">`mongodb://<span class="hljs-subst">$&#123;ip&#125;</span>/`</span>, <span class="hljs-comment">//端口号可以省略</span><br>    <span class="hljs-attr">options</span>: &#123;<br>      <span class="hljs-attr">useNewUrlParser</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">auth</span>: &#123;<br>        <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;username&quot;</span>,<br>        <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;pwd&quot;</span>,<br>      &#125;,<br>    &#125;,<br>    <span class="hljs-attr">plugins</span>: [],<br>    <span class="hljs-attr">loadModel</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">app</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">agent</span>: <span class="hljs-literal">false</span>,<br>  &#125;;<br>  <span class="hljs-keyword">return</span> &#123;<br>    mongoose,<br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>之后在 app&#x2F;model&#x2F;alarm.js 中定义新表的模型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 分钟错误日志数记录</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-function">(<span class="hljs-params">app</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> mongoose = app.<span class="hljs-property">mongoose</span>;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title class_">Schema</span> = mongoose.<span class="hljs-property">Schema</span>;<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title class_">RecordsSchema</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Schema</span>(&#123;<br>    <span class="hljs-attr">total</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,<br>    &#125;,<br>    <span class="hljs-attr">timestamp</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,<br>    &#125;,<br>    <span class="hljs-attr">interval</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,<br>    &#125;,<br>    <span class="hljs-attr">projectType</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>    &#125;,<br>    <span class="hljs-attr">errorType</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>    &#125;,<br>    <span class="hljs-attr">ruleType</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>    &#125;,<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> mongoose.<span class="hljs-title function_">model</span>(<span class="hljs-string">&quot;Records&quot;</span>, <span class="hljs-title class_">RecordsSchema</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p>之后在 app&#x2F;service&#x2F; 中编写 redis 增删改查功能时，可以直接用 ctx.model.Records 代表表格操作<br>egg-mongoose 提供的函数比较有限，这里只写一下用到的几种：</p><ul><li>insertMany：插入多项数据</li><li>find：查找数据，没有设置条件则查全部</li><li>remove：删除数据</li><li>deleteMany：删除特定条件数据</li></ul><p>eggjs 为约定式目录，所以直接在 app&#x2F;schedule 下新建一个文件夹，然后在该文件夹下新建一个 js 文件，命名为<code>checkAlarm.js</code>，在该文件中编写定时任务。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">schedule</span>: &#123;<br>    <span class="hljs-attr">interval</span>: <span class="hljs-string">&quot;1m&quot;</span>, <span class="hljs-comment">// 1 分钟间隔</span><br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;worker&quot;</span>, <span class="hljs-comment">// 指定的 worker 执行</span><br>  &#125;,<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">ctx</span>) &#123;<br>    <span class="hljs-comment">// 单个报错规则判定</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">queryErrorRecords</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">rule</span>) =&gt; &#123;<br>      <span class="hljs-keyword">const</span> projectType = rule.<span class="hljs-property">projectType</span>;<br>      <span class="hljs-keyword">const</span> type = rule.<span class="hljs-property">errorType</span>;<br><br>      <span class="hljs-keyword">let</span> endTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();<br>      <span class="hljs-comment">// 如果没有错误数日志，或当前时间与上一次日志记录的时间点大于规定间隔时，向es发起查询</span><br>      <span class="hljs-keyword">if</span> (<br>        record.<span class="hljs-property">length</span> == <span class="hljs-number">0</span> ||<br>        <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<br>          (endTime - record[record.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">timestamp</span>) / (<span class="hljs-number">60</span> * <span class="hljs-number">1000</span>)<br>        ) &gt;= rule.<span class="hljs-property">interval</span><br>      ) &#123;<br>        <span class="hljs-keyword">let</span> startTime = endTime - rule.<span class="hljs-property">interval</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>;<br>        <span class="hljs-keyword">const</span> queryBody = &#123;<br>          <span class="hljs-attr">track_total_hits</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">query</span>: &#123;<br>            <span class="hljs-attr">bool</span>: &#123;<br>              <span class="hljs-attr">must</span>: [<br>                &#123;<br>                  <span class="hljs-attr">term</span>: &#123;<br>                    <span class="hljs-string">&quot;projectType.keyword&quot;</span>: projectType,<br>                  &#125;,<br>                &#125;,<br>                &#123;<br>                  <span class="hljs-attr">match</span>: &#123;<br>                    type,<br>                  &#125;,<br>                &#125;,<br>              ],<br>              <span class="hljs-attr">filter</span>: [<br>                &#123;<br>                  <span class="hljs-attr">range</span>: &#123;<br>                    <span class="hljs-attr">time</span>: &#123;<br>                      <span class="hljs-attr">gte</span>: startTime,<br>                      <span class="hljs-attr">lte</span>: endTime,<br>                    &#125;,<br>                  &#125;,<br>                &#125;,<br>              ],<br>            &#125;,<br>          &#125;,<br>          <span class="hljs-attr">sort</span>: [<br>            &#123;<br>              <span class="hljs-attr">time</span>: <span class="hljs-string">&quot;asc&quot;</span>,<br>            &#125;,<br>          ],<br>        &#125;;<br>        <span class="hljs-keyword">const</span> body = <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">esClient</span>.<span class="hljs-title function_">search</span>(queryBody);<br>        <span class="hljs-keyword">const</span> &#123;<br>          <span class="hljs-attr">hits</span>: &#123; hits, total &#125;,<br>        &#125; = body;<br>        <span class="hljs-comment">// 分警报类型处理报错</span><br>        newRecords.<span class="hljs-title function_">push</span>(&#123;<br>          <span class="hljs-attr">total</span>: total.<span class="hljs-property">value</span>,<br>          <span class="hljs-attr">timestamp</span>: endTime,<br>          <span class="hljs-attr">interval</span>: rule.<span class="hljs-property">interval</span>,<br>          <span class="hljs-attr">projectType</span>: projectType,<br>          <span class="hljs-attr">errorType</span>: type,<br>          <span class="hljs-attr">ruleType</span>: rule.<span class="hljs-property">ruleType</span>,<br>        &#125;);<br>      &#125;<br>    &#125;;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;调用定时器回调&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-comment">// 获取报警规则</span><br>    <span class="hljs-keyword">let</span> &#123; data, env &#125; = <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">alertRule</span>.<span class="hljs-title function_">getWarning</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;current env:&quot;</span>, env);<br>    <span class="hljs-comment">// 数据格式调整</span><br>    <span class="hljs-keyword">let</span> rules = <span class="hljs-title function_">flattenRuleObj</span>(data);<br>    <span class="hljs-comment">// 获取和报警轮询相关的错误数日志</span><br>    <span class="hljs-keyword">let</span> records = <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">errorRecord</span>.<span class="hljs-title function_">getRecord</span>();<br>    <span class="hljs-keyword">let</span> newRecords = [];<br>    <span class="hljs-keyword">let</span> originalRecords = newRecords.<span class="hljs-title function_">slice</span>();<br><br>    <span class="hljs-keyword">if</span> (rules.<span class="hljs-property">length</span>) &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(<br>        rules.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">async</span> (rule, idx) =&gt; &#123;<br>          <span class="hljs-keyword">await</span> <span class="hljs-title function_">queryErrorRecords</span>(rule);<br>        &#125;)<br>      );<br><br>      <span class="hljs-comment">// 减少不必要的数据更改</span><br>      <span class="hljs-keyword">if</span> (newRecords.<span class="hljs-property">length</span> != originalRecords.<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">errorRecord</span>.<span class="hljs-title function_">storeRecord</span>(newRecords, env);<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> currentTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    <span class="hljs-keyword">if</span> (currentTime.<span class="hljs-title function_">getHours</span>() == <span class="hljs-number">2</span> &amp;&amp; currentTime.<span class="hljs-title function_">getMinutes</span>() == <span class="hljs-number">10</span>) &#123;<br>      <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">errorRecord</span>.<span class="hljs-title function_">clearRecord</span>(<br>        currentTime.<span class="hljs-title function_">getTime</span>() - <span class="hljs-number">2</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>,<br>        env<br>      );<br>    &#125;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>为简化方便展示，这里只展示了部分代码。定时任务启动后，首先查询报警规则，有报警规则设置时针对每一个报警规则进行数据处理（queryErrorRecords）：</p><ul><li>用 ctx.service.errorRecord.getRecord 获取当前报警规则下时间间隔的报错数统计结果</li><li>当前定时任务时间点与上一条记录时间点进行对比，如果大于等于设定的时间点，则向 es 进行时间间隔内特定错误的报错数查询，并将新的查询数与之前的时间间隔的报错数数据一起传给 mongo，更新表格</li><li>为防止表格数据越来越多，每天凌晨 2 点 10 分定时清除 2 点之前的数据</li></ul><p>关于为什么用 ctx.service.errorRecord.getRecord 做了全查，是因为告警规则有连续触发次数的设置，同时告警规则的时间间隔是可变动的，所以不好设置查询范围；另一方面要对所有的报警规则都做一次筛选查询感觉对请求接口压力比较大，做一次全查然后在 queryErrorRecords 做筛选处理感觉更合理。</p><h3 id="告警规则触发"><a href="#告警规则触发" class="headerlink" title="告警规则触发"></a>告警规则触发</h3><p>这里只以”5min 内 js 报错次数超过 10 次”连续触发了 3 次 的规则为例进行描述</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (relevantRecord.<span class="hljs-property">length</span> &gt;= rule.<span class="hljs-property">count</span> - <span class="hljs-number">1</span> &amp;&amp; total.<span class="hljs-property">value</span> &gt;= rule.<span class="hljs-property">limitValue</span>) &#123;<br>  <span class="hljs-comment">// 判断是否符合规则</span><br>  <span class="hljs-comment">// 判别规则1:警报设置连续次数是1时判断本次轮询报错数超过阈值</span><br>  <span class="hljs-comment">// 判别规则2:警报设置连续次数大于1时判断最近几条轮询报错数是否超过阈值</span><br>  <span class="hljs-comment">// 规则2情况下需要考虑关闭警报一段时间重新开启的情况，判断中应该对relevantRecord里的时间戳做检查</span><br>  <span class="hljs-keyword">const</span> timeRange = rule.<span class="hljs-property">count</span> * rule.<span class="hljs-property">interval</span>;<br>  <span class="hljs-keyword">const</span> isHitRule =<br>    (relevantRecord.<span class="hljs-property">length</span> == <span class="hljs-number">0</span> &amp;&amp; rule.<span class="hljs-property">count</span> == <span class="hljs-number">1</span>) ||<br>    relevantRecord<br>      .<span class="hljs-title function_">slice</span>(relevantRecord.<span class="hljs-property">length</span> - rule.<span class="hljs-property">count</span> + <span class="hljs-number">1</span>, relevantRecord.<span class="hljs-property">length</span>)<br>      .<span class="hljs-title function_">every</span>(<br>        <span class="hljs-function">(<span class="hljs-params">item, i</span>) =&gt;</span><br>          item.<span class="hljs-property">total</span> &gt;= rule.<span class="hljs-property">limitValue</span> &amp;&amp;<br>          endTime - item.<span class="hljs-property">timestamp</span> &lt; (timeRange + <span class="hljs-number">1</span>) * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span><br>      );<br>  <span class="hljs-comment">// 符合规则且设置了webhook时发送警报</span><br>  <span class="hljs-keyword">if</span> (isHitRule &amp;&amp; rule.<span class="hljs-property">webhook</span>) &#123;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">robot</span>.<span class="hljs-title function_">sendSettingMessage</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;rich-text&quot;</span>,<br>      <span class="hljs-attr">webhook</span>: rule.<span class="hljs-property">webhook</span>,<br>      <span class="hljs-attr">msgBody</span>: &#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;监控报警通知&quot;</span>,<br>        <span class="hljs-attr">firstLine</span>: <span class="hljs-string">`项目<span class="hljs-subst">$&#123;projectType&#125;</span>在<span class="hljs-subst">$&#123;</span></span><br><span class="hljs-subst"><span class="hljs-string">          rule.interval</span></span><br><span class="hljs-subst"><span class="hljs-string">        &#125;</span>min间隔，发生<span class="hljs-subst">$&#123;printErrorName(type)&#125;</span>，错误数超过阈值<span class="hljs-subst">$&#123;</span></span><br><span class="hljs-subst"><span class="hljs-string">          rule.limitValue</span></span><br><span class="hljs-subst"><span class="hljs-string">        &#125;</span>，连续<span class="hljs-subst">$&#123;rule.count&#125;</span>次`</span>,<br>        <span class="hljs-attr">secondLine</span>: <span class="hljs-string">&quot;请点击&quot;</span>,<br>        <span class="hljs-attr">link</span>: <span class="hljs-string">`http://<span class="hljs-subst">$&#123;MainDomain(env)&#125;</span>/#/list/<span class="hljs-subst">$&#123;type&#125;</span>`</span>,<br>      &#125;,<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里 relevantRecord 就表示与告警规则相关的数据。当本次定时任务发现命中告警规则的时间间隔和错误数时，开始判断规则连续次数是否符合条件（连续次数为 1 直接可以告警）。用于判断的变量是 isHitRule，其逻辑如下：</p><ol><li>连续次数为 1，符合告警条件</li><li>连续次数大于 1，判断最近几条记录的错误数是否都大于阈值（需滤除关闭告警的时间段带来的误差）<br>飞书告警具体实现可以参考之前的文章</li></ol><h3 id="部署优化"><a href="#部署优化" class="headerlink" title="部署优化"></a>部署优化</h3><p>将该定时任务写好后部署到服务器上，发现有时候告警会连续报两次。经过排查后发现部署上的是一个服务器集群，共 6 个服务器，有两个执行的时间太过接近、所以当一个服务器还未传新的数据时另一个服务器也认为符合判定执行了查询、判断、告警，就导致了两次，其他时候的服务器由于读到了之前服务器推入的数据，因此不命中我的时间间隔判断条件<br>之前本来是希望参考<a href="https://blog.csdn.net/qq_24884955/article/details/82856230">这篇文章</a>设置一个服务器运行该定时任务，但是 hostname 的 hash 码太乱了，且每次上线都更新一次，没什么用</p><p>最终采用的是利用 redis 实现分布式锁的方法。分布式锁是一种在分布式系统中实现资源互斥访问机制。在多个进程或多台机器同时操作一些资源时，redis 生成一个限时的 key，使用 Redis 的 expire 特征，所以最终当用户需要释放资源时，释放 key。</p><p>事务锁的实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DBLock</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">ctx</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_uuid</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">uuid</span>(); <span class="hljs-comment">// 分布式节点的uuid</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_uuid</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">Lock</span> = ctx.<span class="hljs-property">model</span>.<span class="hljs-property">Lock</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// 基于时间戳生成的uuid</span><br>  <span class="hljs-title function_">uuid</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> d = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&quot;</span>.<span class="hljs-title function_">replace</span>(<br>      <span class="hljs-regexp">/[xy]/g</span>,<br>      <span class="hljs-keyword">function</span> (<span class="hljs-params">c</span>) &#123;<br>        <span class="hljs-keyword">var</span> r = (d + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">16</span>) % <span class="hljs-number">16</span> | <span class="hljs-number">0</span>;<br>        d = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(d / <span class="hljs-number">16</span>);<br>        <span class="hljs-keyword">return</span> (c === <span class="hljs-string">&quot;x&quot;</span> ? r : (r &amp; <span class="hljs-number">0x3</span>) | <span class="hljs-number">0x8</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>);<br>      &#125;<br>    );<br>  &#125;<br><br>  <span class="hljs-comment">// 获取一次锁</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">acquire</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">Lock</span>.<span class="hljs-title function_">create</span>(&#123;<br>        <span class="hljs-attr">_id</span>: name,<br>        <span class="hljs-attr">acquirer</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">_uuid</span>,<br>        <span class="hljs-attr">acquiredAt</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),<br>        <span class="hljs-attr">updatedAt</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),<br>      &#125;);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;error:&quot;</span> + e);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 获取锁, 每5s重试一次</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">lock</span>(<span class="hljs-params">name, retryInterval = <span class="hljs-number">5000</span></span>) &#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">acquire</span>(name)) &#123;<br>        <span class="hljs-keyword">break</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">sleep</span>(retryInterval);<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 解锁</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">unlock</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;unlock&quot;</span>);<br>    <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">Lock</span>.<span class="hljs-title function_">deleteMany</span>(&#123; <span class="hljs-attr">_id</span>: name, <span class="hljs-attr">acquirer</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">_uuid</span> &#125;);<br>  &#125;<br><br>  <span class="hljs-comment">// 续期</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">renew</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">Lock</span>.<span class="hljs-title function_">updateOne</span>(<br>      &#123; <span class="hljs-attr">_id</span>: name, <span class="hljs-attr">acquirer</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">_uuid</span> &#125;,<br>      &#123;<br>        <span class="hljs-attr">updatedAt</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),<br>      &#125;<br>    );<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;renew&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 睡眠</span><br>  <span class="hljs-title function_">sleep</span>(<span class="hljs-params">ms</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, ms));<br>  &#125;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">DBLock</span>;<br></code></pre></td></tr></table></figure><p>事务锁主要涉及的操作：</p><ul><li>uuid：唯一标识符生成，是为了解决错误删除其他线程的锁的问题，线程在删除锁的时候，用自己的 uuid 与 Redis 中锁的 uuid 进行比较，如果是自己的锁就进行删除，不是则不删除</li><li>lock：循环获取锁数据，如果获取到则跳出循环，否则等待 5s 后重试。锁数据生成：利用 Redis 的 setNx 命令在 Redis 数据库中创建一个&lt;Key，Value&gt;记录，这条命令只有当 Redis 中没有这个 Key 的时候才执行成功，当已经有这个 Key 的时候会返回失败</li><li>unlock：删除锁数据</li><li>renew：更新锁数据，延长锁的过期时间；主要用于由于业务执行时间长，最终可能导致在业务执行过程中，自己的锁超时，然后锁自动释放了</li></ul><p>在定时任务里的使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">schedule</span>: &#123;<br>    <span class="hljs-attr">interval</span>: <span class="hljs-string">&quot;1m&quot;</span>, <span class="hljs-comment">// 1 分钟间隔</span><br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;worker&quot;</span>, <span class="hljs-comment">// 指定的 worker 执行</span><br>  &#125;,<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">ctx</span>) &#123;<br>    <span class="hljs-comment">// 。。。</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;调用定时器回调&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-comment">// 获取报警规则</span><br>    <span class="hljs-keyword">let</span> &#123; data, env &#125; = <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">alertRule</span>.<span class="hljs-title function_">getWarning</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;current env:&quot;</span>, env);<br>    <span class="hljs-comment">// 数据格式调整</span><br>    <span class="hljs-keyword">let</span> rules = <span class="hljs-title function_">flattenRuleObj</span>(data);<br>    <span class="hljs-comment">// 获取和报警轮询相关的错误数日志</span><br>    <span class="hljs-keyword">let</span> records = <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">errorRecord</span>.<span class="hljs-title function_">getRecord</span>();<br>    <span class="hljs-keyword">let</span> newRecords = [];<br>    <span class="hljs-keyword">let</span> originalRecords = newRecords.<span class="hljs-title function_">slice</span>();<br><br>    <span class="hljs-keyword">if</span> (rules.<span class="hljs-property">length</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">await</span> dblock.<span class="hljs-title function_">lock</span>(<span class="hljs-string">&quot;send_errcount&quot;</span>);<br>        <span class="hljs-keyword">if</span> (rules.<span class="hljs-property">length</span>) &#123;<br>          <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(<br>            rules.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">async</span> (rule, idx) =&gt; &#123;<br>              <span class="hljs-keyword">await</span> <span class="hljs-title function_">queryErrorRecords</span>(rule);<br>            &#125;)<br>          );<br><br>          <span class="hljs-comment">// 减少不必要的数据更改</span><br>          <span class="hljs-keyword">if</span> (newRecords.<span class="hljs-property">length</span> != originalRecords.<span class="hljs-property">length</span>) &#123;<br>            <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">errorRecord</span>.<span class="hljs-title function_">storeRecord</span>(newRecords, env);<br>          &#125;<br>        &#125;<br>      &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">await</span> dblock.<span class="hljs-title function_">unlock</span>(<span class="hljs-string">&quot;send_errcount&quot;</span>);<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> currentTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    <span class="hljs-keyword">if</span> (currentTime.<span class="hljs-title function_">getHours</span>() == <span class="hljs-number">2</span> &amp;&amp; currentTime.<span class="hljs-title function_">getMinutes</span>() == <span class="hljs-number">10</span>) &#123;<br>      <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">errorRecord</span>.<span class="hljs-title function_">clearRecord</span>(<br>        currentTime.<span class="hljs-title function_">getTime</span>() - <span class="hljs-number">2</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>,<br>        env<br>      );<br>    &#125;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>在告警规则校验和告警规则触发的操作的之前设置锁，所有操作结束后解锁。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>（1）<a href="https://blog.csdn.net/qq_24884955/article/details/82856230">egg 服务器集群情况下的定时任务执行操作（2 种方式）</a><br>（2）<a href="https://juejin.cn/post/7239058077273620536?searchId=2024011811013604AA57490988668AB93E">图解 Redis 和 Zookeeper 分布式锁 | 京东云技术团队</a></p>]]></content>
    
    
    <summary type="html">监控告警功能的实现</summary>
    
    
    
    <category term="工作技巧" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="前端监控" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/"/>
    
    <category term="redis" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/redis/"/>
    
    <category term="eggjs" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/eggjs/"/>
    
  </entry>
  
  <entry>
    <title>react-query状态管理</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2023/11/09/react-query/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2023/11/09/react-query/</id>
    <published>2023-11-09T07:31:00.000Z</published>
    <updated>2024-11-14T08:45:28.821Z</updated>
    
    <content type="html"><![CDATA[<p>起因是在阅读<a href="https://github.com/alan2207/bulletproof-react">某 react 项目</a>时看到作者提出的项目状态管理的规则，觉得很有意思；对于平常使用 redux 一把梭的人来说，他说的这个技术方案太过陌生，所以想随手记一下。</p><span id="more"></span><h2 id="状态管理方针"><a href="#状态管理方针" class="headerlink" title="状态管理方针"></a>状态管理方针</h2><p>以下是项目作者提出的状态管理的简要概述</p><h3 id="组件状态"><a href="#组件状态" class="headerlink" title="组件状态"></a>组件状态</h3><p>对于只有当前组件才用的状态可以直接用 react 的钩子函数</p><ul><li>useState</li><li>useReducer</li></ul><h3 id="应用状态"><a href="#应用状态" class="headerlink" title="应用状态"></a>应用状态</h3><p>应用状态指在交互时发生值的改变、以控制应用的状态的这种变量，例如弹出弹窗、提示语、夜间模式等。可以使用以下方式管理</p><ul><li>context</li><li>redux<br>以及其他看起来功能很类似的库</li></ul><h3 id="表格状态"><a href="#表格状态" class="headerlink" title="表格状态"></a>表格状态</h3><p>填写表单时的数据管理，有专门的解决方案</p><ul><li>React Hook Form</li><li>Formik</li><li>React Final Form</li></ul><h3 id="服务端数据管理"><a href="#服务端数据管理" class="headerlink" title="服务端数据管理"></a>服务端数据管理</h3><p>从服务器请求得到的数据，有时需要存储起来方便后续修改等操作。可以使用以下方案</p><ul><li>react-query</li><li>swr</li><li>apollo client</li><li>urql</li></ul><p>本文这次只记录 react-query 的使用方法</p><h2 id="react-query"><a href="#react-query" class="headerlink" title="react-query"></a>react-query</h2><h3 id="使用场景举例"><a href="#使用场景举例" class="headerlink" title="使用场景举例"></a>使用场景举例</h3><p>一般来说，如果一个页面要展示请求内容，需要以下代码来实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [data, updateData] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> [isError, setError] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> [isLoading, setLoading] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-title function_">setError</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-title function_">setLoading</span>(<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/user&#x27;</span>);<br>      <span class="hljs-title function_">updateData</span>(data);<br>    &#125; <span class="hljs-keyword">catch</span>(e) &#123;<br>      <span class="hljs-title function_">setError</span>(<span class="hljs-literal">true</span>);<br>    &#125;<br>    <span class="hljs-title function_">setLoading</span>(<span class="hljs-literal">false</span>);<br>  &#125;, [])<br><br>  <span class="hljs-comment">// 处理data</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到至少需要 3 个 state，存储数据的 data、请求加载态的 isLoading 和请求失败的 isError。如果页面涉及多个请求，这样的 state 设置还要重复好多次。<br>如果使用 react-query 实现，则代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><span class="hljs-keyword">import</span> &#123; useQuery &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-query&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123;data, isLoading, isError&#125; = <span class="hljs-title function_">useQuery</span>(<span class="hljs-string">&#x27;userData&#x27;</span>, <span class="hljs-function">() =&gt;</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/user&#x27;</span>));<br><br>  <span class="hljs-keyword">if</span> (isLoading) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>loading<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      &#123;data.map(user =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;user.id&#125;</span>&gt;</span>&#123;user.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>)&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到可以省去中间态的 state 设置，除此之外 react-query 还可以实现这些功能：</p><ul><li>多个组件请求同一个 query 时只发出一个请求</li><li>缓存数据失效&#x2F;更新策略（判断缓存合适失效，失效后自动请求数据）</li><li>对失效数据垃圾清理</li></ul><p>如何实现将在接下来的使用介绍里展开</p><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>根据 react-query v4 的说明文档，可以在 App.tsx 文件做如下配置</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">QueryClientProvider</span>, <span class="hljs-title class_">ReactQueryProviderConfig</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-query&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">queryConfig</span>: <span class="hljs-title class_">ReactQueryProviderConfig</span> = &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * refetchOnWindowFocus 窗口获得焦点时重新获取数据</span><br><span class="hljs-comment">   * staleTime 过多久重新获取服务端数据</span><br><span class="hljs-comment">   * cacheTime 数据缓存时间 默认是 5 * 60 * 1000 5分钟</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">queries</span>: &#123;<br>    <span class="hljs-attr">refetchOnWindowFocus</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">staleTime</span>: <span class="hljs-number">5</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>,<br>    <span class="hljs-attr">retry</span>: <span class="hljs-number">0</span><br>  &#125;,<br>&#125;;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">QueryClientProvider</span> <span class="hljs-attr">client</span>=<span class="hljs-string">&#123;new</span> <span class="hljs-attr">QueryClient</span>(&#123; <span class="hljs-attr">defaultOptions:</span> <span class="hljs-attr">queryConfig</span> &#125;)&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">QueryClientProvider</span>&gt;</span></span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)<br>  );<br><br></code></pre></td></tr></table></figure><p>QueryClient 是可以与缓存交互的实例，其他组件如果想要获取这个实例可以用 useQueryClient 函数实现。<br>QueryClient 实例可配置的参数包括：</p><div class="note note-info">            <p><strong>staleTime</strong> 重新获取数据的时间间隔 默认 0<br><strong>cacheTime</strong> 数据缓存时间<br><strong>retry</strong> 失败重试次数 默认 3 次<br><strong>refetchOnWindowFocus</strong> 窗口重新获得焦点时重新获取数据 默认 false<br><strong>refetchOnReconnect</strong> 网络重新链接<br><strong>refetchOnMount</strong> 实例重新挂载<br><strong>enabled</strong> 如果为“false”的化，“useQuery”不会触发</p>          </div><p>这些参数也可以在钩子函数里配置</p><p>react-query 常用的钩子函数有两个：useQuery 和 useMutation，用于应对常见的数据操作</p><h3 id="useQuery（数据查询）"><a href="#useQuery（数据查询）" class="headerlink" title="useQuery（数据查询）"></a>useQuery（数据查询）</h3><h4 id="书写规范"><a href="#书写规范" class="headerlink" title="书写规范"></a>书写规范</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useQuery &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-query&quot;</span>;<br><span class="hljs-comment">// v3写法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> info = <span class="hljs-title function_">useQuery</span>(<span class="hljs-string">&quot;todos&quot;</span>, fetchTodoList);<br>&#125;<br><span class="hljs-comment">// v4+写法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> info = <span class="hljs-title function_">useQuery</span>(&#123; <span class="hljs-attr">queryKey</span>: [<span class="hljs-string">&quot;todos&quot;</span>], <span class="hljs-attr">queryFn</span>: fetchTodoList &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="入参出参"><a href="#入参出参" class="headerlink" title="入参出参"></a>入参出参</h4><p>queryKey 可以都是字符串数组，也可以是 object 元素<br>queryFn 可以自动接收到 queryKey 的值，通常会返回 promise 值；如果考虑请求出错、返回 rejected 状态的情况的话，queryFn 的内部需要考虑做抛出错误的处理，以 fetch 请求为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">useQuery</span>(&#123;<br>  <span class="hljs-attr">queryKey</span>: [<span class="hljs-string">&quot;todos&quot;</span>, todoId],<br>  <span class="hljs-attr">queryFn</span>: <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;/todos/&quot;</span> + todoId);<br>    <span class="hljs-keyword">if</span> (!response.<span class="hljs-property">ok</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Network response was not ok&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>();<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>当 queryKey 的内容发生变动时 queryFn 的内容就会自动执行<br>useQuery 返回的内容包括：</p><div class="note note-info">            <p><strong>isLoading</strong>：请求是否在加载数据<br><strong>isError</strong>：请求是否报错<br><strong>isFetching</strong>：是否有一个挂起的请求，适用于无限滚动<br><strong>data</strong>：请求返回数据</p>          </div><h3 id="useMutation（数据增删改）"><a href="#useMutation（数据增删改）" class="headerlink" title="useMutation（数据增删改）"></a>useMutation（数据增删改）</h3><p>该函数钩子通常用于有副作用的场景。</p><h4 id="书写规范-1"><a href="#书写规范-1" class="headerlink" title="书写规范"></a>书写规范</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useQuery &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-query&quot;</span>;<br><span class="hljs-comment">// v3写法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [mutate] = <span class="hljs-title function_">useMutation</span>(<span class="hljs-function">(<span class="hljs-params">newTodo</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/todos&quot;</span>, newTodo);<br>  &#125;);<br>&#125;<br><span class="hljs-comment">// v4+写法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> mutation = <span class="hljs-title function_">useMutation</span>(&#123;<br>    <span class="hljs-attr">mutationFn</span>: <span class="hljs-function">(<span class="hljs-params">newTodo</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/todos&quot;</span>, newTodo);<br>    &#125;,<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="入参出参-1"><a href="#入参出参-1" class="headerlink" title="入参出参"></a>入参出参</h4><p>常用的入参包括：</p><div class="note note-info">            <p><strong>mutationFn</strong>：用于处理请求的函数，返回 promise 对象<br><strong>onMutate</strong>：请求触发、将要执行前触发的回调函数<br><strong>onError</strong>：请求失败时触发的回调函数<br><strong>onSuccess</strong>：请求失败时触发的回调函数<br><strong>onSettled</strong>：请求完成时触发的回调函数，不管成功与否；执行时机在 onSuccess 和 onError 之后</p>          </div><p>除此以外也可以配置请求操作相关的一些配置，例如重试、重试延迟等<br>返回的内容主要包括：</p><div class="note note-info">            <p><strong>mutate</strong>：在代码中运行突变的操作，接受的入参包括 mutationFn 的入参和 onSuccess、onError、onSettled<br><strong>isPending</strong>：请求是否在加载数据<br><strong>isError</strong>：请求是否报错</p>          </div><p>涉及增删改的操作可以使用乐观更新来减少等待加载的时间，让用户体验更好。所谓乐观更新、就是前端默认后端接口请求一定会成功、提前将修改结果展示出来。<br>以下面这段代码为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">useDeleteDiscussion</span> = (<span class="hljs-params">&#123; config &#125;: UseDeleteDiscussionOptions = &#123;&#125;</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; addNotification &#125; = <span class="hljs-title function_">useNotificationStore</span>();<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">useMutation</span>(&#123;<br>    <span class="hljs-attr">onMutate</span>: <span class="hljs-keyword">async</span> (deletedDiscussion) =&gt; &#123;<br>      <span class="hljs-keyword">await</span> queryClient.<span class="hljs-title function_">cancelQueries</span>(<span class="hljs-string">&#x27;discussions&#x27;</span>);<br><br>      <span class="hljs-keyword">const</span> previousDiscussions = queryClient.<span class="hljs-property">getQueryData</span>&lt;<span class="hljs-title class_">Discussion</span>[]&gt;(<span class="hljs-string">&#x27;discussions&#x27;</span>);<br><br>      queryClient.<span class="hljs-title function_">setQueryData</span>(<br>        <span class="hljs-string">&#x27;discussions&#x27;</span>,<br>        previousDiscussions?.<span class="hljs-title function_">filter</span>(<br>          <span class="hljs-function">(<span class="hljs-params">discussion</span>) =&gt;</span> discussion.<span class="hljs-property">id</span> !== deletedDiscussion.<span class="hljs-property">discussionId</span><br>        )<br>      );<br><br>      <span class="hljs-keyword">return</span> &#123; previousDiscussions &#125;;<br>    &#125;,<br>    <span class="hljs-attr">onError</span>: <span class="hljs-function">(<span class="hljs-params">_, __, context: any</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (context?.<span class="hljs-property">previousDiscussions</span>) &#123;<br>        queryClient.<span class="hljs-title function_">setQueryData</span>(<span class="hljs-string">&#x27;discussions&#x27;</span>, context.<span class="hljs-property">previousDiscussions</span>);<br>      &#125;<br>    &#125;,<br>    <span class="hljs-attr">onSuccess</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      queryClient.<span class="hljs-title function_">invalidateQueries</span>(<span class="hljs-string">&#x27;discussions&#x27;</span>);<br>      <span class="hljs-title function_">addNotification</span>(&#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;success&#x27;</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Discussion Deleted&#x27;</span>,<br>      &#125;);<br>    &#125;,<br>    ...config,<br>    <span class="hljs-attr">mutationFn</span>: <span class="hljs-function">(<span class="hljs-params">&#123; discussionId &#125;: &#123; discussionId: string &#125;</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">delete</span>(<span class="hljs-string">`/discussions/<span class="hljs-subst">$&#123;discussionId&#125;</span>`</span>);<br>    &#125;<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>这段代码的大致逻辑是：</p><ul><li>删除请求触发onMutate回调，为了乐观更新首先取消已有的讨论的请求（应该是为了应对配置了更新策略的queryClient）；从缓存中取出已存储的讨论列表、滤除删除的目标讨论、利用setQueryData将结果存入缓存</li><li>删除请求成功时，用invalidateQueries清除缓存、重新拉取数据</li><li>删除请求失败时，缓存重新存入上一次缓存即未删除的内容，相当于回退</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>（1）<a href="https://juejin.cn/post/6882669076540456967">react-query</a><br>（2）<a href="https://juejin.cn/column/7105422212789714980">react-query手把手教程</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;起因是在阅读&lt;a href=&quot;https://github.com/alan2207/bulletproof-react&quot;&gt;某 react 项目&lt;/a&gt;时看到作者提出的项目状态管理的规则，觉得很有意思；对于平常使用 redux 一把梭的人来说，他说的这个技术方案太过陌生，所以想随手记一下。&lt;/p&gt;</summary>
    
    
    
    <category term="技术学习" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="React" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/React/"/>
    
    <category term="状态管理" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>带缩略图的图片切换展示实现</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2023/11/09/thumbSwipe/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2023/11/09/thumbSwipe/</id>
    <published>2023-11-09T07:04:30.000Z</published>
    <updated>2024-11-14T08:45:28.851Z</updated>
    
    <content type="html"><![CDATA[<p>简单记录一下做需求时遇到的问题和思考</p><span id="more"></span><h2 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h2><ol><li>实现一个带缩略图的图片切换模块；大图片支持左右翻页查看，也支持点选小图查看。</li><li>缩略图图片数量较少时整体居中；图片较多时缩略图支持滚动。点击缩略图选中的小图处于正中</li><li>点击大图打开预览弹窗，预览可左右滑动查看图片，再次点击退出预览态</li><li>预览态图片展示原则：过长的图片，放大且从顶部开始展示，可向下滑动查看；短图居中展示</li></ol><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ol><li>因为需求涉及到很多图片切换展示，可使用已有的方案 swiper 组件，如果使用了 vue 框架则使用 vue-awesome-swiper、配合 swiper 以前使用。安装时注意版本问题，高版本的 swiper 只能使用 vue 3 版本的 vue-awesome-swiper 调用，如果要使用 vue2 语法，版本可参考：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;swiper&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^5.4.5&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;vue-awesome-swiper&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.1.1&quot;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>带缩略图的图片轮播官网有给实现<a href="https://github.com/surmon-china/surmon-china.github.io/blob/vue2/projects/vue-awesome-swiper/examples/30-thumbs-gallery.vue">案例</a><br>大图的展示使用 swiper 组件没有疑问。但实现的缩略图在轮播条件下样式比较合理，不然首图居中时左侧出现大片空白感觉很奇怪；因此缩略图的实现放弃用 swiper，将父容器设置为溢出滚动，小图包裹在一个容器里，在不滚动的时候利用 flex 布局让小图整体的容器居中</p><ol start="2"><li>缩略图较多、需要滑动查看缩略图并点击时使选中的缩略图位于父容器中间的实现可以利用浏览器的 API：scrollIntoView。一般说来使用这个 API 时可能直接就使用默认的方法、没有考虑过传参， 但实际上该 API 提供了入参让我们可以改变滚动进视野的方式：</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> alignToTop = <span class="hljs-built_in">boolean</span>;<br><span class="hljs-keyword">type</span> scrollIntoViewOptions = &#123;<br>  <span class="hljs-attr">behavior</span>: <span class="hljs-string">&quot;auto&quot;</span> | <span class="hljs-string">&quot;smooth&quot;</span>;<br>  <span class="hljs-attr">block</span>: <span class="hljs-string">&quot;start&quot;</span> | <span class="hljs-string">&quot;center&quot;</span> | <span class="hljs-string">&quot;end&quot;</span> | <span class="hljs-string">&quot;nearest&quot;</span>;<br>  <span class="hljs-attr">inline</span>: <span class="hljs-string">&quot;start&quot;</span> | <span class="hljs-string">&quot;center&quot;</span> | <span class="hljs-string">&quot;end&quot;</span> | <span class="hljs-string">&quot;nearest&quot;</span>;<br>&#125;;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Element</span> &#123;<br>  <span class="hljs-title function_">scrollIntoView</span>(arg?: alignToTop | scrollIntoViewOptions): <span class="hljs-built_in">void</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中 block 就是决定竖直方向的对齐方式，inline 是决定左右方向的对齐方式，可以对这两个参数进行操作。</p><ol start="3"><li>图片列表加载时可能需要一些时间，偶尔可能会出现部分图片加载失败。为避免显示失败，需要增加过渡态展示，这里以变量imgLoaded控制，通过监听图片加载的load过程来改变imgLoaded的值，当所有图片加载结束时变更imgLoaded、展示图片。</li></ol><p>最后带缩略的图片展示模块的实现大致如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;img-list-container&quot;&gt;<br>    &lt;div class=&quot;img-list-wrap&quot; v-show=&quot;imgList &amp;&amp; imgList.length&quot;&gt;<br>      &lt;!-- swiper1 --&gt;<br>      &lt;swiper<br>        class=&quot;swiper gallery-top&quot;<br>        :options=&quot;swiperOptionTop&quot;<br>        ref=&quot;swiperTop&quot;<br>        @slideChange=&quot;onSlideChange&quot;<br>      &gt;<br>        &lt;swiper-slide<br>          class=&quot;img-slide&quot;<br>          v-for=&quot;(item, idx) in imgList&quot;<br>          :key=&quot;idx&quot;<br>        &gt;<br>          &lt;img<br>            :src=&quot;item.url&quot;<br>            class=&quot;img-content&quot;<br>            @click=&quot;showPreviewModal&quot;<br>            v-show=&quot;imgLoaded&quot;<br>            @load=&quot;bigPicLoad(item.url, idx)&quot;<br>            @error=&quot;(event) =&gt; bigPicLoadFail(item.url, idx, event)&quot;<br>          /&gt;<br>          &lt;img<br>            src=&quot;./loading.gif&quot;<br>            class=&quot;img-content_0 center&quot;<br>            v-show=&quot;!imgLoaded&quot;<br>          /&gt;<br>        &lt;/swiper-slide&gt;<br>      &lt;/swiper&gt;<br>      &lt;!-- Thumbs --&gt;<br>      &lt;div<br>        :class=&quot;[<br>          &#x27;gallery-thumbs&#x27;,<br>          imgList &amp;&amp; imgList.length &lt; 6 &amp;&amp; &#x27;no-scroll&#x27;,<br>        ]&quot;<br>        ref=&quot;swiperThumbs&quot;<br>      &gt;<br>        &lt;div<br>          :class=&quot;[&#x27;thumb-wrap&#x27;, imgList &amp;&amp; imgList.length &lt; 6 &amp;&amp; &#x27;no-scroll&#x27;]&quot;<br>        &gt;<br>          &lt;div<br>            :class=&quot;[&#x27;img-thumb&#x27;, idx === activeIndex &amp;&amp; &#x27;img-thumb-active&#x27;]&quot;<br>            v-for=&quot;(item, idx) in imgList&quot;<br>            :key=&quot;idx&quot;<br>            @click=&quot;(event) =&gt; changeActiveIdx(event, idx)&quot;<br>          &gt;<br>            &lt;img<br>              :src=&quot;item.url&quot;<br>              class=&quot;img-content&quot;<br>              v-show=&quot;smallImgLoaded&quot;<br>              @load=&quot;smallPicLoad(item.url, idx)&quot;<br>            /&gt;<br>            &lt;img<br>              src=&quot;./loading.gif&quot;<br>              class=&quot;img-content_0&quot;<br>              v-show=&quot;!smallImgLoaded&quot;<br>            /&gt;<br>          &lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br><br>    &lt;img-preview<br>      :currentIdx=&quot;activeIndex&quot;<br>      :imgList=&quot;imgList&quot;<br>      ref=&quot;previewModal&quot;<br>    /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import ImgPreview from &quot;@/wap/components/ImgPreview.vue&quot;;<br><br>import &#123; Swiper, SwiperSlide &#125; from &quot;vue-awesome-swiper&quot;;<br>import &quot;swiper/css/swiper.css&quot;;<br><br>export default &#123;<br>  name: &quot;swiper-thumbs-gallery&quot;,<br>  props: &#123;<br>    imgList: &#123;<br>      type: Array,<br>      default: [],<br>    &#125;,<br>  &#125;,<br>  components: &#123;<br>    Swiper,<br>    SwiperSlide,<br>    ImgPreview,<br>  &#125;,<br><br>  watch: &#123;<br>    imgList: &#123;<br>      deep: true,<br>      handler(newVal) &#123;<br>        this.activeIndex = 0;<br>        this.imgLoaded = false;<br>        this.smallImgLoaded = false;<br>        this.topCount = 0;<br>        this.thumbCount = 0;<br>        this.swiperTop.slideTo(this.activeIndex);<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>  data() &#123;<br>    return &#123;<br>      swiperOptionTop: &#123;<br>        loop: false,<br>        loopedSlides: this.imgList.length,<br>        spaceBetween: 10,<br>      &#125;,<br>      swiperTop: null,<br>      swiperThumbs: null,<br>      activeIndex: 0,<br>      imgLoaded: false,<br>      smallImgLoaded: false,<br>      topCount: 0,<br>      thumbCount: 0,<br>    &#125;;<br>  &#125;,<br>  mounted() &#123;<br>    this.$nextTick(() =&gt; &#123;<br>      this.swiperTop = this.$refs.swiperTop.$swiper;<br>      this.swiperThumbs = this.$refs.swiperThumbs.$swiper;<br>    &#125;);<br>  &#125;,<br>  methods: &#123;<br>    bigPicLoad(url, idx) &#123;<br>      this.topCount++;<br>      if (this.topCount === this.imgList.length) &#123;<br>        this.imgLoaded = true;<br>      &#125;<br>    &#125;,<br>    bigPicLoadFail(url, idx, event) &#123;<br>      event.target.style =<br>        &quot;width:57px;height:43px;position: absolute;left: 50%;top: 50%;transform: translate(-50%, -50%);&quot;;<br>      this.imgList[idx].url = &quot;./fail.png&quot;;<br>      this.topCount++;<br>      if (this.topCount === this.imgList.length) &#123;<br>        this.imgLoaded = true;<br>      &#125;<br>    &#125;,<br>    smallPicLoad(url, idx) &#123;<br>      console.log(&quot;small loaded&quot;, url, idx, this.imgList.length);<br>      this.thumbCount++;<br>      if (this.thumbCount === this.imgList.length) &#123;<br>        this.smallImgLoaded = true;<br>      &#125;<br>    &#125;,<br>    onSlideChange() &#123;<br>      console.log(&quot;swiper&quot;, this.swiperTop.activeIndex);<br>      this.activeIndex = this.swiperTop.activeIndex;<br>    &#125;,<br>    changeActiveIdx(event, idx) &#123;<br>      this.activeIndex = idx;<br>      this.swiperTop.slideTo(this.activeIndex);<br>      event.target.scrollIntoView(&#123;<br>        block: &quot;nearest&quot;,<br>        inline: &quot;center&quot;,<br>      &#125;);<br>    &#125;,<br>    showPreviewModal() &#123;<br>      this.$refs[&quot;previewModal&quot;].show();<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>.swiper &#123;<br>  .swiper-slide &#123;<br>    background-size: cover;<br>    background-position: center;<br>  &#125;<br>&#125;<br><br>.gallery-top &#123;<br>  height: 387px;<br>  width: 100%;<br><br>  .img-content_0 &#123;<br>    width: 42px;<br>    height: 58px;<br>    padding-top: 149px;<br>    box-sizing: content-box;<br>    margin: auto;<br>  &#125;<br><br>  .img-content_-1 &#123;<br>    width: 57px;<br>    height: 57px;<br>    padding-top: 156px;<br>    box-sizing: content-box;<br>    margin: auto;<br>  &#125;<br><br>  .txt &#123;<br>    font-size: 14px;<br>    font-weight: 400;<br>    color: #ffffff;<br>    line-height: 20px;<br>    margin-top: 13px;<br>  &#125;<br><br>  .img-content &#123;<br>    width: 100%;<br>    height: 100%;<br>    object-fit: cover;<br>  &#125;<br><br>  .watermark &#123;<br>    position: absolute;<br>    right: 7px;<br>    bottom: 10px;<br>    width: 79px;<br>    height: 22px;<br>  &#125;<br>&#125;<br><br>.gallery-thumbs &#123;<br>  height: 62px;<br>  box-sizing: border-box;<br>  padding: 8px 0;<br>  overflow-x: scroll;<br>  overflow-y: hidden;<br><br>  &amp;::-webkit-scrollbar &#123;<br>    display: none;<br>    width: 0;<br>    height: 0;<br>  &#125;<br><br>  &amp;.no-scroll &#123;<br>    display: flex;<br>    justify-content: center;<br>  &#125;<br><br>  .thumb-wrap &#123;<br>    display: flex;<br>  &#125;<br><br>  .img-thumb &#123;<br>    display: inline-block;<br>    width: 46px;<br>    height: 46px;<br>    border-radius: 6px;<br>    overflow: hidden;<br>    margin-right: 8px;<br>    flex-shrink: 0;<br>    box-sizing: border-box;<br><br>    .img-content &#123;<br>      width: 100%;<br>      height: 100%;<br>      object-fit: cover;<br>    &#125;<br>  &#125;<br><br>  .img-thumb-active &#123;<br>    border: 2px solid #3269ff;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li>图片的预览实现起来本身并不复杂，还是利用 swiper 组件，但一些细节点需要注意：</li></ol><ul><li>高度自适应尽量不要用 fit-content 而是 auto，因为在 iOS 系统，部分机型不支持这个属性</li><li>需要监听从图片展示模块传输的当前图片的 index，操作预览模块的 swiper 跳到该 index 的位置</li><li>点击事件不要挂在 swiper 和 swiper-slide 组件上，否则无法生效</li><li>为防止滚动查看预览弹窗时后面页面滚动，需要改变body的样式</li></ul><p>最终预览模块的实现大致如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;preview-list-container&quot; v-show=&quot;modalVisible&quot;&gt;<br>    &lt;!-- swiper1 --&gt;<br>    &lt;swiper<br>      class=&quot;swiper gallery-top&quot;<br>      :options=&quot;swiperOptionTop&quot;<br>      ref=&quot;swiperTop&quot;<br>      @slideChange=&quot;onSlideChange&quot;<br>    &gt;<br>      &lt;swiper-slide class=&quot;img-slide&quot; v-for=&quot;(item, idx) in imgList&quot; :key=&quot;idx&quot;&gt;<br>        &lt;div class=&quot;img-container&quot; @click=&quot;hidden&quot;&gt;<br>          &lt;div class=&quot;img-wrap&quot;&gt;<br>            &lt;img :src=&quot;item.url&quot; class=&quot;img-content&quot; /&gt;<br>          &lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/swiper-slide&gt;<br>    &lt;/swiper&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; Swiper, SwiperSlide &#125; from &quot;vue-awesome-swiper&quot;;<br>import &quot;swiper/css/swiper.css&quot;;<br><br>export default &#123;<br>  name: &quot;img-preview&quot;,<br>  props: &#123;<br>    imgList: &#123;<br>      type: Array,<br>      default: [],<br>    &#125;,<br>    currentIdx: &#123;<br>      type: Number,<br>      default: 0,<br>    &#125;,<br>  &#125;,<br>  components: &#123;<br>    Swiper,<br>    SwiperSlide,<br>  &#125;,<br>  watch: &#123;<br>    currentIdx: &#123;<br>      handler(newVal) &#123;<br>        this.activeIndex = newVal;<br>        this.swiperTop.slideTo(this.activeIndex);<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>  data() &#123;<br>    return &#123;<br>      swiperOptionTop: &#123;<br>        loop: false,<br>        loopedSlides: this.imgList.length,<br>        spaceBetween: 10,<br>      &#125;,<br>      swiperTop: null,<br>      activeIndex: 0,<br>      modalVisible: false,<br>    &#125;;<br>  &#125;,<br>  created() &#123;<br>    this.activeIndex = this.currentIdx;<br>  &#125;,<br>  mounted() &#123;<br>    this.$nextTick(() =&gt; &#123;<br>      this.swiperTop = this.$refs.swiperTop.$swiper;<br>    &#125;);<br>  &#125;,<br>  methods: &#123;<br>    onSlideChange() &#123;<br>      this.activeIndex = this.swiperTop.activeIndex;<br>    &#125;,<br>    show() &#123;<br>      this.modalVisible = true;<br>      document.body.style.overflow = &quot;hidden&quot;;<br>    &#125;,<br>    hidden() &#123;<br>      this.modalVisible = false;<br>      document.body.style.overflow = &quot;&quot;;<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>.preview-list-container &#123;<br>  position: fixed;<br>  width: 100%;<br>  height: 100vh;<br>  left: 0;<br>  top: 0;<br>  background: #000;<br>  z-index: 2000;<br><br>  .img-wrap &#123;<br>    position: relative;<br>    width: 100%;<br>  &#125;<br><br>  .toolkit-container &#123;<br>    position: fixed;<br>    left: 0;<br>    bottom: 0;<br>    width: 100%;<br>    padding: 15px 24px 48px;<br>    background: rgba(0, 0, 0, 0.5);<br>    display: flex;<br>    justify-content: space-between;<br>    align-items: center;<br>    color: #fff;<br>    font-size: 16px;<br>    line-height: 22px;<br>    z-index: 999;<br><br>    .toolkit-wrap &#123;<br>      display: flex;<br><br>      .toolkit &#123;<br>        display: flex;<br>        align-items: center;<br>        margin-left: 32px;<br><br>        .icon &#123;<br>          width: 16px;<br>          height: 16px;<br>          object-fit: contain;<br>          margin-right: 4px;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br>.swiper &#123;<br>  .swiper-slide &#123;<br>    background-size: cover;<br>    background-position: center;<br>  &#125;<br><br>  &amp;.gallery-top &#123;<br>    width: 100%;<br>    height: 100vh;<br><br>    .img-container &#123;<br>      width: 100%;<br>      height: 100vh;<br>      display: flex;<br>      align-items: center;<br>      overflow-y: scroll;<br>    &#125;<br><br>    .watermark &#123;<br>      position: absolute;<br>      right: 7px;<br>      bottom: 10px;<br>      width: 79px;<br>      height: 22px;<br>    &#125;<br><br>    .img-content &#123;<br>      width: 100%;<br>      height: auto;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>（1）<a href="https://segmentfault.com/a/1190000041886147">详细介绍 scrollIntoView 方法</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单记录一下做需求时遇到的问题和思考&lt;/p&gt;</summary>
    
    
    
    <category term="工作技巧" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="WEB API" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/WEB-API/"/>
    
  </entry>
  
  <entry>
    <title>移动端开发时的系统兼容性问题</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2023/10/27/iosCompat/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2023/10/27/iosCompat/</id>
    <published>2023-10-27T13:10:36.000Z</published>
    <updated>2025-02-13T02:29:42.320Z</updated>
    
    <content type="html"><![CDATA[<p>吐槽一下移动端开发时碰到的各种意想不到的兼容性问题。有系统的问题，例如 iOS 和安卓的区别；也有浏览器区别，不同商家的浏览器设计也是差别很大的</p><span id="more"></span><h1 id="浏览器篇"><a href="#浏览器篇" class="headerlink" title="浏览器篇"></a>浏览器篇</h1><h2 id="问题-1-ios-系统输入框-disabled-状态样式过浅"><a href="#问题-1-ios-系统输入框-disabled-状态样式过浅" class="headerlink" title="问题 1: ios 系统输入框 disabled 状态样式过浅"></a>问题 1: ios 系统输入框 disabled 状态样式过浅</h2><p>解决方法：增加 -webkit-text-fill-color 属性配置以及要调整 opacity。如下示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">textarea</span><span class="hljs-selector-pseudo">:disabled</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">1</span>);<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>  -webkit-text-fill-<span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="问题-2-安卓移动端软键盘弹出时底部-fixed-定位被顶上去"><a href="#问题-2-安卓移动端软键盘弹出时底部-fixed-定位被顶上去" class="headerlink" title="问题 2:安卓移动端软键盘弹出时底部 fixed 定位被顶上去"></a>问题 2:安卓移动端软键盘弹出时底部 fixed 定位被顶上去</h2><p>原因是安卓系统和 ios 系统加载键盘的方式不同<br>解决方法：window.onresize 监听页面高度的变化，手动来控制吸底组件的显示和隐藏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;footer&quot; v-show=&quot;hideshow&quot;&gt;&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      docmHeight: &quot;&quot;, //第一次获取高度<br>      nowHeight: &quot;&quot;,<br>      hideshow: true,<br>      isResize: false,<br>    &#125;;<br>  &#125;,<br>  watch: &#123;<br>    // 如果 clientHeight 发生改变，这个函数就会运行<br>    nowHeight: function () &#123;<br>      if (this.docmHeight != this.nowHeight) &#123;<br>        this.hideshow = false;<br>      &#125; else &#123;<br>        this.hideshow = true;<br>      &#125;<br>    &#125;,<br>  &#125;,<br>  mounted() &#123;<br>    // 获取浏览器可视区域高度<br>    this.docmHeight = document.documentElement.clientHeight; // document.body.clientWidth;<br>    window.onresize = () =&gt; &#123;<br>      // 在窗口或框架被调整大小时触发<br>      return (() =&gt; &#123;<br>        this.nowHeight = document.documentElement.clientHeight;<br>        console.log(&quot;当前高度&quot;, this.nowHeight);<br>      &#125;)();<br>    &#125;;<br>  &#125;,<br>  methods: &#123;&#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><em>个人碎碎念：其实我觉得这个方法并不好，有的手机支持横屏，横屏时页面肯定会触发 resize 事件，然后底部组件消失了？毕竟 mounted 生命周期不会再次触发。之前自己想的是键盘弹起事件和 input 组件聚焦强关联，把隐藏底部组件的触发时机放在聚焦上。但此时遇到较真的产品就会认为页面滚动时应该让 input 失焦，但浏览器并不会实现这个效果，逻辑的实现又十分复杂。所以最好的解决方案就是换个设计吧。。。</em></p><h2 id="问题-3-针对整个屏幕竖直居中的图片在-ios-的-Safari-和-Chrome-浏览器不居中"><a href="#问题-3-针对整个屏幕竖直居中的图片在-ios-的-Safari-和-Chrome-浏览器不居中" class="headerlink" title="问题 3: 针对整个屏幕竖直居中的图片在 ios 的 Safari 和 Chrome 浏览器不居中"></a>问题 3: 针对整个屏幕竖直居中的图片在 ios 的 Safari 和 Chrome 浏览器不居中</h2><p>原因：书写样式时父元素的高度设置为 100vh，也就是屏幕高度，而 Safari 和 Chrome 都有工具栏，在工具栏显示的情况下看起来就不怎么竖直居中了。其实这是 100vh 的一个 bug，可以详见<a href="https://juejin.cn/post/7313979304513552435">这篇文章</a><br>解决方法：外层父元素高度设置为 100%，因为 position 的设置该元素已经脱离了原本文本流、基准变为视口，高度设置为 100%也不会出现撑不起高度的情况，会依照视口高度定值；虽然 document.documentElement.clientHeight 和 window.innerHeight 可获取可视高度，但 Safari 的工具栏是下滑时可隐藏的，所以需要反复监听高度进行调整也比较麻烦</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.modal-container</span> &#123;<br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#000</span>;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">2000</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="问题-4-小米浏览器夜间模式白色图片发黑"><a href="#问题-4-小米浏览器夜间模式白色图片发黑" class="headerlink" title="问题 4:小米浏览器夜间模式白色图片发黑"></a>问题 4:小米浏览器夜间模式白色图片发黑</h2><p>原因：好像是特定的浏览器版本，会在夜间模式对白色图片进行反色<br>反色原理接近<code>filter: invert(110%) hue-rotate(180deg)</code>，但实际操作时按这个方法反色回去发现透明部分也被反色了，所以可能 filter 的方法还缺少参数<br>解决方法：一个可能性比较高的解决方法是：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">prefers-color-scheme</span>: dark) &#123;<br>  <span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">filter</span>: none <span class="hljs-meta">!important</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样可以去除夜间模式的过滤器效果</p><h2 id="问题-5-使用-vue-lazyload-懒加载图片流时，安卓手机会出现某一页面的第一帧图片流呈加载态，只有滚动后才变为有图片的情况"><a href="#问题-5-使用-vue-lazyload-懒加载图片流时，安卓手机会出现某一页面的第一帧图片流呈加载态，只有滚动后才变为有图片的情况" class="headerlink" title="问题 5:使用 vue-lazyload 懒加载图片流时，安卓手机会出现某一页面的第一帧图片流呈加载态，只有滚动后才变为有图片的情况"></a>问题 5:使用 vue-lazyload 懒加载图片流时，安卓手机会出现某一页面的第一帧图片流呈加载态，只有滚动后才变为有图片的情况</h2><p>原因：不是很明了，可能与<a href="https://juejin.cn/post/7015142066145460231">这篇文章</a>说的有关系，iOS 会触发 resize 事件，android 不会。<br>解决方法：在页面加载或者激活的生命周期加一个滚动函数，滚 1px，触发加载</p><h2 id="问题-6-粘贴板功能在部分环境失效"><a href="#问题-6-粘贴板功能在部分环境失效" class="headerlink" title="问题 6:粘贴板功能在部分环境失效"></a>问题 6:粘贴板功能在部分环境失效</h2><p>原因：粘贴板使用的是 navigator.clipboard，该方法在 iOS 或比较先进的浏览器才会生效，而微信小程序安卓 webview 环境下使用用这个方法会报错<br>解决方法：增加 navigator.clipboard 的 api 使用检查和设备识别，如果不存在该 api 则使用 npm 包 copy-to-clipboard 的方法</p><h2 id="问题-7-安卓-qq-浏览器点击图片会自动放大"><a href="#问题-7-安卓-qq-浏览器点击图片会自动放大" class="headerlink" title="问题 7:安卓 qq 浏览器点击图片会自动放大"></a>问题 7:安卓 qq 浏览器点击图片会自动放大</h2><p>原因：qq 浏览器的自发行为（就跟他有时候会自动屏蔽 ad-wrap 的元素一样离谱）<br>解决方法：使用 css 样式 pointer-events: none;可以阻止浏览器默认行为，但是如果希望保留一些浏览器默认行为如长按保存就不能使用该样式</p><h2 id="问题-8-ios-的-safari-下拉页面时页面外区域是黑的"><a href="#问题-8-ios-的-safari-下拉页面时页面外区域是黑的" class="headerlink" title="问题 8:ios 的 safari 下拉页面时页面外区域是黑的"></a>问题 8:ios 的 safari 下拉页面时页面外区域是黑的</h2><p>原因：和 meta 上设置的 theme color 有关<br>解决方法：document.querySelector(‘meta[name&#x3D;”theme-color”]’).setAttribute(‘content’, bgColor || “#141416”)</p><h2 id="问题-9-ios-部分机型-border-radius-和-overflow：hidden-样式不生效"><a href="#问题-9-ios-部分机型-border-radius-和-overflow：hidden-样式不生效" class="headerlink" title="问题 9:ios 部分机型 border-radius 和 overflow：hidden 样式不生效"></a>问题 9:ios 部分机型 border-radius 和 overflow：hidden 样式不生效</h2><p>原因：根据<a href="https://juejin.cn/post/7372396174249459750">这篇文章</a>应该是因为 ios 手机会在 transform 的时候导致 border-radius 失效<br>解决方法：1.按照文章的改法、使用动画效果带 transform 的元素的上一级 div 元素的 css 加上语句<code>-webkit-transform:rotate(0deg);</code><br>；2.将圆角样式加到内容器而不是带 transform 样式的外容器</p><h2 id="问题-10-iPhone-16-部分条件判断效果与其他机型不一样"><a href="#问题-10-iPhone-16-部分条件判断效果与其他机型不一样" class="headerlink" title="问题 10: iPhone 16 部分条件判断效果与其他机型不一样"></a>问题 10: iPhone 16 部分条件判断效果与其他机型不一样</h2><p>原因：不明，网上几乎没有资料，表现上好像是不是很支持链式判断符，有可能会把接收到空数组变成其他？<br>解决方法：没有什么具体的方法，现在只能根据现象推测可能的问题。例如<code>extra?.list?.length? true : false</code>改成<code>Array.isArray(extra?.list) &amp;&amp; extra.list.length &gt; 0? true : false</code></p><h2 id="问题-11-ios-自动高度带滚动的-textarea-在输入需要转行时没有滚动到最新一行；安卓则是完全不会自动滚动到输入的最新行"><a href="#问题-11-ios-自动高度带滚动的-textarea-在输入需要转行时没有滚动到最新一行；安卓则是完全不会自动滚动到输入的最新行" class="headerlink" title="问题 11: ios 自动高度带滚动的 textarea 在输入需要转行时没有滚动到最新一行；安卓则是完全不会自动滚动到输入的最新行"></a>问题 11: ios 自动高度带滚动的 textarea 在输入需要转行时没有滚动到最新一行；安卓则是完全不会自动滚动到输入的最新行</h2><p>原因：ios 应该是监听了行数变化进行的滚动，而在中文输入法时存在一个输入到确认的时间，在这个时间内 ios 已经完成了行数监听的滚动；安卓没有这种监听<br>解决方法：监听输入内容而不是行数变化，设置滚动高度时应该在原本的 scrollHeight 上增加一些行高，以防此时 ios 的滚动高度不包括或低于输入内容高度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-title function_">inputValue</span>(<span class="hljs-params">_new</span>) &#123;<br>      <span class="hljs-keyword">const</span> target = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;textArea&#x27;</span>);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target.<span class="hljs-property">scrollHeight</span>, target.<span class="hljs-property">clientHeight</span>);<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        target.<span class="hljs-property">scrollTop</span> = target.<span class="hljs-property">scrollHeight</span> + <span class="hljs-number">42</span>;<br>      &#125;);<br>    &#125;,<br>  &#125;,<br></code></pre></td></tr></table></figure><h2 id="问题-12-部分模块在-uc-浏览器不显示"><a href="#问题-12-部分模块在-uc-浏览器不显示" class="headerlink" title="问题 12:部分模块在 uc 浏览器不显示"></a>问题 12:部分模块在 uc 浏览器不显示</h2><p><strong>原因</strong>：uc 浏览器内置样式文件，与自定义的样式文件存在覆盖关系。例如如果模块命名为 ad-wrap，则该模块会被强制隐藏。</p><h2 id="问题-13-使用-em-为单位的模块在-qq-浏览器上比例失效"><a href="#问题-13-使用-em-为单位的模块在-qq-浏览器上比例失效" class="headerlink" title="问题 13:使用 em 为单位的模块在 qq 浏览器上比例失效"></a>问题 13:使用 em 为单位的模块在 qq 浏览器上比例失效</h2><p><strong>原因</strong>：父元素的 font-size 的赋值问题。有的浏览器会存在最小 font-size，小于该阈值则设置无效。qq 浏览器下 font-size 最小 8px，所以父元素的 font-size 的设置不能小于 8px</p><p><del>如果不是老项目的旧样式太多太难改了还是尽可能的用 vw 吧</del></p><h2 id="问题-14-输入框使用-keydown-enter-时回车操作键盘不会隐藏、对展示搜索结果有影响"><a href="#问题-14-输入框使用-keydown-enter-时回车操作键盘不会隐藏、对展示搜索结果有影响" class="headerlink" title="问题 14:输入框使用@keydown.enter 时回车操作键盘不会隐藏、对展示搜索结果有影响"></a>问题 14:输入框使用@keydown.enter 时回车操作键盘不会隐藏、对展示搜索结果有影响</h2><p><strong>原因</strong>：不明<br><strong>解决方式</strong>：使用 ref 方法，改为监听 keyup 事件，如果监听到 event.keyCode &#x3D;&#x3D; 13 进行后续操作，同时在之前的回调函数中增加 this.$refs.searchInput.blur()手动失焦</p><h2 id="问题-15-手机熄屏后设置的定时器无法生效"><a href="#问题-15-手机熄屏后设置的定时器无法生效" class="headerlink" title="问题 15:手机熄屏后设置的定时器无法生效"></a>问题 15:手机熄屏后设置的定时器无法生效</h2><p>原因：根据<a href="https://blog.csdn.net/thirteen_king13/article/details/114077815">这篇文章</a>，这是系统固有特性<br>解决方法：监听事件 visibilitychange，锁屏就记录时间，再次显示时记录此时时间，与之前设置的时间间隔比较，超出则立即执行，没有则设置一个新时间间隔的定时器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;visibilitychange&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;visibilitychange&quot;</span>);<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">winVisible</span>) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-comment">// hidden 为锁屏隐藏状态，visible为重新显示状态</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">visibilityState</span> === <span class="hljs-string">&quot;hidden&quot;</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">screenShutdownTime</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();<br>    <span class="hljs-built_in">clearTimeout</span>(showIntroTimer);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">visibilityState</span> === <span class="hljs-string">&quot;visible&quot;</span>) &#123;<br>    <span class="hljs-keyword">let</span> screenShowTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();<br>    <span class="hljs-keyword">const</span> diffTime = screenShowTime - <span class="hljs-variable language_">this</span>.<span class="hljs-property">screenShutdownTime</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">countTime</span> = <span class="hljs-built_in">parseInt</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">countTime</span>) - diffTime;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">countTime</span> &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// 重新赋值，间隔后的新的定时器时间</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initTimer</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 已经超出范围，则默认秒数已经读完</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">countTime</span> = <span class="hljs-number">0</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initTimer</span>();<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="小程序篇"><a href="#小程序篇" class="headerlink" title="小程序篇"></a>小程序篇</h1><h2 id="问题-1-弹窗滚动穿透问题（即弹窗出现时页面还可以做滚动操作）"><a href="#问题-1-弹窗滚动穿透问题（即弹窗出现时页面还可以做滚动操作）" class="headerlink" title="问题 1: 弹窗滚动穿透问题（即弹窗出现时页面还可以做滚动操作）"></a>问题 1: 弹窗滚动穿透问题（即弹窗出现时页面还可以做滚动操作）</h2><p>解决方法：跟使用的技术及小程序平台有关，如果只有<a href="https://developers.weixin.qq.com/community/develop/doc/d615c9a8957a00225ae66b65a8c2bd01?highLine=%25E6%25BB%259A%25E5%258A%25A8%25E7%25A9%25BF%25E9%2580%258F">微信小程序</a>可以用官方提供的 page-meta，或者在弹窗上增加 catchtouchmove 属性；如果使用了跨端框架（例如<a href="https://taro-docs.jd.com/docs/vue-overall#taro-3-%E5%9C%A8%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AB%AF%E7%9A%84%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6">Taro</a>），可能这些属性不生效，只能通过改变页面样式如固定高度、溢出隐藏等来禁止页面的滚动</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;吐槽一下移动端开发时碰到的各种意想不到的兼容性问题。有系统的问题，例如 iOS 和安卓的区别；也有浏览器区别，不同商家的浏览器设计也是差别很大的&lt;/p&gt;</summary>
    
    
    
    <category term="踩坑经历" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E8%B8%A9%E5%9D%91%E7%BB%8F%E5%8E%86/"/>
    
    
    <category term="iOS" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/iOS/"/>
    
    <category term="Android" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/Android/"/>
    
  </entry>
  
</feed>
