<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小白的文件整理箱</title>
  
  
  <link href="https://unkonwn404.github.io/unknown404.github.io/atom.xml" rel="self"/>
  
  <link href="https://unkonwn404.github.io/unknown404.github.io/"/>
  <updated>2024-09-25T06:32:35.807Z</updated>
  <id>https://unkonwn404.github.io/unknown404.github.io/</id>
  
  <author>
    <name>小白的文件整理箱</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AGI基础概念总结</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/09/11/agiStart/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/09/11/agiStart/</id>
    <published>2024-09-11T09:08:59.000Z</published>
    <updated>2024-09-25T06:32:35.807Z</updated>
    
    <content type="html"><![CDATA[<p>自 chatgpt 面世以来，ai 相关的产品层出不穷，如何用好 ai、让它更好的为自己服务也是一大新课题。</p><span id="more"></span><h2 id="Agent"><a href="#Agent" class="headerlink" title="Agent"></a>Agent</h2><h3 id="什么是-Agent（代理-x2F-智能体）"><a href="#什么是-Agent（代理-x2F-智能体）" class="headerlink" title="什么是 Agent（代理&#x2F;智能体）"></a>什么是 Agent（代理&#x2F;智能体）</h3><p>Agent，可以翻译为代理或者智能体。在 AGI 领域，则指的是一个通过传感器&#x2F;计算器感知其环境、做出决策并相应地响应的主体。</p><h3 id="Agent-发展史"><a href="#Agent-发展史" class="headerlink" title="Agent 发展史"></a>Agent 发展史</h3><p>简单来说 Agent 不是现在才有的概念，早期的 Agent 依赖于制定的类似 ifelse 语句进行决策，后来基于强化学习的 Agent 的代表性产品——AlphaGo 出名后，人们将精力放在深度学习以及出现后深度神经网络来训练 Agent 学习复杂的策略。</p><p>而近年来，大型语言模型（LLM）非常火热，潜力巨大。因此，一个新的研究领域已经出现，使用 LLM 作为 Agent 的核心控制器。</p><h3 id="基于-LLM-的-Agent-的架构"><a href="#基于-LLM-的-Agent-的架构" class="headerlink" title="基于 LLM 的 Agent 的架构"></a>基于 LLM 的 Agent 的架构</h3><p>大致可以拆分为大模型、规划、记忆与工具使用四个组件部分。</p><h4 id="大模型"><a href="#大模型" class="headerlink" title="大模型"></a>大模型</h4><p>LLM 是 Agent 的核心组件，基于 GPT-3、GPT-4 或类似的大型语言模型。LLM 负责处理自然语言理解（NLU）和自然语言生成（NLG），与用户进行对话，回答问题，生成文本等。</p><h4 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h4><p>LLM 具备逻辑推理能力，但对于复杂的问题难以给出正确的答案，因为用户使用的 prompt（提示语）不合适，导致大模型直接给出了关联度高的字词。一项复杂的任务往往涉及许多步骤。AI Agent 需要首先拆解这些步骤，进行多步推理。<br>当下普遍的技术模式包括思维链和思维树。</p><h4 id="记忆"><a href="#记忆" class="headerlink" title="记忆"></a>记忆</h4><p>记忆模块负责存储信息，包括过去的交互、学习到的知识，甚至是临时的任务信息。<br>在 LLM 中，记忆模块仿照了人类的记忆模式：短期记忆指 transformer 架构限制的上下文窗口内的输入信息；长期记忆类似于外部向量存储</p><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p>AI Agent 与大模型的一大区别在于能够使用外部工具拓展模型能力。LLM 本身虽然强大，但也会有局限。因此，Agent 通常会与外部工具和 API 进行集成。插件系统允许 Agent 调用各种外部服务，如数据库查询、调用 Web API，甚至是与物理设备交互（如 IoT 设备）。<br>以 openAI 的 chatgpt 为例，其训练数据只截止到了 2021 年底，对于更新一些的知识内容它无法直接做出回答。后来 openAI 发布了 FunctionCall 模式，大概就是写一份规则，让 chatgpt 知道什么时候去调用外部工具。</p><h3 id="Agent-应用"><a href="#Agent-应用" class="headerlink" title="Agent 应用"></a>Agent 应用</h3><p>目前各大企业都提供了制作 agent 的平台，比较有名的有字节的 coze、钉钉的AI助理、Dify等，主要可以分为以下几类</p><h4 id="AI-插件"><a href="#AI-插件" class="headerlink" title="AI+插件"></a>AI+插件</h4><p>特点：提供为模型写人设（即 prompt）的功能，可替换模型、添加插件、数据库，以及配置好后的对话调试</p><h4 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h4><p>特点：可以设置节点，处理一些复杂的任务：例如实现跳转和循环、根据多次输入的内容进行作答的场景；对不同类问题的回答有不同的输出格式要求的场景</p><h2 id="prompt"><a href="#prompt" class="headerlink" title="prompt"></a>prompt</h2><h3 id="什么是-prompt（提示词）？"><a href="#什么是-prompt（提示词）？" class="headerlink" title="什么是 prompt（提示词）？"></a>什么是 prompt（提示词）？</h3><p>提示词在人工智能领域是一种特定的输入，用于激发 AI 系统进行特定的思考或行为。它们可以是问题、指令或描述，旨在引导 AI 理解用户的意图并作出相应的反应。提示词的设计需要考虑到 AI 的理解和生成能力，确保它们能够激发出期望的输出</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>（1）<a href="https://juejin.cn/post/7359119142786154546">全面讲解基于大型语言模型的智能 Agent：发展历程、架构与基于 Langchain 的实现 demo</a><br>（2）<a href="https://agijuejin.feishu.cn/wiki/F1jPwKffhiXedTkp26bcFuQInQb">十种 agent 工具，多种思路</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;自 chatgpt 面世以来，ai 相关的产品层出不穷，如何用好 ai、让它更好的为自己服务也是一大新课题。&lt;/p&gt;</summary>
    
    
    
    <category term="技术学习" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="AGI" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/AGI/"/>
    
  </entry>
  
  <entry>
    <title>vite小记</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/09/02/vite/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/09/02/vite/</id>
    <published>2024-09-02T07:36:19.000Z</published>
    <updated>2024-09-09T06:41:20.140Z</updated>
    
    <content type="html"><![CDATA[<p>记录一点 vite 的小知识</p><span id="more"></span><h2 id="什么是-vite"><a href="#什么是-vite" class="headerlink" title="什么是 vite"></a>什么是 vite</h2><p>一个新型前端构建工具，构建速度快于 webpack</p><h2 id="概念区分：vite、webpack、vue-cli、create-vue"><a href="#概念区分：vite、webpack、vue-cli、create-vue" class="headerlink" title="概念区分：vite、webpack、vue-cli、create-vue"></a>概念区分：vite、webpack、vue-cli、create-vue</h2><p>vue-cli、create-vue 都属于脚手架，作用是创建项目，选择性安装需要的插件，指定统一的风格，生成示例代码。区别在于：vue-cli 用于创建 vue2 的项目，使用 webpack 创建；create-vue 是 Vue3 的专用脚手架，使用 vite 创建。</p><p>webpack 属于打包代码：代码写好之后，为了更好的使用，需要打包处理一下。配置文件的 output 就是预期处理的结果</p><p>vite 属于构建项目：建立项目的运行环境，需要手动安装插件。打包代码只是构建项目的一环</p><h2 id="vite-特点"><a href="#vite-特点" class="headerlink" title="vite 特点"></a>vite 特点</h2><ul><li>开发环境：使用 esbuild 打包代码，基于 原生 ES 模块 提供了 丰富的内建功能，如速度快到惊人的 模块热更新（HMR）</li><li>生产环境：使用 Rollup 打包代码，可预配置，最终输出用于生产环境的高度优化过的静态资源</li><li>插件生态：通过其 插件 API 和 JavaScript API 进行扩展，并提供完整的类型支持。例如支持 React、TypeScript</li></ul><h3 id="vite-快速启动原因"><a href="#vite-快速启动原因" class="headerlink" title="vite 快速启动原因"></a>vite 快速启动原因</h3><ol><li>预构建：vite 会对 package.json 中的 dependencies 部分先进行构建，然后把构建后的文件换存在 node_modules&#x2F;.vite 文件夹中，当启动项目时，直接请求该缓存内容。</li><li>esbuild：vite 利用了目前大部分浏览器都支持 es 模块化语法的特性，直接引入需要的 es 模块代码；es 模块具有动态引入的特点，实现了按需加载，因此页面的加载速度就提升了。</li><li>热更新打包：不会像webpack一样更改了单个文件就重新打包后再传给server，而是监听到模块变化后让浏览器重新请求该模块</li></ol><h3 id="vite的风险"><a href="#vite的风险" class="headerlink" title="vite的风险"></a>vite的风险</h3><ol><li>开发环境和线上环境的打包方式不一样，所以可能会出现线上版展示效果与开发版不一致的情况</li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>（1）<a href="https://juejin.cn/post/7095603836072493086?searchId=20240902144719D7C75F0E69B15A07B83B">一篇文章说清 webpack、vite、vue-cli、create-vue 的区别</a><br>（2）<a href="https://juejin.cn/post/7095603836072493086?searchId=20240902144719D7C75F0E69B15A07B83B">一篇文章说清 webpack、vite、vue-cli、create-vue 的区别</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一点 vite 的小知识&lt;/p&gt;</summary>
    
    
    
    <category term="前端技术体系" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/"/>
    
    
    <category term="前端打包工具" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/%E5%89%8D%E7%AB%AF%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Taro项目开发中的问题总结</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/08/22/taroBug/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/08/22/taroBug/</id>
    <published>2024-08-22T09:51:18.000Z</published>
    <updated>2024-08-28T02:50:39.628Z</updated>
    
    <content type="html"><![CDATA[<p>最近领导迷恋上了跨端开发，把以前的一个项目迁移成 Taro 了。中间踩了不少奇奇怪怪的坑，终于忍不住列出来吐槽了。</p><span id="more"></span><h2 id="1-样式设置为-scoped-无法生效"><a href="#1-样式设置为-scoped-无法生效" class="headerlink" title="1. 样式设置为 scoped 无法生效"></a>1. 样式设置为 scoped 无法生效</h2><p>这好像没什么解决方法，自己写 scss 的时候小心点吧</p><h2 id="2-Taro-redirectTo-url-“-x2F-pages-x2F-404-x2F-index”-小程序跳转正常，h5-端报-page-x2F-wap-x2F-error-notfound"><a href="#2-Taro-redirectTo-url-“-x2F-pages-x2F-404-x2F-index”-小程序跳转正常，h5-端报-page-x2F-wap-x2F-error-notfound" class="headerlink" title="2. Taro.redirectTo({ url: “&#x2F;pages&#x2F;404&#x2F;index” });小程序跳转正常，h5 端报 page &#x2F;wap&#x2F;error notfound"></a>2. Taro.redirectTo({ url: “&#x2F;pages&#x2F;404&#x2F;index” });小程序跳转正常，h5 端报 page &#x2F;wap&#x2F;error notfound</h2><p>原因：配置文件里配置了 customRoutes: { ‘&#x2F;pages&#x2F;404&#x2F;index’: ‘&#x2F;error’ }<br>解决方法：去除 customRoutes 配置，h5 的这个配置好像只是改了个 path 名字，并不能做为 route 使用。</p><h2 id="3-百度小程序-first-child-的样式写法失效"><a href="#3-百度小程序-first-child-的样式写法失效" class="headerlink" title="3. 百度小程序 :first-child 的样式写法失效"></a>3. 百度小程序 :first-child 的样式写法失效</h2><p>原因：编译百度小程序的时候子元素外面都套了一层 dom，所以 first-child 对不上了<br>解决方法：改用 :first-of-type 或者在 template 代码加 class 判断条件</p><h2 id="4-H5-下，button-在-active-状态下有默认的白色背景"><a href="#4-H5-下，button-在-active-状态下有默认的白色背景" class="headerlink" title="4. H5 下，button 在 active 状态下有默认的白色背景"></a>4. H5 下，button 在 active 状态下有默认的白色背景</h2><p>设置 <code>&amp;:active &#123; background: none; &#125;</code> 关掉背景色</p><h2 id="5-mixins、extends-在-onShow、onHide-周期代码无法生效"><a href="#5-mixins、extends-在-onShow、onHide-周期代码无法生效" class="headerlink" title="5. mixins、extends 在 onShow、onHide 周期代码无法生效"></a>5. mixins、extends 在 onShow、onHide 周期代码无法生效</h2><p>原因：页面已经书写了 onShow 和 onHide 的代码，Taro 的代码扩展效果只限于 Vue 的几个生命周期<br>解决方法：手动在页面 onShow 和 onHide 添加目标逻辑</p><h2 id="6-eventCenter-监听-onShow-事件在-iOS-失效"><a href="#6-eventCenter-监听-onShow-事件在-iOS-失效" class="headerlink" title="6. eventCenter 监听 onShow 事件在 iOS 失效"></a>6. eventCenter 监听 onShow 事件在 iOS 失效</h2><p>原因：官方提供的监听示例代码为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; eventCenter, getCurrentInstance &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@tarojs/taro&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>    eventCenter.<span class="hljs-title function_">on</span>(<span class="hljs-title function_">getCurrentInstance</span>().<span class="hljs-property">router</span>.<span class="hljs-property">onShow</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;onShow&quot;</span>);<br>    &#125;);<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>实际 iOS 的 router 实例里没有 onShow，就算手动构造也仍然会在 iOS 部分页面监听失效</p><h2 id="7-抖音小程序-Button-唤起客服操作不生效"><a href="#7-抖音小程序-Button-唤起客服操作不生效" class="headerlink" title="7. 抖音小程序 Button 唤起客服操作不生效"></a>7. 抖音小程序 Button 唤起客服操作不生效</h2><p>原因：button 组件缺失 im 客服涉及的属性<br>解决方法：参考<a href="https://github.com/NervJS/taro/issues/14118">这个 issue</a>，使用插件@tarojs&#x2F;plugin-inject 这个插件，并在 config 文件里添加这个配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">plugins</span>: [<br>  [<br>    <span class="hljs-string">&quot;@tarojs/plugin-inject&quot;</span>,<br>    &#123;<br>      <span class="hljs-attr">components</span>: &#123;<br>        <span class="hljs-comment">// 给button组件添加自定义事件</span><br>        <span class="hljs-title class_">Button</span>: &#123;<br>          <span class="hljs-string">&quot;data-im-id&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>          <span class="hljs-attr">dataImId</span>: <span class="hljs-string">&quot;&quot;</span>,<br>          <span class="hljs-attr">dataImType</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// im卡片类型</span><br>          <span class="hljs-string">&quot;data-im-type&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>          <span class="hljs-attr">dataGoodsId</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// 商品id</span><br>          <span class="hljs-string">&quot;data-goods-id&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>          <span class="hljs-attr">dataBizLine</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// 类型</span><br>          <span class="hljs-string">&quot;data-biz-line&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// 类型</span><br>          <span class="hljs-attr">dataOrderId</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// 订单id</span><br>          <span class="hljs-string">&quot;data-order-id&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>          <span class="hljs-attr">bindim</span>: <span class="hljs-string">&quot;&#x27;eh&#x27;&quot;</span>, <span class="hljs-comment">// 监听跳转IM的成功回调</span><br>          <span class="hljs-attr">bindIm</span>: <span class="hljs-string">&quot;&#x27;eh&#x27;&quot;</span>, <span class="hljs-comment">// 监听跳转IM的成功回调</span><br>          <span class="hljs-attr">binderror</span>: <span class="hljs-string">&quot;&#x27;eh&#x27;&quot;</span>, <span class="hljs-comment">// 监听跳转IM的失败回调</span><br>          <span class="hljs-attr">bindError</span>: <span class="hljs-string">&quot;&#x27;eh&quot;</span>, <span class="hljs-comment">// 监听跳转IM的失败回调</span><br>        &#125;,<br>      &#125;,<br>    &#125;,<br>  ],<br>];<br></code></pre></td></tr></table></figure><p>使用 Vue 组件书写时格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;button<br>  open-type=&quot;im&quot;<br>  dataImId=&quot;123456&quot;<br>  :onIm=&quot;imCallback&quot;<br>  :onError=&quot;onimError&quot;<br>&gt;<br>联系客服<br>&lt;/button&gt;<br></code></pre></td></tr></table></figure><h2 id="8-h5-页面跳转使用-navigateTo、redirectTo-会失败"><a href="#8-h5-页面跳转使用-navigateTo、redirectTo-会失败" class="headerlink" title="8. h5 页面跳转使用 navigateTo、redirectTo 会失败"></a>8. h5 页面跳转使用 navigateTo、redirectTo 会失败</h2><p>原因：跳转目标带参数且用 customRoute 改写过路径<br>解决方法：？？？基本没有，当时官方说后续版本修复，但实际如果使用这些 API 跳转在 wap 上的效果是创建了一个页面而不是像 spa 的跳转，也就是说如果连续点击跳转、就会创建好几个相同的页面</p><h2 id="9-配置打包环境变量后运行代码报错"><a href="#9-配置打包环境变量后运行代码报错" class="headerlink" title="9. 配置打包环境变量后运行代码报错"></a>9. 配置打包环境变量后运行代码报错</h2><p>原因：环境变量名只设置了双引号，而实际运行时 Taro 会对变量名做解析，所以需要写成如下格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">env</span>: &#123;<br>    <span class="hljs-attr">NODE_ENV</span>: <span class="hljs-string">&#x27;&quot;development&quot;&#x27;</span>, <span class="hljs-comment">// JSON.stringify(&#x27;development&#x27;)</span><br>    <span class="hljs-attr">TARO_APP_VERSION</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;process.env.TARO_ENV&#125;</span>_<span class="hljs-subst">$&#123;getTimeTag()&#125;</span>`</span>),<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>这个其实在<a href="https://docs.taro.zone/docs/next/config-detail#env">说明文档</a>里有反映出来，但这不合常规的设置居然一点解释都没有，差评。。。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近领导迷恋上了跨端开发，把以前的一个项目迁移成 Taro 了。中间踩了不少奇奇怪怪的坑，终于忍不住列出来吐槽了。&lt;/p&gt;</summary>
    
    
    
    <category term="踩坑经历" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E8%B8%A9%E5%9D%91%E7%BB%8F%E5%8E%86/"/>
    
    
    <category term="Taro" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/Taro/"/>
    
  </entry>
  
  <entry>
    <title>页面效果实现整理</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/08/13/pageStyle/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/08/13/pageStyle/</id>
    <published>2024-08-13T07:50:58.000Z</published>
    <updated>2024-10-26T13:49:14.034Z</updated>
    
    <content type="html"><![CDATA[<p>随手记一下一些页面效果实现小技巧</p><span id="more"></span><h2 id="打字机效果"><a href="#打字机效果" class="headerlink" title="打字机效果"></a>打字机效果</h2><p>单行文字的实现：主要是靠函数定时调用自身来实现每个文字的显示都存在时间间隔</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> text = <span class="hljs-string">&quot;Welcome to the Typing Effect!&quot;</span>;<br><span class="hljs-keyword">const</span> speed = <span class="hljs-number">100</span>; <span class="hljs-comment">// 打字速度（毫秒）</span><br><br><span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">typeWriter</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (i &lt; text.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;typewriter&quot;</span>).<span class="hljs-property">innerHTML</span> += text.<span class="hljs-title function_">charAt</span>(i);<br>    i++;<br>    <span class="hljs-built_in">setTimeout</span>(typeWriter, speed);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 开始打字效果</span><br><span class="hljs-title function_">typeWriter</span>();<br></code></pre></td></tr></table></figure><p>标题轮播打字效果实现：实现点包括打字的定时显示和标题的循环替换，打字的定时显示可以用 for 循环加 await、用定时器控制 Promise 状态完成的时间，等待 Promise 结束后，进入下一次循环，处理下一个字符直到标题字符完成；标题的循环替换也是靠函数定时调用自身来实现，注意在调用自身之前需要考虑标题数组循环到最后一个时的边界条件、以及需要重置展示标题的变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> currentItemIndex = <span class="hljs-number">0</span>,<br>  timer = <span class="hljs-literal">null</span>,<br>  titles = [<span class="hljs-string">&quot;test1&quot;</span>, <span class="hljs-string">&quot;test2&quot;</span>],<br>  currentItem = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">showNextItem</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (currentItemIndex &gt;= titleInfo.<span class="hljs-property">length</span>) currentItemIndex = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-comment">// 在打印下一项之前重置 currentItem</span><br>  currentItem = <span class="hljs-string">&quot;&quot;</span>;<br><br>  <span class="hljs-comment">// 开始打印下一项</span><br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">typeNextItem</span>();<br><br>  currentItemIndex++;<br>  timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">showNextItem</span>();<br>  &#125;, speed);<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">typeNextItem</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> currentLine = titles[currentItemIndex];<br>  <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>闪烁问题及报错问题解决</span><br>  <span class="hljs-keyword">if</span> (currentLine?.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> charIndex = <span class="hljs-number">0</span>; charIndex &lt; currentLine.<span class="hljs-property">length</span>; charIndex++) &#123;<br>    <span class="hljs-keyword">const</span> currentChar = currentLine[charIndex];<br>    currentItem += currentChar;<br><br>    <span class="hljs-comment">// 使用 Promise 等待打字速度</span><br>    <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, typingSpeed));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="浏览器刷新或者关闭时弹的提示弹窗"><a href="#浏览器刷新或者关闭时弹的提示弹窗" class="headerlink" title="浏览器刷新或者关闭时弹的提示弹窗"></a>浏览器刷新或者关闭时弹的提示弹窗</h2><p>当用户尝试刷新、关闭或离开当前页面时，可以使用 beforeunload 事件来触发一个提示弹窗。这种弹窗通常用于警告用户他们可能会丢失未保存的数据，例如在编辑表单或文档时。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;beforeunload&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-comment">// 检查用户是否有未保存的更改或其他需要提醒的条件</span><br>  <span class="hljs-keyword">const</span> shouldWarn = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 假设条件成立</span><br><br>  <span class="hljs-keyword">if</span> (shouldWarn) &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>(); <span class="hljs-comment">// 标准的阻止行为</span><br>    e.<span class="hljs-property">returnValue</span> = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 必须设置为非空值才能触发默认对话框</span><br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="组件扫光效果"><a href="#组件扫光效果" class="headerlink" title="组件扫光效果"></a>组件扫光效果</h2><p>CSS 扫光动画的原理很简单，就是一条斜向上 45deg 的线性渐变长方形从左到右的、无限循环的位移动画。需要我们创建一个伪元素，然后通过改变伪元素的位移来实现扫光动画了。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@keyframes</span> sweep &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">visibility</span>: visible;<br>    <span class="hljs-attribute">left</span>: -<span class="hljs-number">100%</span>;<br>  &#125;<br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">visibility</span>: hidden;<br>  &#125;<br>&#125;<br><span class="hljs-selector-class">.sheen-area</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  &amp;<span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">10%</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">180%</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">70%</span>;<br>    <span class="hljs-attribute">background</span>: linear-gradient(<br>      to bottom,<br>      rgba(<span class="hljs-number">229</span>, <span class="hljs-number">172</span>, <span class="hljs-number">142</span>, <span class="hljs-number">0</span>),<br>      rgba(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.5</span>) <span class="hljs-number">50%</span>,<br>      rgba(<span class="hljs-number">229</span>, <span class="hljs-number">172</span>, <span class="hljs-number">142</span>, <span class="hljs-number">0</span>)<br>    );<br>    <span class="hljs-attribute">transform</span>: rotate(<span class="hljs-number">60deg</span>);<br>    <span class="hljs-attribute">animation</span>: sweep <span class="hljs-number">1.4s</span> ease-in infinite;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面这段代码里 sheen-area 是容器，设置 overflow: hidden;隐藏扫光超出容器的部分，伪元素作为扫光条执行从左到右的动画。也可以像<a href="https://segmentfault.com/a/1190000045122864">这篇文章</a>一样设计动画</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;随手记一下一些页面效果实现小技巧&lt;/p&gt;</summary>
    
    
    
    <category term="工作技巧" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="JavaScript" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/JavaScript/"/>
    
    <category term="CSS" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/CSS/"/>
    
    <category term="canvas" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>工具随记</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/08/01/toolInfo/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/08/01/toolInfo/</id>
    <published>2024-08-01T09:20:18.000Z</published>
    <updated>2024-08-15T03:05:18.220Z</updated>
    
    <content type="html"><![CDATA[<p>随手记一下一些工具小技巧</p><span id="more"></span><h2 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h2><p>（一）接口数据 mock<br>Chrome 117 优化了本地覆盖功能，因此可以在没有访问权限的情况下，通过 Network 面板轻松模拟远程资源的响应头和网页内容。</p><p>要覆盖网页内容，需要打开 Network 面板，右键点击一个请求，然后选择“Override content”。在 DevTools 中会自动定位到 Sources 标签下请求的文件位置，修改后保存刷新即可 mock 成功。</p><p>如果要取消覆盖内容，仍然是 Sources 标签下操作：要暂时禁用覆盖，取消选中 Enable Local Overrides 复选框；要取消全部覆盖，则点击 Enable Local Overrides 选项右侧的 Clear 图标找到修改的文件位置；若取消单个覆盖，则是将修改的文件选中后右键点击，在菜单中选中删除</p><p>（二）手机 ua 模拟</p><h2 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h2><p>（一） 将 Postman 请求转换为 cURL</p><ol><li>打开 Postman 并选择你要转换的请求。</li><li>点击右上角的“Code”按钮（有时显示为 &lt;&#x2F;&gt; 图标）。</li><li>在弹出的窗口中选择“cURL”。</li><li>复制生成的 cURL 命令，可以将其粘贴到终端或命令行中执行。</li></ol><p>（二）读取 cURL 格式的请求</p><ol><li>打开 Postman。</li><li>点击左上角的“Import”按钮。</li><li>选择“Raw text”选项。</li><li>粘贴你的 cURL 命令，然后点击“Continue”。</li><li>点击“Import”按钮，Postman 会自动解析并导入该请求</li></ol><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p>（一）定位组件代码<br>npm 安装 click-to-react-component，在 main.tsx 引入：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom/client&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.tsx&#x27;</span><br><span class="hljs-comment">// @ts-ignore</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ClickToComponent</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;click-to-react-component&#x27;</span>;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)!).<span class="hljs-title function_">render</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ClickToComponent</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>)<br></code></pre></td></tr></table></figure><p>按住 option + 单击，就会直接打开它的对应的组件的源码；按住 option + 右键单击，可以看到它的所有父级组件</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>（1）<a href="https://juejin.cn/post/7374631918111178790">React 项目里，如何快速定位你的组件源码？</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;随手记一下一些工具小技巧&lt;/p&gt;</summary>
    
    
    
    <category term="工作技巧" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Postman" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/Postman/"/>
    
  </entry>
  
  <entry>
    <title>tailwind</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/07/08/tailwind/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/07/08/tailwind/</id>
    <published>2024-07-08T02:56:43.000Z</published>
    <updated>2024-07-11T02:37:47.681Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7387611028988002314">https://juejin.cn/post/7387611028988002314</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7387611028988002314&quot;&gt;https://juejin.cn/post/7387611028988002314&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CI/CD初识</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/04/11/CICD/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/04/11/CICD/</id>
    <published>2024-04-11T13:07:01.000Z</published>
    <updated>2024-05-31T08:31:14.488Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CI-x2F-CD-简介"><a href="#CI-x2F-CD-简介" class="headerlink" title="CI&#x2F;CD 简介"></a>CI&#x2F;CD 简介</h2><p>CI 代表持续集成（Continuous Integration），在持续集成中，开发人员通常会将其代码提交到共享存储库，并且在每次提交后，会自动触发一系列的构建、测试和验证流程。</p><p>CD 代表持续交付（Continuous Delivery）和持续部署（Continuous Deployment）。持续交付是指自动化地将软件构建、测试和部署到预生产环境的过程，使得软件可以随时准备好进行发布。而持续部署更进一步，是指将软件构建、测试和部署的过程完全自动化，包括将新代码直接部署到生产环境，以便快速交付新功能和修复 bug。</p><h2 id="常见-CI-x2F-CD-工具"><a href="#常见-CI-x2F-CD-工具" class="headerlink" title="常见 CI&#x2F;CD 工具"></a>常见 CI&#x2F;CD 工具</h2><h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3><p>该软件提供了一个易于使用的 Web 界面，可以帮助开发团队快速、高效地构建、测试和交付软件。它与各种版本控制系统（如 Git、Subversion）和构建工具（如 Maven、Gradle）无缝集成，可以轻松地配置和管理项目的构建过程。</p><h3 id="gitlab"><a href="#gitlab" class="headerlink" title="gitlab"></a>gitlab</h3><h4 id="gitlab-runner-启动"><a href="#gitlab-runner-启动" class="headerlink" title="gitlab runner 启动"></a>gitlab runner 启动</h4><p>gitlab runner 是一个开源项目，用于运行流水线任务并将结果发送回 GitLab。本质就是一个服务器。</p><p>gitlab-runner 的三种类型：</p><ul><li>共享 Runner（Shared Runner），所有项目可以使用。</li><li>群组 Runner（Group Runner），特定群组里的所有项目和子群组。</li><li>特定 Runner（Specific Runner），用于独立的项目。</li></ul><h5 id="gitlab-runner-安装"><a href="#gitlab-runner-安装" class="headerlink" title="gitlab runner 安装"></a>gitlab runner 安装</h5><p>可以在任意一台 server 安装。首先添加 GitLab 官方源</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -L https:<span class="hljs-regexp">//</span>packages.gitlab.com<span class="hljs-regexp">/install/</span>repositories<span class="hljs-regexp">/runner/gi</span>tlab-ci-multi-runner/script.rpm.sh | sudo bash<br><br>sudo yum install gitlab-ci-multi-runner<br></code></pre></td></tr></table></figure><h5 id="gitlab-runner-注册"><a href="#gitlab-runner-注册" class="headerlink" title="gitlab runner 注册"></a>gitlab runner 注册</h5><p>安装完 gitlab-renner 并成功运行后，我们此时需要将 gitlab 和 gitlab-runner 之间产生关联，所以我们需要注册 runner 到 gitlab</p><p>点击 gitlab 仓库的 setting，选择 CI&#x2F;CD 的选项，runner 一栏可以看到注册 runner 需要的 url 和 token。在执行下列指令时需要把 url 和 token 的参数换成自己 gitlab 仓库的</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">gitlab-runner register \<br><span class="hljs-params">--non-interactive</span> \<br><span class="hljs-params">--executor</span> <span class="hljs-string">&quot;docker&quot;</span> \<br><span class="hljs-params">--docker-image</span> alpine<span class="hljs-function">:latest</span> \<br><span class="hljs-params">--url</span> <span class="hljs-string">&quot;http://gitlab.xxxx.com:9880/&quot;</span> \<br><span class="hljs-params">--registration-token</span> <span class="hljs-string">&quot;i-WPBnBbQtiQDYndpQkc&quot;</span> \<br><span class="hljs-params">--description</span> <span class="hljs-string">&quot;my first nine-runner&quot;</span> \<br><span class="hljs-params">--tag-list</span> <span class="hljs-string">&quot;nine-runner&quot;</span> \<br><span class="hljs-params">--run-untagged</span> \<br><span class="hljs-params">--locked=</span><span class="hljs-string">&quot;false&quot;</span><br></code></pre></td></tr></table></figure><p>成功注册的话我们就可以在 gitlab 的 runner 一栏看到它的基本信息</p><h4 id="gitlab-ci-yml"><a href="#gitlab-ci-yml" class="headerlink" title=".gitlab-ci.yml"></a>.gitlab-ci.yml</h4><p>位于项目代码仓库的根目录下的配置文件，该文件中可以指定代码扫描、构建、测试、部署等几个步骤的一系列的命令或者脚本。<br>以前端项目举例，配置文件最基础的情况也需包括以下几步</p><ul><li>npm install 安装依赖</li><li>npm run build 打包项目</li><li>将生成的 dist 文件打包目录部署</li></ul><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">stages</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">build</span><br><br><span class="hljs-attribute">build</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">stage</span><span class="hljs-punctuation">:</span> <span class="hljs-string">build</span><br>  <span class="hljs-attribute">only</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">test</span><br>  <span class="hljs-attribute">cache</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">key</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cache&quot;</span><br>    <span class="hljs-attribute">paths</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">node_modules/</span><br>  <span class="hljs-attribute">script</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">npm install</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">node publish</span><br>  <span class="hljs-attribute">tags</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">front-end</span><br></code></pre></td></tr></table></figure><p>以上面这个代码为例，这里设置了流水线的阶段只有 build，而任务名 build 就是会在该阶段执行的任务，代码会先后执行指令<code>npm install</code> 和<code>node publish</code>。<br>但实际 devops 设计中，可能不会把构建部署任务放在该文件内，一是为例防止开发人员随便乱改这个文件，二是篇幅过长看着很乱，不易于统一更新维护。</p><p>所以有些 devops 会利用模板拆分优化.gitlab-ci.yml。这时候开发代码根目录下的 .gitlab-ci.yml 文件如下：</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sml">variables:<br>  <span class="hljs-type">BUILD_TYPE</span>: <span class="hljs-type">JAVA</span><br><br><span class="hljs-keyword">include</span>:<br>  - project: <span class="hljs-symbol">&#x27;Group1</span>/gitlab-ci-template&#x27;<br>    <span class="hljs-built_in">ref</span>: <span class="hljs-symbol">&#x27;master&#x27;</span><br>    file: <span class="hljs-symbol">&#x27;src</span>/.gitlab-ci-template.yml&#x27;<br></code></pre></td></tr></table></figure><p>我们模板仓库在 Group1 这个组下的 gitlab-ci-template 目录，其中包含一个 src 目录，src 目录下包含一个 .gitlab-ci-template.yml 文件，里面就包含流水线任务配置。<br>这样就可以有效解决上述问题。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>（1）<a href="https://www.infoq.cn/article/WHt0wFMDRrBU-dtkh1Xp/">如何从零开始搭建 CI&#x2F;CD 流水线</a><br>（2）<a href="https://docs.gitlab.com/ee/ci/yaml/#includeproject">gitlab document</a><br>（3）<a href="https://zhuanlan.zhihu.com/p/453140826">Gitlab CI&#x2F;CD 浅谈模板拆分</a><br>（4）<a href="https://cloud.tencent.com/developer/article/1925580">GitLabCI 模板库的流水线优化实践</a><br>（5）<a href="https://juejin.cn/post/7137143919418015751?searchId=20240407153905A10825B44CD86F030868#heading-20">面向个人开发者应该打造的 CICD 部署系统</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CI-x2F-CD-简介&quot;&gt;&lt;a href=&quot;#CI-x2F-CD-简介&quot; class=&quot;headerlink&quot; title=&quot;CI&amp;#x2F;CD 简介&quot;&gt;&lt;/a&gt;CI&amp;#x2F;CD 简介&lt;/h2&gt;&lt;p&gt;CI 代表持续集成（Continuous Integra</summary>
      
    
    
    
    <category term="技术学习" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="CI/CD" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/CI-CD/"/>
    
    <category term="运维小知识" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/%E8%BF%90%E7%BB%B4%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>腾讯云服务基础操作记录</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/02/22/k8s/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/02/22/k8s/</id>
    <published>2024-02-22T14:47:26.000Z</published>
    <updated>2024-03-04T06:45:50.810Z</updated>
    
    <content type="html"><![CDATA[<p>最近因为项目迁移老要操作腾讯云服务，所以写个总结的文章，梳理一下涉及的知识和操作。说真的前端部署真的应该考虑这些吗？</p><span id="more"></span><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><h3 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h3><p>Kubernetes（简称 K8s）是一个开源的容器编排平台，用于自动化部署、扩展和管理容器化应用程序。<br>Kubernetes 集群的两种管理角色：Master 和 Node。</p><h4 id="集群架构"><a href="#集群架构" class="headerlink" title="集群架构"></a>集群架构</h4><p><img src="/unknown404.github.io/img/k8s/structure.jpg"></p><h5 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h5><p>集群的控制节点，每个 Kubernetes 集群需要有一个 master 节点来负责整个集群的管理和控制。包括以下结构</p><ul><li>Kubernetes API Server(kube-apiserver):提供了 HTTP Rest 接口的关键服务进程，是 Kubernetes 里所有资源的增，删，改，查等操作的唯一入口，也是集群控制的入口进程。</li><li>Kubernetes Controller Manager （kube-controller-manager）:Kubernetes 里所有资源对象的自动化控制中心，可以理解为资源对象的“大总管”</li><li>Kubernetes Schedule（kube-scheduler）:负责资源调度（Pod 调度）的进程，相当于公交公司的“调度室”。</li><li>etcd 服务：保存 Kubernetes 里所有资源对象的数据。</li></ul><h5 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h5><p>Kubernetes 集群中真正业务工作负载节点。当某个 Node 宕机后，其上的工作负载会被 Master 自动转移到其他节点上去。</p><ul><li>kubelet:负责 pod 对应的容器的创建，启停等任务。同时与 Master 节点密切协助，实现集群管理的基本功能。</li><li>kube-proxy:实现 Kubernetes service 的通信与负载均衡机制的重要组件。</li><li>Docker Engine（docker）：Docker 引擎，负责本机的容器创建和管理工作。</li></ul><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ul><li>DNS：Kubernetes 提供了内建的 DNS 服务，用于解析服务名称到 Pod IP 地址，实现服务之间的通信。</li><li>Ingress Controller：可选组件，用于管理集群的入口流量，实现 HTTP 和 HTTPS 等应用层协议的路由和负载均衡。</li><li>Dashboard：可选的 Web UI，用于管理和监控 Kubernetes 集群。</li></ul><h4 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h4><h5 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h5><p>一组紧密关联的容器集合，它们共享 IPC 和 Network namespace，是 Kubernetes 调度的基本单位。在 VMware 的世界中，调度的原子单位是虚拟机（VM）；在 Docker 的 世界中，调度的原⼦单位是容器；⽽在 Kubernetes 的世界中，调度的原子单位是 Pod。每一个 pod 都有一个特殊的被称为“根容器”的 Pause 容器对应的镜像属于 Kubernetes 平台的一部分，除了 Pause 容器，每个 Pod 还包括一个或多个紧密相关的用户业务容器。</p><p>通过与 Master 节点的交互，Pod 可以被创建、调度到适合的节点上运行；而在 Node 节点上，kubelet 负责管理 Pod 的生命周期，而 kube-proxy 则负责处理 Pod 的网络通信。</p><h5 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h5><p>Pod 控制器是 Pod 启动的一种模版，用来保证在 K8S 里启动的 Pod 应始终按照用户的预期运行（副本数、生命周期、健康状态检查等）。之前主要是 Replication Controller 与 Replica Set 来实现，1.2 版本后官方更推荐用 Deployment。</p><p>Deployment 属于无状态应用部署（不会在本地存储持久化数据 ，多个 pod 间是没有关系的）。Deployment 的作用是管理和控制 Pod 和 ReplicaSet，管控它们运行在用户期望的状态中。除 Pod 管理之外，还提供了如扩缩容管理、一键回滚、不停机更新以及版本控制及其他特性。</p><h5 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h5><p>Pod 是非常重要的，但是可能随时会出现故障并销毁。如果通过 Deployment 或者 DaemonSet 对 Pod 进行管理，出现故障的 Pod 会自动被替换。但替换后的新 Pod 会拥有完全不同的 IP 地址。</p><p>Service 就是用来解决这个问题的核心概念，它并不是我们常说的“服务”的含义，而更像是网关层，可以看作一组提供相同服务的 Pod 的对外访问接口、流量均衡器。</p><h5 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h5><p>一个 Label 是一个 key&#x3D;value 的键值对。其中 key 与 value 由用户自己定义。Label 可以附加到各个资源对象上，例如 Node，Pod，Service，RC 等，一个资源对象可以定义任意数量的 Label，同一个 Label 也可以被添加到任意数量的资源对象上去，Label 通常在资源对象定义时确定，也可以在对象创建后动态添加或者删除。</p><p>当给某个资源对象定义一个 Label，就相当于给它打了一个标签，然后可以通过“Label Selector”（标签选择器）查询和筛选拥有某些 Label 的资源对象</p><p>Label Selector 可以用于以下场景：</p><ul><li>kube-controller 进程通过资源对象 RC 上定义的 Label Selector 来筛选要监控的 Pod 副本的数量，从而实现 Pod 副本的数量始终符合预期设定的全自动控制流程。</li><li>kube-proxy 进程通过 Service 的 Label Selector 来选择对应的 Pod，自动建立起每个 Service 到对应 Pod 的请求转发路由表，从而实现 Service 的智能负载均衡机制。</li><li>通过对某些 Node 定义特定的 Label，并且在 Pod 定义文件中使用 NodeSelector 这种标签调度策略，kube-scheduler 进程可以实现‘定向调度’的特性。</li></ul><h3 id="腾讯云-TKE-容器服务"><a href="#腾讯云-TKE-容器服务" class="headerlink" title="腾讯云 TKE 容器服务"></a>腾讯云 TKE 容器服务</h3><p>腾讯云容器服务（Tencent Kubernetes Engine, TKE）基于原生 kubernetes 提供以容器为核心的、高度可扩展的高性能容器管理服务。可以帮助用户轻松地在云上部署、管理和扩展容器化应用程序（大概吧）。</p><p>目前腾讯云列出的可配置的 k8s 属性如下表格所示<br><img src="/unknown404.github.io/img/k8s/k8sObj.jpg"></p><h3 id="腾讯云容器镜像服务"><a href="#腾讯云容器镜像服务" class="headerlink" title="腾讯云容器镜像服务"></a>腾讯云容器镜像服务</h3><p>一种容器镜像云端托管服务。该服务支持 Docker 镜像和 Helm Chart 的存储与分发，以及镜像的安全扫描。它为企业级客户提供了细颗粒度的访问权限管理和网络访问控制，支持镜像的全球同步及触发器，以满足客户拓展全球业务及使用容器 CI&#x2F;CD 工作流的需求。此外，TCR 还支持具有上千节点的大规模容器集群并发拉取 GB 级大镜像，保障业务的极速部署。</p><p>通过使用容器镜像服务，客户无需自建并维护镜像托管服务，即可在云端享受安全高效的镜像托管和分发服务。同时，该服务可以与腾讯云的容器服务 TKE 结合使用，为客户提供顺畅的容器上云体验。</p><h2 id="项目部署迁移操作"><a href="#项目部署迁移操作" class="headerlink" title="项目部署迁移操作"></a>项目部署迁移操作</h2><h3 id="镜像仓库迁移"><a href="#镜像仓库迁移" class="headerlink" title="镜像仓库迁移"></a>镜像仓库迁移</h3><p>公司里每个组都是有自己的命名空间的，所以项目迁移时需要在自己小组的命名空间下新建镜像仓库<br><img src="https://qcloudimg.tencent-cloud.cn/image/document/b95228adfa9046858ad971882c800fe6.png"><br>在部署工具里更新镜像仓库地址，打包镜像</p><h3 id="容器迁移"><a href="#容器迁移" class="headerlink" title="容器迁移"></a>容器迁移</h3><p>进入容器服务页面、选择 Deployment 菜单。在自己小组所属的命名空间下创建新的 deployment。由于部署脚手架利用了 Label 特性，所以表单的 label 一栏要增加项目的 appcode<br><img src="/unknown404.github.io/img/k8s/deployment.jpg"><br>容器一栏容器名可以和 deployment 保持一致；镜像选择自己小组的命名空间下新建的镜像仓库，刚新建好的镜像仓库没有版本，需要提前打包镜像推送到仓库；cpu&#x2F;内存限制可以分环境考虑：</p><ul><li>测试环境 cpu 限制 0.25 核，内存 256</li><li>正式环境 cpu 设置 0.25-0.5，内存 256-512</li></ul><p>核心思想就是测试环境能跑就行，正式环境需要有一定的扩展性。后面实例设置也是如此。<br><img src="/unknown404.github.io/img/k8s/container.jpg"><br>实例数量：等同于 replicas，直接指定 pod 实例数量。测试环境可以手动限制为 1 个，正式环境选择自动调节，实例范围 2-5，触发自动调节策略根据实际情况可以设置多个，例如满足 cpu 使用率高于 50%、内存利用率高于 50%中的一个触发<br><img src="/unknown404.github.io/img/k8s/pod.jpg"><br>镜像访问凭证：针对镜像仓库设置的，在 pod 中指定仓库密钥，默认都配置了 qcloudregistrykey 和 tencenthubkey，如果这个 key 设置错误将导致从镜像仓库拉取私有镜像失败（一般来说之前的人已经设过了，可以看看下拉列表；不确定的时候可以删除这一栏、估计也能跑的原因是腾讯云主账号权限高吧）</p><h3 id="服务迁移"><a href="#服务迁移" class="headerlink" title="服务迁移"></a>服务迁移</h3><p><img src="/unknown404.github.io/img/k8s/service.jpg"><br>服务器访问方式中，仅在集群内访问即设置 ClusterIP 的选项，服务只会在集群内部被访问，一般正式环境使用该配置（因为正式环境代码会部署到两个集群，应该是为了防止单一集群挂掉整个网站不可访问的情况吧）；内网 LB 访问即使用 ip+port 的形式可以访问到</p><p>容器端口：项目启动时的端口，一般如果是 ssr 项目就是指令启动时的端口，如果是 nginx 项目在没大改配置的条件下是 80<br>服务端口：自己随便设的端口，最后服务在集群外可通过负载均衡域名或 IP+服务端口访问服务</p><h3 id="测试服务运行效果"><a href="#测试服务运行效果" class="headerlink" title="测试服务运行效果"></a>测试服务运行效果</h3><p>点击新建的负载，查看 pod 的运行情况，如果没有正常运行，点击 tab “修正历史”查看原因。<br>服务设置为“仅在集群内访问”时，可以通过远程登录 pod 进行测试：点击 tab“Pod 管理“，选择一个 pod 点击远程登录，进入 cmd 界面后执行<code>curl &lt;Kubernetes Service 的域名&gt;:&lt;服务端口&gt;</code>，看返回是否是打包项目的内容<br><img src="https://qcloudimg.tencent-cloud.cn/image/document/4b2622c6b32d982dd29c6b25eb847e10.png"></p><p>服务设置为“内网 LB 访问”时，可以直接在浏览器地址栏输入<code>&lt;负载均衡IP&gt;:&lt;服务端口&gt;</code>看打开的页面是否是打包项目的内容。负载均衡 IP 在点击新建的 Service 名称的“详情”tab 里可以看到</p><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><p><strong>Kubernetes Service 的域名</strong>：在 Kubernetes 中，每个 Service 都有一个唯一的域名，该域名遵循以下格式：<code>&lt;service-name&gt;.&lt;namespace&gt;.svc.cluster.local</code>。其中：</p><ul><li><service-name> 是 Service 的名称。</li><li><namespace> 是 Service 所属的命名空间（Namespace）。</li><li>svc.cluster.local 是 Kubernetes 集群中所有 Service 的域名后缀。</li></ul><p>Kubernetes Service 的域名会映射到该 Service 的 ClusterIP 地址上。当你创建一个 Service 时，Kubernetes 会为该 Service 分配一个 ClusterIP 地址，并为该 Service 自动生成一个域名，其格式为 <code>&lt;service-name&gt;.&lt;namespace&gt;.svc.cluster.local</code>。这个域名会自动解析到该 Service 的 ClusterIP 地址。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>（1）<a href="https://zhuanlan.zhihu.com/p/618249568">kubernetes 入门看这篇就够了</a><br>（2）<a href="https://blog.csdn.net/wang_dian1/article/details/132045116">【云原生】K8S 超详细概述</a><br>（3）<a href="https://cloud.tencent.com/developer/article/1412208">在 TKE 集群中新建工作负载</a><br>（4）<a href="https://cloud.tencent.com/document/product/457/45598">tke 容器服务</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近因为项目迁移老要操作腾讯云服务，所以写个总结的文章，梳理一下涉及的知识和操作。说真的前端部署真的应该考虑这些吗？&lt;/p&gt;</summary>
    
    
    
    <category term="备忘录" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
    <category term="k8s" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/k8s/"/>
    
    <category term="前端部署" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/%E5%89%8D%E7%AB%AF%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>h5使用canvas绘制海报</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/02/05/h5poster/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/02/05/h5poster/</id>
    <published>2024-02-05T09:00:26.000Z</published>
    <updated>2024-02-06T02:52:52.349Z</updated>
    
    <content type="html"><![CDATA[<p>最近开发 canvas 绘制时发现自己有点忘了绘制规则了，所以贴一下代码做个备份。</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> bg = <span class="hljs-string">&quot;xxx.png&quot;</span>;<br><span class="hljs-keyword">var</span> qrcode = <span class="hljs-string">&quot;xxxx.png&quot;</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 海报生成函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; sourceItem 「imgUrl：头图；text（array）；title；」</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; rect 海报宽高值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">*</span>&#125; base64图片</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">drawPoster</span>(<span class="hljs-params"></span><br><span class="hljs-params">  sourceItem,</span><br><span class="hljs-params">  rect = &#123; width: <span class="hljs-number">375</span>, height: <span class="hljs-number">667</span> &#125;</span><br><span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; imgUrl, text, title, type &#125; = sourceItem;<br>  <span class="hljs-keyword">const</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>  <span class="hljs-keyword">var</span> dpr = <span class="hljs-variable language_">window</span>.<span class="hljs-property">devicePixelRatio</span> || <span class="hljs-number">1</span>;<br>  canvas.<span class="hljs-property">width</span> = rect.<span class="hljs-property">width</span> * dpr;<br>  canvas.<span class="hljs-property">height</span> = rect.<span class="hljs-property">height</span> * dpr;<br>  <span class="hljs-keyword">const</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br>  ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>);<br>  <span class="hljs-comment">// 绘制背景图</span><br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">drawPic</span>(ctx, dpr, bg);<br>  <span class="hljs-comment">// 绘制ai图</span><br>  ctx.<span class="hljs-title function_">save</span>();<br>  <span class="hljs-title function_">drawArcFrame</span>(ctx, <span class="hljs-number">64</span> * dpr, <span class="hljs-number">64</span> * dpr, <span class="hljs-number">246</span> * dpr, <span class="hljs-number">376</span> * dpr, <span class="hljs-number">16</span> * dpr);<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">drawPic</span>(<br>    ctx,<br>    dpr,<br>    imgUrl,<br>    &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">64</span> * dpr, <span class="hljs-attr">y</span>: <span class="hljs-number">64</span> * dpr &#125;,<br>    &#123; <span class="hljs-attr">width</span>: <span class="hljs-number">246</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">376</span> &#125;<br>  );<br>  ctx.<span class="hljs-title function_">restore</span>();<br>  <span class="hljs-comment">// 绘制qrcode</span><br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">drawPic</span>(<br>    ctx,<br>    dpr,<br>    qrcode,<br>    &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">239</span> * dpr, <span class="hljs-attr">y</span>: <span class="hljs-number">369</span> * dpr &#125;,<br>    &#123; <span class="hljs-attr">width</span>: <span class="hljs-number">68</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">68</span> &#125;<br>  );<br>  <span class="hljs-comment">// 绘制文字</span><br>  <span class="hljs-keyword">const</span> lineHeight = <span class="hljs-number">25</span> * dpr;<br>  <span class="hljs-keyword">var</span> startY = <span class="hljs-number">467</span> * dpr + lineHeight,<br>    startX = <span class="hljs-number">0</span>;<br>  ctx.<span class="hljs-property">textAlign</span> = <span class="hljs-string">&quot;center&quot;</span>;<br>  <span class="hljs-comment">// 预处理，对每行文字进行折行逻辑处理</span><br>  <span class="hljs-keyword">let</span> lineCount = <span class="hljs-number">4</span>;<br>  <span class="hljs-keyword">let</span> row = [];<br>  ctx.<span class="hljs-property">font</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-number">17</span> * dpr&#125;</span>px PingFangSC, PingFang SC`</span>; <span class="hljs-comment">// 设置字体样式和大小</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; text.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> line = text[i];<br>    <span class="hljs-keyword">let</span> tempText = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> wordIndex = <span class="hljs-number">0</span>; wordIndex &lt; line.<span class="hljs-property">length</span>; wordIndex++) &#123;<br>      <span class="hljs-keyword">if</span> (ctx.<span class="hljs-title function_">measureText</span>(tempText).<span class="hljs-property">width</span> &lt; <span class="hljs-number">200</span> * dpr) &#123;<br>        tempText += line[wordIndex];<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        wordIndex--;<br>        row.<span class="hljs-title function_">push</span>(tempText);<br>        tempText = <span class="hljs-string">&quot;&quot;</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (tempText) row.<span class="hljs-title function_">push</span>(tempText);<br>  &#125;<br>  <span class="hljs-keyword">let</span> totalLineCount = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(row.<span class="hljs-property">length</span>, lineCount);<br>  <span class="hljs-keyword">if</span> (title) &#123;<br>    startX = canvas.<span class="hljs-property">width</span> / <span class="hljs-number">2</span>;<br>    totalLineCount++;<br>    startY = <span class="hljs-number">539</span> * dpr - (lineHeight * totalLineCount) / <span class="hljs-number">2</span> + lineHeight / <span class="hljs-number">2</span>;<br>    <span class="hljs-title function_">drawText</span>(<br>      ctx,<br>      dpr,<br>      title,<br>      &#123; <span class="hljs-attr">x</span>: startX, <span class="hljs-attr">y</span>: startY &#125;,<br>      <span class="hljs-number">17</span>,<br>      <span class="hljs-string">&quot;normal&quot;</span>,<br>      <span class="hljs-string">&quot;#AD2700&quot;</span><br>    );<br>    startY += lineHeight;<br>    totalLineCount--;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    startY = <span class="hljs-number">539</span> * dpr - (lineHeight * totalLineCount) / <span class="hljs-number">2</span> + lineHeight / <span class="hljs-number">2</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(row.<span class="hljs-property">length</span>, lineCount); i++) &#123;<br>    startX = canvas.<span class="hljs-property">width</span> / <span class="hljs-number">2</span>;<br>    <span class="hljs-title function_">drawText</span>(ctx, dpr, row[i], &#123; <span class="hljs-attr">x</span>: startX, <span class="hljs-attr">y</span>: startY &#125;, <span class="hljs-number">17</span>, <span class="hljs-string">&quot;bold&quot;</span>, <span class="hljs-string">&quot;#AD2700&quot;</span>);<br>    startY += lineHeight;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> imageURL = canvas.<span class="hljs-title function_">toDataURL</span>(<span class="hljs-string">&quot;image/png&quot;</span>); <span class="hljs-comment">// 将Canvas转换为PNG格式的图片URL</span><br>  <span class="hljs-keyword">return</span> imageURL;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">drawText</span>(<span class="hljs-params"></span><br><span class="hljs-params">  ctx,</span><br><span class="hljs-params">  dpr = <span class="hljs-number">2</span>,</span><br><span class="hljs-params">  text,</span><br><span class="hljs-params">  position = &#123; x: <span class="hljs-number">0</span>, y: <span class="hljs-number">0</span> &#125;,</span><br><span class="hljs-params">  fontSize = <span class="hljs-number">30</span>,</span><br><span class="hljs-params">  fontWeight = <span class="hljs-string">&quot;normal&quot;</span>,</span><br><span class="hljs-params">  color = <span class="hljs-string">&quot;red&quot;</span></span><br><span class="hljs-params"></span>) &#123;<br>  ctx.<span class="hljs-property">fillStyle</span> = color;<br>  ctx.<span class="hljs-property">font</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;fontWeight&#125;</span> <span class="hljs-subst">$&#123;fontSize * dpr&#125;</span>px PingFangSC, PingFang SC`</span>; <span class="hljs-comment">// 设置字体样式和大小</span><br>  ctx.<span class="hljs-title function_">fillText</span>(text, position.<span class="hljs-property">x</span>, position.<span class="hljs-property">y</span>); <span class="hljs-comment">// 设置文字位置和内容</span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">drawPic</span>(<span class="hljs-params"></span><br><span class="hljs-params">  ctx,</span><br><span class="hljs-params">  dpr = <span class="hljs-number">2</span>,</span><br><span class="hljs-params">  imgUrl,</span><br><span class="hljs-params">  position = &#123; x: <span class="hljs-number">0</span>, y: <span class="hljs-number">0</span> &#125;,</span><br><span class="hljs-params">  rect = &#123; width: <span class="hljs-number">375</span>, height: <span class="hljs-number">667</span> &#125;</span><br><span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> image = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();<br>    image.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;crossOrigin&quot;</span>, <span class="hljs-string">&quot;anonymous&quot;</span>);<br>    image.<span class="hljs-property">src</span> = imgUrl;<br>    image.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      ctx.<span class="hljs-title function_">drawImage</span>(<br>        image,<br>        position.<span class="hljs-property">x</span>,<br>        position.<span class="hljs-property">y</span>,<br>        rect.<span class="hljs-property">width</span> * dpr,<br>        rect.<span class="hljs-property">height</span> * dpr<br>      );<br>      <span class="hljs-title function_">resolve</span>();<br>    &#125;;<br>  &#125;);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">drawArcFrame</span>(<span class="hljs-params">ctx, x, y, w, h, r</span>) &#123;<br>  ctx.<span class="hljs-title function_">beginPath</span>();<br>  <span class="hljs-comment">// 因为边缘描边存在锯齿，最好指定使用 transparent 填充</span><br>  ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;transparent&quot;</span>;<br>  <span class="hljs-comment">// 左上角</span><br>  ctx.<span class="hljs-title function_">arc</span>(x + r, y + r, r, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">1.5</span>);<br><br>  <span class="hljs-comment">// border-top</span><br>  ctx.<span class="hljs-title function_">moveTo</span>(x + r, y);<br>  ctx.<span class="hljs-title function_">lineTo</span>(x + w - r, y);<br>  ctx.<span class="hljs-title function_">lineTo</span>(x + w, y + r);<br>  <span class="hljs-comment">// 右上角</span><br>  ctx.<span class="hljs-title function_">arc</span>(x + w - r, y + r, r, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">1.5</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>);<br><br>  <span class="hljs-comment">// border-right</span><br>  ctx.<span class="hljs-title function_">lineTo</span>(x + w, y + h - r);<br>  ctx.<span class="hljs-title function_">lineTo</span>(x + w - r, y + h);<br>  <span class="hljs-comment">// 右下角</span><br>  ctx.<span class="hljs-title function_">arc</span>(x + w - r, y + h - r, r, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">0.5</span>);<br><br>  <span class="hljs-comment">// border-bottom</span><br>  ctx.<span class="hljs-title function_">lineTo</span>(x + r, y + h);<br>  ctx.<span class="hljs-title function_">lineTo</span>(x, y + h - r);<br>  <span class="hljs-comment">// 左下角</span><br>  ctx.<span class="hljs-title function_">arc</span>(x + r, y + h - r, r, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">0.5</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>);<br><br>  <span class="hljs-comment">// border-left</span><br>  ctx.<span class="hljs-title function_">lineTo</span>(x, y + r);<br>  ctx.<span class="hljs-title function_">lineTo</span>(x + r, y);<br><br>  <span class="hljs-comment">// 这里是使用 fill 还是 stroke都可以，二选一即可，但是需要与上面对应</span><br>  ctx.<span class="hljs-title function_">fill</span>();<br>  <span class="hljs-comment">// ctx.stroke()</span><br>  ctx.<span class="hljs-title function_">closePath</span>();<br>  <span class="hljs-comment">// 剪切</span><br>  ctx.<span class="hljs-title function_">clip</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>注意点：</p><ul><li>绘制图片属于异步操作，只能等图片加载完才能绘制，如果存在显示于图片之上的文字，必须要让文字的绘制在图片回调函数执行之后发生，不能同步执行</li><li>绘制圆角时，需使用函数 ctx.save()保存之前的绘制内容；圆角的实现本质是对画板进行了剪切、再填充绘制内容实现的，绘制完成后用 ctx.restore()将画板剩余部分恢复</li><li>文字绘制时起始坐标默认是文字的左下而不是左上</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近开发 canvas 绘制时发现自己有点忘了绘制规则了，所以贴一下代码做个备份。&lt;/p&gt;</summary>
    
    
    
    <category term="备忘录" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
    <category term="canvas" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>babel初识</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/02/04/babel/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/02/04/babel/</id>
    <published>2024-02-04T03:11:17.000Z</published>
    <updated>2024-02-06T03:38:21.503Z</updated>
    
    <content type="html"><![CDATA[<p>了解一下 babel 相关配置</p><span id="more"></span><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>babel 最初是用于 es6 转 es5，确保各端浏览器能支持代码逻辑的运行。但现在 babel 作为转译器，还可以实现其他的功能</p><h2 id="babel-作用"><a href="#babel-作用" class="headerlink" title="babel 作用"></a>babel 作用</h2><h3 id="转译-es、typescript、flow-等到目标环境支持的-js"><a href="#转译-es、typescript、flow-等到目标环境支持的-js" class="headerlink" title="转译 es、typescript、flow 等到目标环境支持的 js"></a>转译 es、typescript、flow 等到目标环境支持的 js</h3><p>这个是最常用的功能，用来把代码中的 es 的新的语法、typescript 和 flow 的语法转成基于目标环境支持的语法的实现。并且还可以把目标环境不支持的 api 进行 polyfill。</p><p>babel7 提供了 @babel&#x2F;preset-env 的包，可以指定目标 env 来按需转换，转换更加的精准，产物更小。</p><h3 id="一些特定用途的转换"><a href="#一些特定用途的转换" class="headerlink" title="一些特定用途的转换"></a>一些特定用途的转换</h3><p>比如函数插桩（函数中自动插入一些代码，例如埋点代码）、自动国际化等。</p><h3 id="代码的静态分析"><a href="#代码的静态分析" class="headerlink" title="代码的静态分析"></a>代码的静态分析</h3><p>对代码进行 parse 之后，会生成 AST，通过 AST 能够理解代码结构，除了转换 AST 再打印成目标代码之外，也同样可以用于分析代码的信息，进行一些静态检查。例如：</p><ul><li>linter 工具就是分析 AST 的结构，对代码规范进行检查。</li><li>api 文档自动生成工具，可以提取源码中的注释，然后生成文档。</li><li>…</li></ul><h2 id="babel-配置的方式"><a href="#babel-配置的方式" class="headerlink" title="babel 配置的方式"></a>babel 配置的方式</h2><ul><li>babel.config.json：在项目的根目录（package.json 文件所在的目录）下</li><li>.babelrc.json：在项目的根目录（package.json 文件所在的目录）下</li><li>@babel&#x2F;cli</li></ul><p>三种配置方式的权重排序（由小到大） babel.config.json &lt; .babelrc &lt; programmatic options from @babel&#x2F;cli</p><h2 id="常用-babel-配置"><a href="#常用-babel-配置" class="headerlink" title="常用 babel 配置"></a>常用 babel 配置</h2><p>babel 中插件可配置两个属性——presets 和 plugins，应用顺序是：先 plugin 再 preset，plugin 从左到右，preset 从右到左。</p><h3 id="presets"><a href="#presets" class="headerlink" title="presets"></a>presets</h3><p>一般情况下一个插件用来解决一个语法转译问题，例如@babel&#x2F;plugin-transform-arrow-functions 可以用于箭头函数转为一般函数，@babel&#x2F;plugin-transform-destructuring 则用于将 es6 的解构语法进行转译。而 presets 可以理解为官方预置的 es 的新的语法、typescript 和 flow 的语法转译为目标环境支持语法的插件的集合，省去了我们一个个引入插件的麻烦。<br>babel 官方目前提供的预设包括：</p><ul><li>@babel&#x2F;preset-env (转译 es 6+语法)</li><li>@babel&#x2F;preset-typescript （转译 ts 语法）</li><li>@babel&#x2F;preset-react （转译 react 语法）</li><li>@babel&#x2F;preset-flow （转译 flow 语法）</li></ul><h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h3><p>常用的插件有：</p><h4 id="babel-x2F-plugin-transform-runtime"><a href="#babel-x2F-plugin-transform-runtime" class="headerlink" title="@babel&#x2F;plugin-transform-runtime"></a>@babel&#x2F;plugin-transform-runtime</h4><p>转译 class 语法时 babel 注入了一些辅助函数的声明，以便语法转换后使用。但如果多个文件都使用了 class 语法，转译时这些辅助函数都会在转换文件里定义，尽管函数功能是相同的<br>plugin-transform-runtime 则是可以将 helper 和 polyfill 都改为从一个统一的地方引入，并且引入的对象和全局变量是完全隔离的</p><h4 id="babel-x2F-plugin-proposal-decorators"><a href="#babel-x2F-plugin-proposal-decorators" class="headerlink" title="@babel&#x2F;plugin-proposal-decorators"></a>@babel&#x2F;plugin-proposal-decorators</h4><p>转译 js 装饰器语法</p><h4 id="babel-plugin-import"><a href="#babel-plugin-import" class="headerlink" title="babel-plugin-import"></a>babel-plugin-import</h4><p>模块化导入插件，可以实现按需引入依赖包模块<br>使用示例：<br>使用指令<code>npm install babel-plugin-import --save-dev</code>安装该依赖后对 babel 配置文件进行如下配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">&#123;<br>  plugins: [<br>    [<span class="hljs-string">&quot;import&quot;</span>, &#123;<br>      <span class="hljs-string">&quot;libraryName&quot;</span>: <span class="hljs-string">&quot;antd&quot;</span>, <span class="hljs-regexp">//</span> 指定导入包的名称<br>      <span class="hljs-string">&quot;libraryDirectory&quot;</span>: <span class="hljs-string">&quot;lib&quot;</span>, <span class="hljs-regexp">//</span> 指定模块的存放目录<br>      style: <span class="hljs-string">&quot;css&quot;</span>, <span class="hljs-regexp">//</span> 导入 css 样式<br>    &#125;]<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>不过理论上新版的 antd 和 material-ui 中，默认已支持基于 ES modules 的 tree shaking 功能；而打包工具如：Webpack、Rollup 等在打包层面也支持了 <a href="https://juejin.cn/post/7298966922329554995?searchId=20240206112751FE48D0DEEA2D4405759C">tree shaking</a>，使得我们不需要额外配置 babel-plugin-import 也能实现按需引入</p><h2 id="babel-编译流程"><a href="#babel-编译流程" class="headerlink" title="babel 编译流程"></a>babel 编译流程</h2><p>整体编译流程主要分为三步：</p><ul><li>parse：通过 parser 把源码转成抽象语法树（AST）</li><li>transform：遍历 AST，调用各种 transform 插件对 AST 进行增删改</li><li>generate：把转换后的 AST 打印成目标代码，并生成 sourcemap</li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>（1）<a href="https://juejin.cn/post/7049160361173319693?from=search-suggest">一文轻松掌握 babel</a><br>（2）<a href="https://zhuanlan.zhihu.com/p/394783228?utm_id=0">Babel 教程 11：@babel&#x2F;plugin-transform-runtime</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;了解一下 babel 相关配置&lt;/p&gt;</summary>
    
    
    
    <category term="技术学习" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="babel" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/babel/"/>
    
    <category term="前端编译" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>stylex</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/01/25/stylex/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/01/25/stylex/</id>
    <published>2024-01-25T06:40:51.000Z</published>
    <updated>2024-10-26T13:49:14.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>近日，Meta 开源了一款「CSS-in-JS 库」 —— StyleX。这个项目从提出到 Meta 内部使用到最终开源经历了大约 5 年的时间，据说这套解决方案让 facebook 首页样式文件体积减少了至少 80%。</p><h2 id="常见-css-方案"><a href="#常见-css-方案" class="headerlink" title="常见 css 方案"></a>常见 css 方案</h2><h3 id="BEM"><a href="#BEM" class="headerlink" title="BEM"></a>BEM</h3><p>BEM 是一种用于编写 CSS 类名的命名约定，它基于块（block）、元素（element）和修饰符（modifier）的概念。使用 BEM 命名约定，可以更清晰地表达 CSS 类之间的关系，并使代码更易于维护和扩展。<br>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card__header&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 块内的元素 --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card__body&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 块内的元素 --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card__footer card__footer--highlighted&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 块内的元素，并带有修饰符 --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在这个例子中，card 是一个块，它包含了 header、body 和 footer 这些元素。footer 元素还带有一个修饰符 highlighted，表示这个底部元素有一些突出显示的样式。</p><h3 id="CSS-Modules"><a href="#CSS-Modules" class="headerlink" title="CSS Modules"></a>CSS Modules</h3><p>CSS Modules 是一种将 CSS 文件与 JavaScript 模块分离的技术。通过使用 CSS Modules，可以将 CSS 类名限制在模块内部，从而避免全局命名冲突的问题。</p><p>示例：<br>在 webpack 中进行如下配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// 其他配置项</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>将 css 文件引入 js，样式表中的类名将被映射为一个对象，可以通过该对象访问局部化的类名，再在 jsx 或 html 中使用该类名。编译时会自动生成一个唯一的类名，避免全局命名冲突。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;<br>  <span class="hljs-attribute">overflow</span>: scroll;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#f5f7fa</span>;<br>  <span class="hljs-selector-class">.nav</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./styles.less&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NavBar</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;antd-mobile&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MyTask</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">FC</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;styles.container&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">NavBar</span> <span class="hljs-attr">onBack</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;&#125;&#125; className=&#123;styles.nav&#125;&gt;</span><br><span class="language-xml">        我的任务</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">NavBar</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="原子-css"><a href="#原子-css" class="headerlink" title="原子 css"></a>原子 css</h3><p>原子 CSS 是一种将 CSS 属性分解为最基本的元素的技术。通过使用原子 CSS，可以将复杂的样式表分解为更小的、可重用和可维护的模块。目前这方面的实现有<a href="https://tailwindcss.com/">Tailwind CSS</a>、<a href="https://windicss.org/">Windi CSS</a>等<br>以 Tailwind CSS 为例，它提供了一组预定义的类名，每个类名都代表一个特定的样式属性。通过使用这些类名，可以轻松地创建具有不同样式和布局的组件。<br>示例：在 css 文件引入预设置的文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@tailwind</span> base;<br><span class="hljs-keyword">@tailwind</span> components;<br><span class="hljs-keyword">@tailwind</span> utilities;<br></code></pre></td></tr></table></figure><p>使用预设样式<br><img src="/unknown404.github.io/img/stylex/tailwind.jpg"></p><p>样式解释：</p><ul><li>max-w-7xl: 这个类设置了元素的宽度最大为 7XL 尺寸，其中 7XL 是 Tailwind CSS 的尺寸单位之一。7XL 通常对应于屏幕尺寸的非常大的屏幕。</li><li>mx-auto: 这个类设置元素的左右边距自动，使元素在水平方向上居中。</li><li>text-center: 这个类将文本内容居中对齐。</li><li>py-12: 这个类设置元素的上边距和下边距为 12 个尺寸单位。在 Tailwind CSS 中，py 是“padding-y”的缩写，表示元素的垂直内边距。</li><li>px-4: 这个类设置元素的左外边距和右外边距为 4 个尺寸单位。px 是“padding-x”的缩写，表示元素的水平内边距。</li><li>sm:px-6: 这个类是一个断点特定的类，它只在屏幕尺寸小于或等于小型设备时生效。在这种情况下，它将元素的水平内边距设置为 6 个尺寸单位。</li><li>lg:py-16: 这个类是一个断点特定的类，它只在屏幕尺寸大于或等于大型设备时生效。在这种情况下，它将元素的上边距和下边距设置为 16 个尺寸单位。</li><li>lg:px-8: 这个类也是一个断点特定的类，它只在屏幕尺寸大于或等于大型设备时生效。在这种情况下，它将元素的左外边距和右外边距设置为 8 个尺寸单位。</li></ul><h3 id="CSS-in-JS"><a href="#CSS-in-JS" class="headerlink" title="CSS-in-JS"></a>CSS-in-JS</h3><p>CSS 中的 JavaScript 是一种将 JavaScript 代码嵌入到 CSS 中的方式。通过这种方式，可以在 CSS 中使用 JavaScript 变量、函数和逻辑，以实现更灵活和动态的样式和布局。目前这方面实现的库有<a href="https://styled-components.com/docs/basics">style components</a>、<a href="https://emotion.sh/">Emotion</a>等</p><p>stylex 也属于 CSS-in-JS 库</p><h2 id="stylex-的基本用法"><a href="#stylex-的基本用法" class="headerlink" title="stylex 的基本用法"></a>stylex 的基本用法</h2><p>StyleX 的 API 很少，主要涉及两个常用方法：</p><ul><li>stylex.create，创建样式<br>代码示例如下，使用 stylex.create 函数创建了 4 个命名空间：header，logo，link，txtcenter</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> stylex <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@stylexjs/stylex&quot;</span>;<br><br><span class="hljs-keyword">const</span> styles = stylex.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">header</span>: &#123;<br>    <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&quot;#282c34&quot;</span>,<br>    <span class="hljs-attr">minHeight</span>: <span class="hljs-string">&quot;100vh&quot;</span>,<br>    <span class="hljs-attr">display</span>: <span class="hljs-string">&quot;flex&quot;</span>,<br>    <span class="hljs-attr">flexDirection</span>: <span class="hljs-string">&quot;column&quot;</span>,<br>    <span class="hljs-attr">alignItems</span>: <span class="hljs-string">&quot;center&quot;</span>,<br>    <span class="hljs-attr">justifyContent</span>: <span class="hljs-string">&quot;center&quot;</span>,<br>    <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&quot;calc(10px + 2vmin)&quot;</span>,<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;white&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">logo</span>: &#123;<br>    <span class="hljs-attr">height</span>: <span class="hljs-string">&quot;40vmin&quot;</span>,<br>    <span class="hljs-attr">pointerEvents</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">link</span>: &#123;<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#61dafb&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">txtcenter</span>: &#123;<br>    <span class="hljs-attr">textAlign</span>: <span class="hljs-string">&quot;center&quot;</span>,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>stylex.props，定义 html 的 props，将 stylex.create 定义的样式应用到 html 上（如果定义的是静态样式，dom 上增加的属性为 class；如果定义的是动态样式，dom 上增加的属性为 style）<br>代码示例如下：</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> &#123;<span class="hljs-attr">...stylex.props</span>(<span class="hljs-attr">styles.txtcenter</span>)&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">header</span> &#123;<span class="hljs-attr">...stylex.props</span>(<span class="hljs-attr">styles.header</span>)&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;logo&#125;</span> &#123;<span class="hljs-attr">...stylex.props</span>(<span class="hljs-attr">styles.logo</span>)&#125; <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;logo&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          Edit <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>src/App.js<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> and save to reload.</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span></span></span><br><span class="hljs-tag"><span class="language-xml">          &#123;<span class="hljs-attr">...stylex.props</span>(<span class="hljs-attr">styles.link</span>)&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://reactjs.org&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;noopener noreferrer&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &gt;</span></span><br><span class="language-xml">          Learn React</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>编译后运行的结果如图所示</p><p><img src="/unknown404.github.io/img/stylex/stylex.jpg"><br>可以看到命名空间的样式被拆成了多个类名</p><h2 id="stylex-优势"><a href="#stylex-优势" class="headerlink" title="stylex 优势"></a>stylex 优势</h2><h3 id="文件可扩展"><a href="#文件可扩展" class="headerlink" title="文件可扩展"></a>文件可扩展</h3><p>stylex 减少不必要的 CSS 规则和类名，从而减少最终输出的 CSS 文件大小；即使组件增加，css 大小也不会增加太多</p><p>假设样式设置为：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> logo <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./logo.svg&quot;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> stylex <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@stylexjs/stylex&quot;</span>;<br><br><span class="hljs-keyword">const</span> styles = stylex.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">link</span>: &#123;<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#61dafb&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">txt</span>: &#123;<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#61dafb&quot;</span>,<br>  &#125;,<br>&#125;);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;logo&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;logo&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> &#123;<span class="hljs-attr">...stylex.props</span>(<span class="hljs-attr">styles.txt</span>)&#125;&gt;</span></span><br><span class="language-xml">          Edit <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>src/App.js<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> and save to reload.</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span></span></span><br><span class="hljs-tag"><span class="language-xml">          &#123;<span class="hljs-attr">...stylex.props</span>(<span class="hljs-attr">styles.link</span>)&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://reactjs.org&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;noopener noreferrer&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &gt;</span></span><br><span class="language-xml">          Learn React</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><p><img src="/unknown404.github.io/img/stylex/scaleable.jpg"></p><p>从编译结果可以看到即使命名空间不同，只要样式一致都会赋给相同的类名。这种原子类名的控制粒度确保了即使项目体积增大，样式表的体积也能控制在合理的范围内。</p><h3 id="样式效果可预测"><a href="#样式效果可预测" class="headerlink" title="样式效果可预测"></a>样式效果可预测</h3><p>没有特定的样式优先级问题，最后应用的样式将覆盖先前的样式。这使得样式的应用更加简单和一致。</p><p>假设存在如下 css 文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.blue</span> &#123;<br>  <span class="hljs-attribute">color</span>: blue;<br>&#125;<br><span class="hljs-selector-class">.red</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>以及如下 html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red blue&quot;</span>&gt;</span>我是什么颜色？<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最终显示的 p 标签是什么颜色的呢？实际上，样式取决于他们在样式表中定义的顺序，.red 的定义在.blue 后面，所以 p 应该是红色的。而如果 blue 和 red 分别在两个 css 文件里，则 p 标签的颜色取决于样式文件的加载顺序。</p><p>而在 stylex 中样式的优先级只需要考虑 styles.props 中的调用顺序，以最后一个为准。例如在下面的代码中 blue 在 red 后面，所以颜色为 blue</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> stylex <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;stylex&quot;</span>;<br><br><span class="hljs-comment">// 创建样式</span><br><span class="hljs-keyword">const</span> styles = stylex.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">red</span>: &#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;red&quot;</span> &#125;,<br>  <span class="hljs-attr">blue</span>: &#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;blue&quot;</span> &#125;,<br>&#125;);<br><br><span class="hljs-comment">// 使用</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> &#123;<span class="hljs-attr">...styles.props</span>(<span class="hljs-attr">styles.red</span>, <span class="hljs-attr">styles.blue</span>)&#125;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>;<br></code></pre></td></tr></table></figure><h3 id="样式的类型安全"><a href="#样式的类型安全" class="headerlink" title="样式的类型安全"></a>样式的类型安全</h3><p>可以与 typescript 结合、定义类型声明限制自定义组件的样式传参。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123;<span class="hljs-title class_">StyleXStyles</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@stylexjs/stylex&#x27;</span>;<br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Props</span> = &#123;<br>  <span class="hljs-comment">// ...</span><br>  style?: <span class="hljs-title class_">StyleXStyles</span>&lt;&#123;<br>    color?: <span class="hljs-built_in">string</span>;<br>    backgroundColor?: <span class="hljs-built_in">string</span>;<br>    borderColor?: <span class="hljs-built_in">string</span>;<br>    borderTopColor?: <span class="hljs-built_in">string</span>;<br>    borderEndColor?: <span class="hljs-built_in">string</span>;<br>    borderBottomColor?: <span class="hljs-built_in">string</span>;<br>    borderStartColor?: <span class="hljs-built_in">string</span>;<br>  &#125;&gt;;<br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComponent</span>(<span class="hljs-params">&#123;style, ...&#125;: Props</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &#123;<span class="hljs-attr">...stylex.props</span>(<span class="hljs-attr">localStyles.foo</span>, <span class="hljs-attr">localStyles.bar</span>, <span class="hljs-attr">style</span>)&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      &#123;/* ... */&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>例如在这段代码中限制了组件 MyComponent 的 style props 只能接受如下 stylex 样式</p><h2 id="stylex-缺点"><a href="#stylex-缺点" class="headerlink" title="stylex 缺点"></a>stylex 缺点</h2><ul><li>并不提供完整的 css 选择器功能，为了使应用可预测，一些伪类选择器可能并不支持，比如 .className &gt; _、.className ~ _、.className:hover &gt; div:first-child 等</li></ul><h2 id="stylex-适用范围"><a href="#stylex-适用范围" class="headerlink" title="stylex 适用范围"></a>stylex 适用范围</h2><ul><li>用 js 控制 ui 的框架项目如 react，angular 等，vue、svelte 使用的话需要额外的自定义配置</li><li>庞大且体积不断增加的项目</li><li>可复用组件项目</li></ul><h2 id="后续碎碎念"><a href="#后续碎碎念" class="headerlink" title="后续碎碎念"></a>后续碎碎念</h2><p>因为 stylex 提供的 demo 都太简陋了，所以自己尝试用 create-react-app 搭建了一个项目测试它的使用，结果发现居然没有修改打包配置的方法，要想实现还要安装 craco 脚手架，真是麻烦。。。node 版本还必须 16 以上才能运行正常，这个怎么没在文档里写啊。。。话说 create-react-app 这个框架这么封闭、复杂点的需求还要配router和redux、为什么这么多人还喜欢用啊不理解。。。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>（1）<a href="https://stylexjs.com/docs/learn/">Introduction to StyleX</a><br>（2）<a href="https://mp.weixin.qq.com/s/ysFnkHSTSGBn1UIdapZGVg">你了解 JSX，那你了解 StyleX 么？</a></p>]]></content>
    
    
    <summary type="html">2024技术分享的文档备份</summary>
    
    
    
    <category term="技术分享" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="CSS" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>监控告警设计</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2024/01/17/errorAlert/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2024/01/17/errorAlert/</id>
    <published>2024-01-17T07:03:03.000Z</published>
    <updated>2024-01-18T07:15:52.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>监控告警是当年接手的第一个 nodejs 需求，本来想在网上搜搜成熟的方案，然而可能是由于自己搜索能力太差了，没有找到合适的方案，于是自己就按照自己的想法写了一个监控告警的方案。现在回看当时的代码还是觉得有点稚嫩，只能说功能实现了，代码确实能跑。但是不是个稳健的代码自己心里一直没数，也不知道怎么写总结文档，所以一直拖到现在才想起来。可能是个糟糕的方案，但涉及的知识点还是值得记录的。</p><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ul><li>所有的项目采集到的前端错误都写入了专门的 es 了</li><li>提供 es 增删改查的能力及可视化展示的服务器是用 eggjs 框架搭建的</li><li>前端组有自己的一个 redis 库可供全部成员使用</li></ul><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>每个项目都可以配置多个告警规则（例如 “5min 内 js 报错次数超过 10 次”连续触发了 3 次、“30min 内资源错误影响用户数不超过 100 人”连续触发了 4 次）</li><li>告警规则命中时可以利用飞书机器人发送告警信息</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="告警规则校验"><a href="#告警规则校验" class="headerlink" title="告警规则校验"></a>告警规则校验</h3><p>要实现如 5min 内 js 报错次数超过 10 次的验证，首先需要统计每 5min 内 js 报错次数。考虑到可能会出现某一时间点报错数激增的情况，5min 的时间窗不应该重叠，重叠的话连续触发次数很容易达成。告警太频繁相当于没有作用，所以希望通过连续次数进行限制，确保告警上报的问题是持续存在的，是必须要检查修正的。分析需求后得出结论：</p><ul><li>为了检测连续触发次数，<strong>需要建立一个新表</strong>，用于存储每个项目每个告警规则的设置时间间隔内、设置的错误类型它的报错次数</li><li><strong>新表的数据写入依赖于定时任务</strong>，考虑到不同规则的时间间隔可能设置的不同，定时任务的执行间隔应该为设置时间间隔的最小公约数</li></ul><p>因为前端有现成的 redis 库，所以直接用它来存储每个告警规则的设置时间间隔内、设置的错误类型它的报错次数的数据。eggjs 连接 mongo 库需要 npm 安装模块 egg-mongoose（感谢上帝官方有做这种扩展）。在 config&#x2F;config.default.js 中配置 mongo 连接信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-function">(<span class="hljs-params">appInfo</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">const</span> mongoose = &#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">`mongodb://<span class="hljs-subst">$&#123;ip&#125;</span>/`</span>, <span class="hljs-comment">//端口号可以省略</span><br>    <span class="hljs-attr">options</span>: &#123;<br>      <span class="hljs-attr">useNewUrlParser</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">auth</span>: &#123;<br>        <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;username&quot;</span>,<br>        <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;pwd&quot;</span>,<br>      &#125;,<br>    &#125;,<br>    <span class="hljs-attr">plugins</span>: [],<br>    <span class="hljs-attr">loadModel</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">app</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">agent</span>: <span class="hljs-literal">false</span>,<br>  &#125;;<br>  <span class="hljs-keyword">return</span> &#123;<br>    mongoose,<br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>之后在 app&#x2F;model&#x2F;alarm.js 中定义新表的模型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 分钟错误日志数记录</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-function">(<span class="hljs-params">app</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> mongoose = app.<span class="hljs-property">mongoose</span>;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title class_">Schema</span> = mongoose.<span class="hljs-property">Schema</span>;<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title class_">RecordsSchema</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Schema</span>(&#123;<br>    <span class="hljs-attr">total</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,<br>    &#125;,<br>    <span class="hljs-attr">timestamp</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,<br>    &#125;,<br>    <span class="hljs-attr">interval</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,<br>    &#125;,<br>    <span class="hljs-attr">projectType</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>    &#125;,<br>    <span class="hljs-attr">errorType</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>    &#125;,<br>    <span class="hljs-attr">ruleType</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>    &#125;,<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> mongoose.<span class="hljs-title function_">model</span>(<span class="hljs-string">&quot;Records&quot;</span>, <span class="hljs-title class_">RecordsSchema</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p>之后在 app&#x2F;service&#x2F; 中编写 redis 增删改查功能时，可以直接用 ctx.model.Records 代表表格操作<br>egg-mongoose 提供的函数比较有限，这里只写一下用到的几种：</p><ul><li>insertMany：插入多项数据</li><li>find：查找数据，没有设置条件则查全部</li><li>remove：删除数据</li><li>deleteMany：删除特定条件数据</li></ul><p>eggjs 为约定式目录，所以直接在 app&#x2F;schedule 下新建一个文件夹，然后在该文件夹下新建一个 js 文件，命名为<code>checkAlarm.js</code>，在该文件中编写定时任务。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">schedule</span>: &#123;<br>    <span class="hljs-attr">interval</span>: <span class="hljs-string">&quot;1m&quot;</span>, <span class="hljs-comment">// 1 分钟间隔</span><br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;worker&quot;</span>, <span class="hljs-comment">// 指定的 worker 执行</span><br>  &#125;,<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">ctx</span>) &#123;<br>    <span class="hljs-comment">// 单个报错规则判定</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">queryErrorRecords</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">rule</span>) =&gt; &#123;<br>      <span class="hljs-keyword">const</span> projectType = rule.<span class="hljs-property">projectType</span>;<br>      <span class="hljs-keyword">const</span> type = rule.<span class="hljs-property">errorType</span>;<br><br>      <span class="hljs-keyword">let</span> endTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();<br>      <span class="hljs-comment">// 如果没有错误数日志，或当前时间与上一次日志记录的时间点大于规定间隔时，向es发起查询</span><br>      <span class="hljs-keyword">if</span> (<br>        record.<span class="hljs-property">length</span> == <span class="hljs-number">0</span> ||<br>        <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<br>          (endTime - record[record.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">timestamp</span>) / (<span class="hljs-number">60</span> * <span class="hljs-number">1000</span>)<br>        ) &gt;= rule.<span class="hljs-property">interval</span><br>      ) &#123;<br>        <span class="hljs-keyword">let</span> startTime = endTime - rule.<span class="hljs-property">interval</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>;<br>        <span class="hljs-keyword">const</span> queryBody = &#123;<br>          <span class="hljs-attr">track_total_hits</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">query</span>: &#123;<br>            <span class="hljs-attr">bool</span>: &#123;<br>              <span class="hljs-attr">must</span>: [<br>                &#123;<br>                  <span class="hljs-attr">term</span>: &#123;<br>                    <span class="hljs-string">&quot;projectType.keyword&quot;</span>: projectType,<br>                  &#125;,<br>                &#125;,<br>                &#123;<br>                  <span class="hljs-attr">match</span>: &#123;<br>                    type,<br>                  &#125;,<br>                &#125;,<br>              ],<br>              <span class="hljs-attr">filter</span>: [<br>                &#123;<br>                  <span class="hljs-attr">range</span>: &#123;<br>                    <span class="hljs-attr">time</span>: &#123;<br>                      <span class="hljs-attr">gte</span>: startTime,<br>                      <span class="hljs-attr">lte</span>: endTime,<br>                    &#125;,<br>                  &#125;,<br>                &#125;,<br>              ],<br>            &#125;,<br>          &#125;,<br>          <span class="hljs-attr">sort</span>: [<br>            &#123;<br>              <span class="hljs-attr">time</span>: <span class="hljs-string">&quot;asc&quot;</span>,<br>            &#125;,<br>          ],<br>        &#125;;<br>        <span class="hljs-keyword">const</span> body = <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">esClient</span>.<span class="hljs-title function_">search</span>(queryBody);<br>        <span class="hljs-keyword">const</span> &#123;<br>          <span class="hljs-attr">hits</span>: &#123; hits, total &#125;,<br>        &#125; = body;<br>        <span class="hljs-comment">// 分警报类型处理报错</span><br>        newRecords.<span class="hljs-title function_">push</span>(&#123;<br>          <span class="hljs-attr">total</span>: total.<span class="hljs-property">value</span>,<br>          <span class="hljs-attr">timestamp</span>: endTime,<br>          <span class="hljs-attr">interval</span>: rule.<span class="hljs-property">interval</span>,<br>          <span class="hljs-attr">projectType</span>: projectType,<br>          <span class="hljs-attr">errorType</span>: type,<br>          <span class="hljs-attr">ruleType</span>: rule.<span class="hljs-property">ruleType</span>,<br>        &#125;);<br>      &#125;<br>    &#125;;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;调用定时器回调&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-comment">// 获取报警规则</span><br>    <span class="hljs-keyword">let</span> &#123; data, env &#125; = <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">alertRule</span>.<span class="hljs-title function_">getWarning</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;current env:&quot;</span>, env);<br>    <span class="hljs-comment">// 数据格式调整</span><br>    <span class="hljs-keyword">let</span> rules = <span class="hljs-title function_">flattenRuleObj</span>(data);<br>    <span class="hljs-comment">// 获取和报警轮询相关的错误数日志</span><br>    <span class="hljs-keyword">let</span> records = <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">errorRecord</span>.<span class="hljs-title function_">getRecord</span>();<br>    <span class="hljs-keyword">let</span> newRecords = [];<br>    <span class="hljs-keyword">let</span> originalRecords = newRecords.<span class="hljs-title function_">slice</span>();<br><br>    <span class="hljs-keyword">if</span> (rules.<span class="hljs-property">length</span>) &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(<br>        rules.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">async</span> (rule, idx) =&gt; &#123;<br>          <span class="hljs-keyword">await</span> <span class="hljs-title function_">queryErrorRecords</span>(rule);<br>        &#125;)<br>      );<br><br>      <span class="hljs-comment">// 减少不必要的数据更改</span><br>      <span class="hljs-keyword">if</span> (newRecords.<span class="hljs-property">length</span> != originalRecords.<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">errorRecord</span>.<span class="hljs-title function_">storeRecord</span>(newRecords, env);<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> currentTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    <span class="hljs-keyword">if</span> (currentTime.<span class="hljs-title function_">getHours</span>() == <span class="hljs-number">2</span> &amp;&amp; currentTime.<span class="hljs-title function_">getMinutes</span>() == <span class="hljs-number">10</span>) &#123;<br>      <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">errorRecord</span>.<span class="hljs-title function_">clearRecord</span>(<br>        currentTime.<span class="hljs-title function_">getTime</span>() - <span class="hljs-number">2</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>,<br>        env<br>      );<br>    &#125;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>为简化方便展示，这里只展示了部分代码。定时任务启动后，首先查询报警规则，有报警规则设置时针对每一个报警规则进行数据处理（queryErrorRecords）：</p><ul><li>用 ctx.service.errorRecord.getRecord 获取当前报警规则下时间间隔的报错数统计结果</li><li>当前定时任务时间点与上一条记录时间点进行对比，如果大于等于设定的时间点，则向 es 进行时间间隔内特定错误的报错数查询，并将新的查询数与之前的时间间隔的报错数数据一起传给 mongo，更新表格</li><li>为防止表格数据越来越多，每天凌晨 2 点 10 分定时清除 2 点之前的数据</li></ul><p>关于为什么用 ctx.service.errorRecord.getRecord 做了全查，是因为告警规则有连续触发次数的设置，同时告警规则的时间间隔是可变动的，所以不好设置查询范围；另一方面要对所有的报警规则都做一次筛选查询感觉对请求接口压力比较大，做一次全查然后在 queryErrorRecords 做筛选处理感觉更合理。</p><h3 id="告警规则触发"><a href="#告警规则触发" class="headerlink" title="告警规则触发"></a>告警规则触发</h3><p>这里只以”5min 内 js 报错次数超过 10 次”连续触发了 3 次 的规则为例进行描述</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (relevantRecord.<span class="hljs-property">length</span> &gt;= rule.<span class="hljs-property">count</span> - <span class="hljs-number">1</span> &amp;&amp; total.<span class="hljs-property">value</span> &gt;= rule.<span class="hljs-property">limitValue</span>) &#123;<br>  <span class="hljs-comment">// 判断是否符合规则</span><br>  <span class="hljs-comment">// 判别规则1:警报设置连续次数是1时判断本次轮询报错数超过阈值</span><br>  <span class="hljs-comment">// 判别规则2:警报设置连续次数大于1时判断最近几条轮询报错数是否超过阈值</span><br>  <span class="hljs-comment">// 规则2情况下需要考虑关闭警报一段时间重新开启的情况，判断中应该对relevantRecord里的时间戳做检查</span><br>  <span class="hljs-keyword">const</span> timeRange = rule.<span class="hljs-property">count</span> * rule.<span class="hljs-property">interval</span>;<br>  <span class="hljs-keyword">const</span> isHitRule =<br>    (relevantRecord.<span class="hljs-property">length</span> == <span class="hljs-number">0</span> &amp;&amp; rule.<span class="hljs-property">count</span> == <span class="hljs-number">1</span>) ||<br>    relevantRecord<br>      .<span class="hljs-title function_">slice</span>(relevantRecord.<span class="hljs-property">length</span> - rule.<span class="hljs-property">count</span> + <span class="hljs-number">1</span>, relevantRecord.<span class="hljs-property">length</span>)<br>      .<span class="hljs-title function_">every</span>(<br>        <span class="hljs-function">(<span class="hljs-params">item, i</span>) =&gt;</span><br>          item.<span class="hljs-property">total</span> &gt;= rule.<span class="hljs-property">limitValue</span> &amp;&amp;<br>          endTime - item.<span class="hljs-property">timestamp</span> &lt; (timeRange + <span class="hljs-number">1</span>) * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span><br>      );<br>  <span class="hljs-comment">// 符合规则且设置了webhook时发送警报</span><br>  <span class="hljs-keyword">if</span> (isHitRule &amp;&amp; rule.<span class="hljs-property">webhook</span>) &#123;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">robot</span>.<span class="hljs-title function_">sendSettingMessage</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;rich-text&quot;</span>,<br>      <span class="hljs-attr">webhook</span>: rule.<span class="hljs-property">webhook</span>,<br>      <span class="hljs-attr">msgBody</span>: &#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;监控报警通知&quot;</span>,<br>        <span class="hljs-attr">firstLine</span>: <span class="hljs-string">`项目<span class="hljs-subst">$&#123;projectType&#125;</span>在<span class="hljs-subst">$&#123;</span></span><br><span class="hljs-subst"><span class="hljs-string">          rule.interval</span></span><br><span class="hljs-subst"><span class="hljs-string">        &#125;</span>min间隔，发生<span class="hljs-subst">$&#123;printErrorName(type)&#125;</span>，错误数超过阈值<span class="hljs-subst">$&#123;</span></span><br><span class="hljs-subst"><span class="hljs-string">          rule.limitValue</span></span><br><span class="hljs-subst"><span class="hljs-string">        &#125;</span>，连续<span class="hljs-subst">$&#123;rule.count&#125;</span>次`</span>,<br>        <span class="hljs-attr">secondLine</span>: <span class="hljs-string">&quot;请点击&quot;</span>,<br>        <span class="hljs-attr">link</span>: <span class="hljs-string">`http://<span class="hljs-subst">$&#123;MainDomain(env)&#125;</span>/#/list/<span class="hljs-subst">$&#123;type&#125;</span>`</span>,<br>      &#125;,<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里 relevantRecord 就表示与告警规则相关的数据。当本次定时任务发现命中告警规则的时间间隔和错误数时，开始判断规则连续次数是否符合条件（连续次数为 1 直接可以告警）。用于判断的变量是 isHitRule，其逻辑如下：</p><ol><li>连续次数为 1，符合告警条件</li><li>连续次数大于 1，判断最近几条记录的错误数是否都大于阈值（需滤除关闭告警的时间段带来的误差）<br>飞书告警具体实现可以参考之前的文章</li></ol><h3 id="部署优化"><a href="#部署优化" class="headerlink" title="部署优化"></a>部署优化</h3><p>将该定时任务写好后部署到服务器上，发现有时候告警会连续报两次。经过排查后发现部署上的是一个服务器集群，共 6 个服务器，有两个执行的时间太过接近、所以当一个服务器还未传新的数据时另一个服务器也认为符合判定执行了查询、判断、告警，就导致了两次，其他时候的服务器由于读到了之前服务器推入的数据，因此不命中我的时间间隔判断条件<br>之前本来是希望参考<a href="https://blog.csdn.net/qq_24884955/article/details/82856230">这篇文章</a>设置一个服务器运行该定时任务，但是 hostname 的 hash 码太乱了，且每次上线都更新一次，没什么用</p><p>最终采用的是利用 redis 实现分布式锁的方法。分布式锁是一种在分布式系统中实现资源互斥访问机制。在多个进程或多台机器同时操作一些资源时，redis 生成一个限时的 key，使用 Redis 的 expire 特征，所以最终当用户需要释放资源时，释放 key。</p><p>事务锁的实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DBLock</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">ctx</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_uuid</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">uuid</span>(); <span class="hljs-comment">// 分布式节点的uuid</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_uuid</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">Lock</span> = ctx.<span class="hljs-property">model</span>.<span class="hljs-property">Lock</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// 基于时间戳生成的uuid</span><br>  <span class="hljs-title function_">uuid</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> d = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&quot;</span>.<span class="hljs-title function_">replace</span>(<br>      <span class="hljs-regexp">/[xy]/g</span>,<br>      <span class="hljs-keyword">function</span> (<span class="hljs-params">c</span>) &#123;<br>        <span class="hljs-keyword">var</span> r = (d + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">16</span>) % <span class="hljs-number">16</span> | <span class="hljs-number">0</span>;<br>        d = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(d / <span class="hljs-number">16</span>);<br>        <span class="hljs-keyword">return</span> (c === <span class="hljs-string">&quot;x&quot;</span> ? r : (r &amp; <span class="hljs-number">0x3</span>) | <span class="hljs-number">0x8</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>);<br>      &#125;<br>    );<br>  &#125;<br><br>  <span class="hljs-comment">// 获取一次锁</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">acquire</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">Lock</span>.<span class="hljs-title function_">create</span>(&#123;<br>        <span class="hljs-attr">_id</span>: name,<br>        <span class="hljs-attr">acquirer</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">_uuid</span>,<br>        <span class="hljs-attr">acquiredAt</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),<br>        <span class="hljs-attr">updatedAt</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),<br>      &#125;);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;error:&quot;</span> + e);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 获取锁, 每5s重试一次</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">lock</span>(<span class="hljs-params">name, retryInterval = <span class="hljs-number">5000</span></span>) &#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">acquire</span>(name)) &#123;<br>        <span class="hljs-keyword">break</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">sleep</span>(retryInterval);<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 解锁</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">unlock</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;unlock&quot;</span>);<br>    <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">Lock</span>.<span class="hljs-title function_">deleteMany</span>(&#123; <span class="hljs-attr">_id</span>: name, <span class="hljs-attr">acquirer</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">_uuid</span> &#125;);<br>  &#125;<br><br>  <span class="hljs-comment">// 续期</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">renew</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">Lock</span>.<span class="hljs-title function_">updateOne</span>(<br>      &#123; <span class="hljs-attr">_id</span>: name, <span class="hljs-attr">acquirer</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">_uuid</span> &#125;,<br>      &#123;<br>        <span class="hljs-attr">updatedAt</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),<br>      &#125;<br>    );<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;renew&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 睡眠</span><br>  <span class="hljs-title function_">sleep</span>(<span class="hljs-params">ms</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, ms));<br>  &#125;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">DBLock</span>;<br></code></pre></td></tr></table></figure><p>事务锁主要涉及的操作：</p><ul><li>uuid：唯一标识符生成，是为了解决错误删除其他线程的锁的问题，线程在删除锁的时候，用自己的 uuid 与 Redis 中锁的 uuid 进行比较，如果是自己的锁就进行删除，不是则不删除</li><li>lock：循环获取锁数据，如果获取到则跳出循环，否则等待 5s 后重试。锁数据生成：利用 Redis 的 setNx 命令在 Redis 数据库中创建一个&lt;Key，Value&gt;记录，这条命令只有当 Redis 中没有这个 Key 的时候才执行成功，当已经有这个 Key 的时候会返回失败</li><li>unlock：删除锁数据</li><li>renew：更新锁数据，延长锁的过期时间；主要用于由于业务执行时间长，最终可能导致在业务执行过程中，自己的锁超时，然后锁自动释放了</li></ul><p>在定时任务里的使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">schedule</span>: &#123;<br>    <span class="hljs-attr">interval</span>: <span class="hljs-string">&quot;1m&quot;</span>, <span class="hljs-comment">// 1 分钟间隔</span><br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;worker&quot;</span>, <span class="hljs-comment">// 指定的 worker 执行</span><br>  &#125;,<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">ctx</span>) &#123;<br>    <span class="hljs-comment">// 。。。</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;调用定时器回调&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-comment">// 获取报警规则</span><br>    <span class="hljs-keyword">let</span> &#123; data, env &#125; = <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">alertRule</span>.<span class="hljs-title function_">getWarning</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;current env:&quot;</span>, env);<br>    <span class="hljs-comment">// 数据格式调整</span><br>    <span class="hljs-keyword">let</span> rules = <span class="hljs-title function_">flattenRuleObj</span>(data);<br>    <span class="hljs-comment">// 获取和报警轮询相关的错误数日志</span><br>    <span class="hljs-keyword">let</span> records = <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">errorRecord</span>.<span class="hljs-title function_">getRecord</span>();<br>    <span class="hljs-keyword">let</span> newRecords = [];<br>    <span class="hljs-keyword">let</span> originalRecords = newRecords.<span class="hljs-title function_">slice</span>();<br><br>    <span class="hljs-keyword">if</span> (rules.<span class="hljs-property">length</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">await</span> dblock.<span class="hljs-title function_">lock</span>(<span class="hljs-string">&quot;send_errcount&quot;</span>);<br>        <span class="hljs-keyword">if</span> (rules.<span class="hljs-property">length</span>) &#123;<br>          <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(<br>            rules.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">async</span> (rule, idx) =&gt; &#123;<br>              <span class="hljs-keyword">await</span> <span class="hljs-title function_">queryErrorRecords</span>(rule);<br>            &#125;)<br>          );<br><br>          <span class="hljs-comment">// 减少不必要的数据更改</span><br>          <span class="hljs-keyword">if</span> (newRecords.<span class="hljs-property">length</span> != originalRecords.<span class="hljs-property">length</span>) &#123;<br>            <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">errorRecord</span>.<span class="hljs-title function_">storeRecord</span>(newRecords, env);<br>          &#125;<br>        &#125;<br>      &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">await</span> dblock.<span class="hljs-title function_">unlock</span>(<span class="hljs-string">&quot;send_errcount&quot;</span>);<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> currentTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    <span class="hljs-keyword">if</span> (currentTime.<span class="hljs-title function_">getHours</span>() == <span class="hljs-number">2</span> &amp;&amp; currentTime.<span class="hljs-title function_">getMinutes</span>() == <span class="hljs-number">10</span>) &#123;<br>      <span class="hljs-keyword">await</span> ctx.<span class="hljs-property">service</span>.<span class="hljs-property">errorRecord</span>.<span class="hljs-title function_">clearRecord</span>(<br>        currentTime.<span class="hljs-title function_">getTime</span>() - <span class="hljs-number">2</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>,<br>        env<br>      );<br>    &#125;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>在告警规则校验和告警规则触发的操作的之前设置锁，所有操作结束后解锁。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>（1）<a href="https://blog.csdn.net/qq_24884955/article/details/82856230">egg 服务器集群情况下的定时任务执行操作（2 种方式）</a><br>（2）<a href="https://juejin.cn/post/7239058077273620536?searchId=2024011811013604AA57490988668AB93E">图解 Redis 和 Zookeeper 分布式锁 | 京东云技术团队</a></p>]]></content>
    
    
    <summary type="html">监控告警功能的实现</summary>
    
    
    
    <category term="工作技巧" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="前端监控" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/"/>
    
    <category term="redis" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/redis/"/>
    
    <category term="eggjs" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/eggjs/"/>
    
  </entry>
  
  <entry>
    <title>react-query状态管理</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2023/11/09/react-query/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2023/11/09/react-query/</id>
    <published>2023-11-09T07:31:00.000Z</published>
    <updated>2023-11-14T01:35:23.032Z</updated>
    
    <content type="html"><![CDATA[<p>起因是在阅读<a href="https://github.com/alan2207/bulletproof-react">某 react 项目</a>时看到作者提出的项目状态管理的规则，觉得很有意思；对于平常使用 redux 一把梭的人来说，他说的这个技术方案太过陌生，所以想随手记一下。</p><span id="more"></span><h2 id="状态管理方针"><a href="#状态管理方针" class="headerlink" title="状态管理方针"></a>状态管理方针</h2><p>以下是项目作者提出的状态管理的简要概述</p><h3 id="组件状态"><a href="#组件状态" class="headerlink" title="组件状态"></a>组件状态</h3><p>对于只有当前组件才用的状态可以直接用 react 的钩子函数</p><ul><li>useState</li><li>useReducer</li></ul><h3 id="应用状态"><a href="#应用状态" class="headerlink" title="应用状态"></a>应用状态</h3><p>应用状态指在交互时发生值的改变、以控制应用的状态的这种变量，例如弹出弹窗、提示语、夜间模式等。可以使用以下方式管理</p><ul><li>context</li><li>redux<br>以及其他看起来功能很类似的库</li></ul><h3 id="表格状态"><a href="#表格状态" class="headerlink" title="表格状态"></a>表格状态</h3><p>填写表单时的数据管理，有专门的解决方案</p><ul><li>React Hook Form</li><li>Formik</li><li>React Final Form</li></ul><h3 id="服务端数据管理"><a href="#服务端数据管理" class="headerlink" title="服务端数据管理"></a>服务端数据管理</h3><p>从服务器请求得到的数据，有时需要存储起来方便后续修改等操作。可以使用以下方案</p><ul><li>react-query</li><li>swr</li><li>apollo client</li><li>urql</li></ul><p>本文这次只记录 react-query 的使用方法</p><h2 id="react-query"><a href="#react-query" class="headerlink" title="react-query"></a>react-query</h2><h3 id="使用场景举例"><a href="#使用场景举例" class="headerlink" title="使用场景举例"></a>使用场景举例</h3><p>一般来说，如果一个页面要展示请求内容，需要以下代码来实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [data, updateData] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>);<br>  <span class="hljs-keyword">const</span> [isError, setError] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> [isLoading, setLoading] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br><br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-title function_">setError</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-title function_">setLoading</span>(<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/user&#x27;</span>);<br>      <span class="hljs-title function_">updateData</span>(data);<br>    &#125; <span class="hljs-keyword">catch</span>(e) &#123;<br>      <span class="hljs-title function_">setError</span>(<span class="hljs-literal">true</span>);<br>    &#125;<br>    <span class="hljs-title function_">setLoading</span>(<span class="hljs-literal">false</span>);<br>  &#125;, [])<br><br>  <span class="hljs-comment">// 处理data</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到至少需要 3 个 state，存储数据的 data、请求加载态的 isLoading 和请求失败的 isError。如果页面涉及多个请求，这样的 state 设置还要重复好多次。<br>如果使用 react-query 实现，则代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><span class="hljs-keyword">import</span> &#123; useQuery &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-query&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123;data, isLoading, isError&#125; = <span class="hljs-title function_">useQuery</span>(<span class="hljs-string">&#x27;userData&#x27;</span>, <span class="hljs-function">() =&gt;</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/user&#x27;</span>));<br><br>  <span class="hljs-keyword">if</span> (isLoading) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>loading<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      &#123;data.map(user =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;user.id&#125;</span>&gt;</span>&#123;user.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>)&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到可以省去中间态的 state 设置，除此之外 react-query 还可以实现这些功能：</p><ul><li>多个组件请求同一个 query 时只发出一个请求</li><li>缓存数据失效&#x2F;更新策略（判断缓存合适失效，失效后自动请求数据）</li><li>对失效数据垃圾清理</li></ul><p>如何实现将在接下来的使用介绍里展开</p><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>根据 react-query v4 的说明文档，可以在 App.tsx 文件做如下配置</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">QueryClientProvider</span>, <span class="hljs-title class_">ReactQueryProviderConfig</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-query&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">queryConfig</span>: <span class="hljs-title class_">ReactQueryProviderConfig</span> = &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * refetchOnWindowFocus 窗口获得焦点时重新获取数据</span><br><span class="hljs-comment">   * staleTime 过多久重新获取服务端数据</span><br><span class="hljs-comment">   * cacheTime 数据缓存时间 默认是 5 * 60 * 1000 5分钟</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">queries</span>: &#123;<br>    <span class="hljs-attr">refetchOnWindowFocus</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">staleTime</span>: <span class="hljs-number">5</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>,<br>    <span class="hljs-attr">retry</span>: <span class="hljs-number">0</span><br>  &#125;,<br>&#125;;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">QueryClientProvider</span> <span class="hljs-attr">client</span>=<span class="hljs-string">&#123;new</span> <span class="hljs-attr">QueryClient</span>(&#123; <span class="hljs-attr">defaultOptions:</span> <span class="hljs-attr">queryConfig</span> &#125;)&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">QueryClientProvider</span>&gt;</span></span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)<br>  );<br><br></code></pre></td></tr></table></figure><p>QueryClient 是可以与缓存交互的实例，其他组件如果想要获取这个实例可以用 useQueryClient 函数实现。<br>QueryClient 实例可配置的参数包括：</p><div class="note note-info">            <p><strong>staleTime</strong> 重新获取数据的时间间隔 默认 0<br><strong>cacheTime</strong> 数据缓存时间<br><strong>retry</strong> 失败重试次数 默认 3 次<br><strong>refetchOnWindowFocus</strong> 窗口重新获得焦点时重新获取数据 默认 false<br><strong>refetchOnReconnect</strong> 网络重新链接<br><strong>refetchOnMount</strong> 实例重新挂载<br><strong>enabled</strong> 如果为“false”的化，“useQuery”不会触发</p>          </div><p>这些参数也可以在钩子函数里配置</p><p>react-query 常用的钩子函数有两个：useQuery 和 useMutation，用于应对常见的数据操作</p><h3 id="useQuery（数据查询）"><a href="#useQuery（数据查询）" class="headerlink" title="useQuery（数据查询）"></a>useQuery（数据查询）</h3><h4 id="书写规范"><a href="#书写规范" class="headerlink" title="书写规范"></a>书写规范</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useQuery &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-query&quot;</span>;<br><span class="hljs-comment">// v3写法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> info = <span class="hljs-title function_">useQuery</span>(<span class="hljs-string">&quot;todos&quot;</span>, fetchTodoList);<br>&#125;<br><span class="hljs-comment">// v4+写法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> info = <span class="hljs-title function_">useQuery</span>(&#123; <span class="hljs-attr">queryKey</span>: [<span class="hljs-string">&quot;todos&quot;</span>], <span class="hljs-attr">queryFn</span>: fetchTodoList &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="入参出参"><a href="#入参出参" class="headerlink" title="入参出参"></a>入参出参</h4><p>queryKey 可以都是字符串数组，也可以是 object 元素<br>queryFn 可以自动接收到 queryKey 的值，通常会返回 promise 值；如果考虑请求出错、返回 rejected 状态的情况的话，queryFn 的内部需要考虑做抛出错误的处理，以 fetch 请求为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">useQuery</span>(&#123;<br>  <span class="hljs-attr">queryKey</span>: [<span class="hljs-string">&quot;todos&quot;</span>, todoId],<br>  <span class="hljs-attr">queryFn</span>: <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;/todos/&quot;</span> + todoId);<br>    <span class="hljs-keyword">if</span> (!response.<span class="hljs-property">ok</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Network response was not ok&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>();<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>当 queryKey 的内容发生变动时 queryFn 的内容就会自动执行<br>useQuery 返回的内容包括：</p><div class="note note-info">            <p><strong>isLoading</strong>：请求是否在加载数据<br><strong>isError</strong>：请求是否报错<br><strong>isFetching</strong>：是否有一个挂起的请求，适用于无限滚动<br><strong>data</strong>：请求返回数据</p>          </div><h3 id="useMutation（数据增删改）"><a href="#useMutation（数据增删改）" class="headerlink" title="useMutation（数据增删改）"></a>useMutation（数据增删改）</h3><p>该函数钩子通常用于有副作用的场景。</p><h4 id="书写规范-1"><a href="#书写规范-1" class="headerlink" title="书写规范"></a>书写规范</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useQuery &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-query&quot;</span>;<br><span class="hljs-comment">// v3写法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [mutate] = <span class="hljs-title function_">useMutation</span>(<span class="hljs-function">(<span class="hljs-params">newTodo</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/todos&quot;</span>, newTodo);<br>  &#125;);<br>&#125;<br><span class="hljs-comment">// v4+写法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> mutation = <span class="hljs-title function_">useMutation</span>(&#123;<br>    <span class="hljs-attr">mutationFn</span>: <span class="hljs-function">(<span class="hljs-params">newTodo</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/todos&quot;</span>, newTodo);<br>    &#125;,<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="入参出参-1"><a href="#入参出参-1" class="headerlink" title="入参出参"></a>入参出参</h4><p>常用的入参包括：</p><div class="note note-info">            <p><strong>mutationFn</strong>：用于处理请求的函数，返回 promise 对象<br><strong>onMutate</strong>：请求触发、将要执行前触发的回调函数<br><strong>onError</strong>：请求失败时触发的回调函数<br><strong>onSuccess</strong>：请求失败时触发的回调函数<br><strong>onSettled</strong>：请求完成时触发的回调函数，不管成功与否；执行时机在 onSuccess 和 onError 之后</p>          </div><p>除此以外也可以配置请求操作相关的一些配置，例如重试、重试延迟等<br>返回的内容主要包括：</p><div class="note note-info">            <p><strong>mutate</strong>：在代码中运行突变的操作，接受的入参包括 mutationFn 的入参和 onSuccess、onError、onSettled<br><strong>isPending</strong>：请求是否在加载数据<br><strong>isError</strong>：请求是否报错</p>          </div><p>涉及增删改的操作可以使用乐观更新来减少等待加载的时间，让用户体验更好。所谓乐观更新、就是前端默认后端接口请求一定会成功、提前将修改结果展示出来。<br>以下面这段代码为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">useDeleteDiscussion</span> = (<span class="hljs-params">&#123; config &#125;: UseDeleteDiscussionOptions = &#123;&#125;</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; addNotification &#125; = <span class="hljs-title function_">useNotificationStore</span>();<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">useMutation</span>(&#123;<br>    <span class="hljs-attr">onMutate</span>: <span class="hljs-keyword">async</span> (deletedDiscussion) =&gt; &#123;<br>      <span class="hljs-keyword">await</span> queryClient.<span class="hljs-title function_">cancelQueries</span>(<span class="hljs-string">&#x27;discussions&#x27;</span>);<br><br>      <span class="hljs-keyword">const</span> previousDiscussions = queryClient.<span class="hljs-property">getQueryData</span>&lt;<span class="hljs-title class_">Discussion</span>[]&gt;(<span class="hljs-string">&#x27;discussions&#x27;</span>);<br><br>      queryClient.<span class="hljs-title function_">setQueryData</span>(<br>        <span class="hljs-string">&#x27;discussions&#x27;</span>,<br>        previousDiscussions?.<span class="hljs-title function_">filter</span>(<br>          <span class="hljs-function">(<span class="hljs-params">discussion</span>) =&gt;</span> discussion.<span class="hljs-property">id</span> !== deletedDiscussion.<span class="hljs-property">discussionId</span><br>        )<br>      );<br><br>      <span class="hljs-keyword">return</span> &#123; previousDiscussions &#125;;<br>    &#125;,<br>    <span class="hljs-attr">onError</span>: <span class="hljs-function">(<span class="hljs-params">_, __, context: any</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (context?.<span class="hljs-property">previousDiscussions</span>) &#123;<br>        queryClient.<span class="hljs-title function_">setQueryData</span>(<span class="hljs-string">&#x27;discussions&#x27;</span>, context.<span class="hljs-property">previousDiscussions</span>);<br>      &#125;<br>    &#125;,<br>    <span class="hljs-attr">onSuccess</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      queryClient.<span class="hljs-title function_">invalidateQueries</span>(<span class="hljs-string">&#x27;discussions&#x27;</span>);<br>      <span class="hljs-title function_">addNotification</span>(&#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;success&#x27;</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Discussion Deleted&#x27;</span>,<br>      &#125;);<br>    &#125;,<br>    ...config,<br>    <span class="hljs-attr">mutationFn</span>: <span class="hljs-function">(<span class="hljs-params">&#123; discussionId &#125;: &#123; discussionId: string &#125;</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">delete</span>(<span class="hljs-string">`/discussions/<span class="hljs-subst">$&#123;discussionId&#125;</span>`</span>);<br>    &#125;<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>这段代码的大致逻辑是：</p><ul><li>删除请求触发onMutate回调，为了乐观更新首先取消已有的讨论的请求（应该是为了应对配置了更新策略的queryClient）；从缓存中取出已存储的讨论列表、滤除删除的目标讨论、利用setQueryData将结果存入缓存</li><li>删除请求成功时，用invalidateQueries清除缓存、重新拉取数据</li><li>删除请求失败时，缓存重新存入上一次缓存即未删除的内容，相当于回退</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>（1）<a href="https://juejin.cn/post/6882669076540456967">react-query</a><br>（2）<a href="https://juejin.cn/column/7105422212789714980">react-query手把手教程</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;起因是在阅读&lt;a href=&quot;https://github.com/alan2207/bulletproof-react&quot;&gt;某 react 项目&lt;/a&gt;时看到作者提出的项目状态管理的规则，觉得很有意思；对于平常使用 redux 一把梭的人来说，他说的这个技术方案太过陌生，所以想随手记一下。&lt;/p&gt;</summary>
    
    
    
    <category term="技术学习" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="React" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/React/"/>
    
    <category term="状态管理" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>带缩略图的图片切换展示实现</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2023/11/09/thumbSwipe/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2023/11/09/thumbSwipe/</id>
    <published>2023-11-09T07:04:30.000Z</published>
    <updated>2023-12-05T03:14:12.850Z</updated>
    
    <content type="html"><![CDATA[<p>简单记录一下做需求时遇到的问题和思考</p><span id="more"></span><h2 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h2><ol><li>实现一个带缩略图的图片切换模块；大图片支持左右翻页查看，也支持点选小图查看。</li><li>缩略图图片数量较少时整体居中；图片较多时缩略图支持滚动。点击缩略图选中的小图处于正中</li><li>点击大图打开预览弹窗，预览可左右滑动查看图片，再次点击退出预览态</li><li>预览态图片展示原则：过长的图片，放大且从顶部开始展示，可向下滑动查看；短图居中展示</li></ol><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ol><li>因为需求涉及到很多图片切换展示，可使用已有的方案 swiper 组件，如果使用了 vue 框架则使用 vue-awesome-swiper、配合 swiper 以前使用。安装时注意版本问题，高版本的 swiper 只能使用 vue 3 版本的 vue-awesome-swiper 调用，如果要使用 vue2 语法，版本可参考：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;swiper&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^5.4.5&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;vue-awesome-swiper&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.1.1&quot;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>带缩略图的图片轮播官网有给实现<a href="https://github.com/surmon-china/surmon-china.github.io/blob/vue2/projects/vue-awesome-swiper/examples/30-thumbs-gallery.vue">案例</a><br>大图的展示使用 swiper 组件没有疑问。但实现的缩略图在轮播条件下样式比较合理，不然首图居中时左侧出现大片空白感觉很奇怪；因此缩略图的实现放弃用 swiper，将父容器设置为溢出滚动，小图包裹在一个容器里，在不滚动的时候利用 flex 布局让小图整体的容器居中</p><ol start="2"><li>缩略图较多、需要滑动查看缩略图并点击时使选中的缩略图位于父容器中间的实现可以利用浏览器的 API：scrollIntoView。一般说来使用这个 API 时可能直接就使用默认的方法、没有考虑过传参， 但实际上该 API 提供了入参让我们可以改变滚动进视野的方式：</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> alignToTop = <span class="hljs-built_in">boolean</span>;<br><span class="hljs-keyword">type</span> scrollIntoViewOptions = &#123;<br>  <span class="hljs-attr">behavior</span>: <span class="hljs-string">&quot;auto&quot;</span> | <span class="hljs-string">&quot;smooth&quot;</span>;<br>  <span class="hljs-attr">block</span>: <span class="hljs-string">&quot;start&quot;</span> | <span class="hljs-string">&quot;center&quot;</span> | <span class="hljs-string">&quot;end&quot;</span> | <span class="hljs-string">&quot;nearest&quot;</span>;<br>  <span class="hljs-attr">inline</span>: <span class="hljs-string">&quot;start&quot;</span> | <span class="hljs-string">&quot;center&quot;</span> | <span class="hljs-string">&quot;end&quot;</span> | <span class="hljs-string">&quot;nearest&quot;</span>;<br>&#125;;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Element</span> &#123;<br>  <span class="hljs-title function_">scrollIntoView</span>(arg?: alignToTop | scrollIntoViewOptions): <span class="hljs-built_in">void</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中 block 就是决定竖直方向的对齐方式，inline 是决定左右方向的对齐方式，可以对这两个参数进行操作。</p><ol start="3"><li>图片列表加载时可能需要一些时间，偶尔可能会出现部分图片加载失败。为避免显示失败，需要增加过渡态展示，这里以变量imgLoaded控制，通过监听图片加载的load过程来改变imgLoaded的值，当所有图片加载结束时变更imgLoaded、展示图片。</li></ol><p>最后带缩略的图片展示模块的实现大致如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;img-list-container&quot;&gt;<br>    &lt;div class=&quot;img-list-wrap&quot; v-show=&quot;imgList &amp;&amp; imgList.length&quot;&gt;<br>      &lt;!-- swiper1 --&gt;<br>      &lt;swiper<br>        class=&quot;swiper gallery-top&quot;<br>        :options=&quot;swiperOptionTop&quot;<br>        ref=&quot;swiperTop&quot;<br>        @slideChange=&quot;onSlideChange&quot;<br>      &gt;<br>        &lt;swiper-slide<br>          class=&quot;img-slide&quot;<br>          v-for=&quot;(item, idx) in imgList&quot;<br>          :key=&quot;idx&quot;<br>        &gt;<br>          &lt;img<br>            :src=&quot;item.url&quot;<br>            class=&quot;img-content&quot;<br>            @click=&quot;showPreviewModal&quot;<br>            v-show=&quot;imgLoaded&quot;<br>            @load=&quot;bigPicLoad(item.url, idx)&quot;<br>            @error=&quot;(event) =&gt; bigPicLoadFail(item.url, idx, event)&quot;<br>          /&gt;<br>          &lt;img<br>            src=&quot;./loading.gif&quot;<br>            class=&quot;img-content_0 center&quot;<br>            v-show=&quot;!imgLoaded&quot;<br>          /&gt;<br>        &lt;/swiper-slide&gt;<br>      &lt;/swiper&gt;<br>      &lt;!-- Thumbs --&gt;<br>      &lt;div<br>        :class=&quot;[<br>          &#x27;gallery-thumbs&#x27;,<br>          imgList &amp;&amp; imgList.length &lt; 6 &amp;&amp; &#x27;no-scroll&#x27;,<br>        ]&quot;<br>        ref=&quot;swiperThumbs&quot;<br>      &gt;<br>        &lt;div<br>          :class=&quot;[&#x27;thumb-wrap&#x27;, imgList &amp;&amp; imgList.length &lt; 6 &amp;&amp; &#x27;no-scroll&#x27;]&quot;<br>        &gt;<br>          &lt;div<br>            :class=&quot;[&#x27;img-thumb&#x27;, idx === activeIndex &amp;&amp; &#x27;img-thumb-active&#x27;]&quot;<br>            v-for=&quot;(item, idx) in imgList&quot;<br>            :key=&quot;idx&quot;<br>            @click=&quot;(event) =&gt; changeActiveIdx(event, idx)&quot;<br>          &gt;<br>            &lt;img<br>              :src=&quot;item.url&quot;<br>              class=&quot;img-content&quot;<br>              v-show=&quot;smallImgLoaded&quot;<br>              @load=&quot;smallPicLoad(item.url, idx)&quot;<br>            /&gt;<br>            &lt;img<br>              src=&quot;./loading.gif&quot;<br>              class=&quot;img-content_0&quot;<br>              v-show=&quot;!smallImgLoaded&quot;<br>            /&gt;<br>          &lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br><br>    &lt;img-preview<br>      :currentIdx=&quot;activeIndex&quot;<br>      :imgList=&quot;imgList&quot;<br>      ref=&quot;previewModal&quot;<br>    /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import ImgPreview from &quot;@/wap/components/ImgPreview.vue&quot;;<br><br>import &#123; Swiper, SwiperSlide &#125; from &quot;vue-awesome-swiper&quot;;<br>import &quot;swiper/css/swiper.css&quot;;<br><br>export default &#123;<br>  name: &quot;swiper-thumbs-gallery&quot;,<br>  props: &#123;<br>    imgList: &#123;<br>      type: Array,<br>      default: [],<br>    &#125;,<br>  &#125;,<br>  components: &#123;<br>    Swiper,<br>    SwiperSlide,<br>    ImgPreview,<br>  &#125;,<br><br>  watch: &#123;<br>    imgList: &#123;<br>      deep: true,<br>      handler(newVal) &#123;<br>        this.activeIndex = 0;<br>        this.imgLoaded = false;<br>        this.smallImgLoaded = false;<br>        this.topCount = 0;<br>        this.thumbCount = 0;<br>        this.swiperTop.slideTo(this.activeIndex);<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>  data() &#123;<br>    return &#123;<br>      swiperOptionTop: &#123;<br>        loop: false,<br>        loopedSlides: this.imgList.length,<br>        spaceBetween: 10,<br>      &#125;,<br>      swiperTop: null,<br>      swiperThumbs: null,<br>      activeIndex: 0,<br>      imgLoaded: false,<br>      smallImgLoaded: false,<br>      topCount: 0,<br>      thumbCount: 0,<br>    &#125;;<br>  &#125;,<br>  mounted() &#123;<br>    this.$nextTick(() =&gt; &#123;<br>      this.swiperTop = this.$refs.swiperTop.$swiper;<br>      this.swiperThumbs = this.$refs.swiperThumbs.$swiper;<br>    &#125;);<br>  &#125;,<br>  methods: &#123;<br>    bigPicLoad(url, idx) &#123;<br>      this.topCount++;<br>      if (this.topCount === this.imgList.length) &#123;<br>        this.imgLoaded = true;<br>      &#125;<br>    &#125;,<br>    bigPicLoadFail(url, idx, event) &#123;<br>      event.target.style =<br>        &quot;width:57px;height:43px;position: absolute;left: 50%;top: 50%;transform: translate(-50%, -50%);&quot;;<br>      this.imgList[idx].url = &quot;./fail.png&quot;;<br>      this.topCount++;<br>      if (this.topCount === this.imgList.length) &#123;<br>        this.imgLoaded = true;<br>      &#125;<br>    &#125;,<br>    smallPicLoad(url, idx) &#123;<br>      console.log(&quot;small loaded&quot;, url, idx, this.imgList.length);<br>      this.thumbCount++;<br>      if (this.thumbCount === this.imgList.length) &#123;<br>        this.smallImgLoaded = true;<br>      &#125;<br>    &#125;,<br>    onSlideChange() &#123;<br>      console.log(&quot;swiper&quot;, this.swiperTop.activeIndex);<br>      this.activeIndex = this.swiperTop.activeIndex;<br>    &#125;,<br>    changeActiveIdx(event, idx) &#123;<br>      this.activeIndex = idx;<br>      this.swiperTop.slideTo(this.activeIndex);<br>      event.target.scrollIntoView(&#123;<br>        block: &quot;nearest&quot;,<br>        inline: &quot;center&quot;,<br>      &#125;);<br>    &#125;,<br>    showPreviewModal() &#123;<br>      this.$refs[&quot;previewModal&quot;].show();<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>.swiper &#123;<br>  .swiper-slide &#123;<br>    background-size: cover;<br>    background-position: center;<br>  &#125;<br>&#125;<br><br>.gallery-top &#123;<br>  height: 387px;<br>  width: 100%;<br><br>  .img-content_0 &#123;<br>    width: 42px;<br>    height: 58px;<br>    padding-top: 149px;<br>    box-sizing: content-box;<br>    margin: auto;<br>  &#125;<br><br>  .img-content_-1 &#123;<br>    width: 57px;<br>    height: 57px;<br>    padding-top: 156px;<br>    box-sizing: content-box;<br>    margin: auto;<br>  &#125;<br><br>  .txt &#123;<br>    font-size: 14px;<br>    font-weight: 400;<br>    color: #ffffff;<br>    line-height: 20px;<br>    margin-top: 13px;<br>  &#125;<br><br>  .img-content &#123;<br>    width: 100%;<br>    height: 100%;<br>    object-fit: cover;<br>  &#125;<br><br>  .watermark &#123;<br>    position: absolute;<br>    right: 7px;<br>    bottom: 10px;<br>    width: 79px;<br>    height: 22px;<br>  &#125;<br>&#125;<br><br>.gallery-thumbs &#123;<br>  height: 62px;<br>  box-sizing: border-box;<br>  padding: 8px 0;<br>  overflow-x: scroll;<br>  overflow-y: hidden;<br><br>  &amp;::-webkit-scrollbar &#123;<br>    display: none;<br>    width: 0;<br>    height: 0;<br>  &#125;<br><br>  &amp;.no-scroll &#123;<br>    display: flex;<br>    justify-content: center;<br>  &#125;<br><br>  .thumb-wrap &#123;<br>    display: flex;<br>  &#125;<br><br>  .img-thumb &#123;<br>    display: inline-block;<br>    width: 46px;<br>    height: 46px;<br>    border-radius: 6px;<br>    overflow: hidden;<br>    margin-right: 8px;<br>    flex-shrink: 0;<br>    box-sizing: border-box;<br><br>    .img-content &#123;<br>      width: 100%;<br>      height: 100%;<br>      object-fit: cover;<br>    &#125;<br>  &#125;<br><br>  .img-thumb-active &#123;<br>    border: 2px solid #3269ff;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li>图片的预览实现起来本身并不复杂，还是利用 swiper 组件，但一些细节点需要注意：</li></ol><ul><li>高度自适应尽量不要用 fit-content 而是 auto，因为在 iOS 系统，部分机型不支持这个属性</li><li>需要监听从图片展示模块传输的当前图片的 index，操作预览模块的 swiper 跳到该 index 的位置</li><li>点击事件不要挂在 swiper 和 swiper-slide 组件上，否则无法生效</li><li>为防止滚动查看预览弹窗时后面页面滚动，需要改变body的样式</li></ul><p>最终预览模块的实现大致如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;preview-list-container&quot; v-show=&quot;modalVisible&quot;&gt;<br>    &lt;!-- swiper1 --&gt;<br>    &lt;swiper<br>      class=&quot;swiper gallery-top&quot;<br>      :options=&quot;swiperOptionTop&quot;<br>      ref=&quot;swiperTop&quot;<br>      @slideChange=&quot;onSlideChange&quot;<br>    &gt;<br>      &lt;swiper-slide class=&quot;img-slide&quot; v-for=&quot;(item, idx) in imgList&quot; :key=&quot;idx&quot;&gt;<br>        &lt;div class=&quot;img-container&quot; @click=&quot;hidden&quot;&gt;<br>          &lt;div class=&quot;img-wrap&quot;&gt;<br>            &lt;img :src=&quot;item.url&quot; class=&quot;img-content&quot; /&gt;<br>          &lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/swiper-slide&gt;<br>    &lt;/swiper&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; Swiper, SwiperSlide &#125; from &quot;vue-awesome-swiper&quot;;<br>import &quot;swiper/css/swiper.css&quot;;<br><br>export default &#123;<br>  name: &quot;img-preview&quot;,<br>  props: &#123;<br>    imgList: &#123;<br>      type: Array,<br>      default: [],<br>    &#125;,<br>    currentIdx: &#123;<br>      type: Number,<br>      default: 0,<br>    &#125;,<br>  &#125;,<br>  components: &#123;<br>    Swiper,<br>    SwiperSlide,<br>  &#125;,<br>  watch: &#123;<br>    currentIdx: &#123;<br>      handler(newVal) &#123;<br>        this.activeIndex = newVal;<br>        this.swiperTop.slideTo(this.activeIndex);<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>  data() &#123;<br>    return &#123;<br>      swiperOptionTop: &#123;<br>        loop: false,<br>        loopedSlides: this.imgList.length,<br>        spaceBetween: 10,<br>      &#125;,<br>      swiperTop: null,<br>      activeIndex: 0,<br>      modalVisible: false,<br>    &#125;;<br>  &#125;,<br>  created() &#123;<br>    this.activeIndex = this.currentIdx;<br>  &#125;,<br>  mounted() &#123;<br>    this.$nextTick(() =&gt; &#123;<br>      this.swiperTop = this.$refs.swiperTop.$swiper;<br>    &#125;);<br>  &#125;,<br>  methods: &#123;<br>    onSlideChange() &#123;<br>      this.activeIndex = this.swiperTop.activeIndex;<br>    &#125;,<br>    show() &#123;<br>      this.modalVisible = true;<br>      document.body.style.overflow = &quot;hidden&quot;;<br>    &#125;,<br>    hidden() &#123;<br>      this.modalVisible = false;<br>      document.body.style.overflow = &quot;&quot;;<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>.preview-list-container &#123;<br>  position: fixed;<br>  width: 100%;<br>  height: 100vh;<br>  left: 0;<br>  top: 0;<br>  background: #000;<br>  z-index: 2000;<br><br>  .img-wrap &#123;<br>    position: relative;<br>    width: 100%;<br>  &#125;<br><br>  .toolkit-container &#123;<br>    position: fixed;<br>    left: 0;<br>    bottom: 0;<br>    width: 100%;<br>    padding: 15px 24px 48px;<br>    background: rgba(0, 0, 0, 0.5);<br>    display: flex;<br>    justify-content: space-between;<br>    align-items: center;<br>    color: #fff;<br>    font-size: 16px;<br>    line-height: 22px;<br>    z-index: 999;<br><br>    .toolkit-wrap &#123;<br>      display: flex;<br><br>      .toolkit &#123;<br>        display: flex;<br>        align-items: center;<br>        margin-left: 32px;<br><br>        .icon &#123;<br>          width: 16px;<br>          height: 16px;<br>          object-fit: contain;<br>          margin-right: 4px;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br>.swiper &#123;<br>  .swiper-slide &#123;<br>    background-size: cover;<br>    background-position: center;<br>  &#125;<br><br>  &amp;.gallery-top &#123;<br>    width: 100%;<br>    height: 100vh;<br><br>    .img-container &#123;<br>      width: 100%;<br>      height: 100vh;<br>      display: flex;<br>      align-items: center;<br>      overflow-y: scroll;<br>    &#125;<br><br>    .watermark &#123;<br>      position: absolute;<br>      right: 7px;<br>      bottom: 10px;<br>      width: 79px;<br>      height: 22px;<br>    &#125;<br><br>    .img-content &#123;<br>      width: 100%;<br>      height: auto;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>（1）<a href="https://segmentfault.com/a/1190000041886147">详细介绍 scrollIntoView 方法</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单记录一下做需求时遇到的问题和思考&lt;/p&gt;</summary>
    
    
    
    <category term="工作技巧" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="WEB API" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/WEB-API/"/>
    
  </entry>
  
  <entry>
    <title>移动端开发时的系统兼容性问题</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2023/10/27/iosCompat/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2023/10/27/iosCompat/</id>
    <published>2023-10-27T13:10:36.000Z</published>
    <updated>2024-06-11T06:14:15.405Z</updated>
    
    <content type="html"><![CDATA[<p>吐槽一下移动端开发时碰到的各种意想不到的兼容性问题。</p><span id="more"></span><h1 id="浏览器篇"><a href="#浏览器篇" class="headerlink" title="浏览器篇"></a>浏览器篇</h1><h2 id="问题-1-ios-系统输入框-disabled-状态样式过浅"><a href="#问题-1-ios-系统输入框-disabled-状态样式过浅" class="headerlink" title="问题 1: ios 系统输入框 disabled 状态样式过浅"></a>问题 1: ios 系统输入框 disabled 状态样式过浅</h2><p>解决方法：增加 -webkit-text-fill-color 属性配置以及要调整 opacity。如下示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">textarea</span><span class="hljs-selector-pseudo">:disabled</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">1</span>);<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>  -webkit-text-fill-<span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="问题-2-安卓移动端软键盘弹出时底部-fixed-定位被顶上去"><a href="#问题-2-安卓移动端软键盘弹出时底部-fixed-定位被顶上去" class="headerlink" title="问题 2:安卓移动端软键盘弹出时底部 fixed 定位被顶上去"></a>问题 2:安卓移动端软键盘弹出时底部 fixed 定位被顶上去</h2><p>原因是安卓系统和 ios 系统加载键盘的方式不同<br>解决方法：window.onresize 监听页面高度的变化，手动来控制吸底组件的显示和隐藏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;footer&quot; v-show=&quot;hideshow&quot;&gt;&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      docmHeight: &quot;&quot;, //第一次获取高度<br>      nowHeight: &quot;&quot;,<br>      hideshow: true,<br>      isResize: false,<br>    &#125;;<br>  &#125;,<br>  watch: &#123;<br>    // 如果 clientHeight 发生改变，这个函数就会运行<br>    nowHeight: function () &#123;<br>      if (this.docmHeight != this.nowHeight) &#123;<br>        this.hideshow = false;<br>      &#125; else &#123;<br>        this.hideshow = true;<br>      &#125;<br>    &#125;,<br>  &#125;,<br>  mounted() &#123;<br>    // 获取浏览器可视区域高度<br>    this.docmHeight = document.documentElement.clientHeight; // document.body.clientWidth;<br>    window.onresize = () =&gt; &#123;<br>      // 在窗口或框架被调整大小时触发<br>      return (() =&gt; &#123;<br>        this.nowHeight = document.documentElement.clientHeight;<br>        console.log(&quot;当前高度&quot;, this.nowHeight);<br>      &#125;)();<br>    &#125;;<br>  &#125;,<br>  methods: &#123;&#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><em>个人碎碎念：其实我觉得这个方法并不好，有的手机支持横屏，横屏时页面肯定会触发 resize 事件，然后底部组件消失了？毕竟 mounted 生命周期不会再次触发。之前自己想的是键盘弹起事件和 input 组件聚焦强关联，把隐藏底部组件的触发时机放在聚焦上。但此时遇到较真的产品就会认为页面滚动时应该让 input 失焦，但浏览器并不会实现这个效果，逻辑的实现又十分复杂。所以最好的解决方案就是换个设计吧。。。</em></p><h2 id="问题-3-针对整个屏幕竖直居中的图片在-ios-的-Safari-和-Chrome-浏览器不居中"><a href="#问题-3-针对整个屏幕竖直居中的图片在-ios-的-Safari-和-Chrome-浏览器不居中" class="headerlink" title="问题 3: 针对整个屏幕竖直居中的图片在 ios 的 Safari 和 Chrome 浏览器不居中"></a>问题 3: 针对整个屏幕竖直居中的图片在 ios 的 Safari 和 Chrome 浏览器不居中</h2><p>原因：书写样式时父元素的高度设置为 100vh，也就是屏幕高度，而 Safari 和 Chrome 都有工具栏，在工具栏显示的情况下看起来就不怎么竖直居中了。其实这是 100vh 的一个 bug，可以详见<a href="https://juejin.cn/post/7313979304513552435">这篇文章</a><br>解决方法：外层父元素高度设置为 100%，因为 position 的设置该元素已经脱离了原本文本流、基准变为视口，高度设置为 100%也不会出现撑不起高度的情况，会依照视口高度定值；虽然 document.documentElement.clientHeight 和 window.innerHeight 可获取可视高度，但 Safari 的工具栏是下滑时可隐藏的，所以需要反复监听高度进行调整也比较麻烦</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.modal-container</span> &#123;<br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#000</span>;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">2000</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="问题-4-小米浏览器夜间模式白色图片发黑"><a href="#问题-4-小米浏览器夜间模式白色图片发黑" class="headerlink" title="问题 4:小米浏览器夜间模式白色图片发黑"></a>问题 4:小米浏览器夜间模式白色图片发黑</h2><p>原因：好像是特定的浏览器版本，会在夜间模式对白色图片进行反色<br>反色原理接近<code>filter: invert(110%) hue-rotate(180deg)</code>，但实际操作时按这个方法反色回去发现透明部分也被反色了，所以可能 filter 的方法还缺少参数<br>解决方法：一个可能性比较高的解决方法是：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">prefers-color-scheme</span>: dark) &#123;<br>  <span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">filter</span>: none <span class="hljs-meta">!important</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样可以去除夜间模式的过滤器效果</p><h2 id="问题-5-使用-vue-lazyload-懒加载图片流时，安卓手机会出现某一页面的第一帧图片流呈加载态，只有滚动后才变为有图片的情况"><a href="#问题-5-使用-vue-lazyload-懒加载图片流时，安卓手机会出现某一页面的第一帧图片流呈加载态，只有滚动后才变为有图片的情况" class="headerlink" title="问题 5:使用 vue-lazyload 懒加载图片流时，安卓手机会出现某一页面的第一帧图片流呈加载态，只有滚动后才变为有图片的情况"></a>问题 5:使用 vue-lazyload 懒加载图片流时，安卓手机会出现某一页面的第一帧图片流呈加载态，只有滚动后才变为有图片的情况</h2><p>原因：不是很明了，可能与<a href="https://juejin.cn/post/7015142066145460231">这篇文章</a>说的有关系，iOS 会触发 resize 事件，android 不会。<br>解决方法：在页面加载或者激活的生命周期加一个滚动函数，滚 1px，触发加载</p><h2 id="问题-6-粘贴板功能在部分环境失效"><a href="#问题-6-粘贴板功能在部分环境失效" class="headerlink" title="问题 6:粘贴板功能在部分环境失效"></a>问题 6:粘贴板功能在部分环境失效</h2><p>原因：粘贴板使用的是 navigator.clipboard，该方法在 iOS 或比较先进的浏览器才会生效，而微信小程序安卓 webview 环境下使用用这个方法会报错<br>解决方法：增加 navigator.clipboard 的 api 使用检查和设备识别，如果不存在该 api 则使用 npm 包 copy-to-clipboard 的方法</p><h2 id="问题-7-安卓-qq-浏览器点击图片会自动放大"><a href="#问题-7-安卓-qq-浏览器点击图片会自动放大" class="headerlink" title="问题 7:安卓 qq 浏览器点击图片会自动放大"></a>问题 7:安卓 qq 浏览器点击图片会自动放大</h2><p>原因：qq 浏览器的自发行为（就跟他有时候会自动屏蔽 ad-wrap 的元素一样离谱）<br>解决方法：使用 css 样式 pointer-events: none;可以阻止浏览器默认行为，但是如果希望保留一些浏览器默认行为如长按保存就不能使用该样式</p><h2 id="问题-8-ios-的-safari-下拉页面时页面外区域是黑的"><a href="#问题-8-ios-的-safari-下拉页面时页面外区域是黑的" class="headerlink" title="问题 8:ios 的 safari 下拉页面时页面外区域是黑的"></a>问题 8:ios 的 safari 下拉页面时页面外区域是黑的</h2><p>原因：和 meta 上设置的 theme color 有关<br>解决方法：document.querySelector(‘meta[name&#x3D;”theme-color”]’).setAttribute(‘content’, bgColor || “#141416”)</p><h2 id="问题-9-ios-部分机型-border-radius-和-overflow：hidden-样式不生效"><a href="#问题-9-ios-部分机型-border-radius-和-overflow：hidden-样式不生效" class="headerlink" title="问题 9:ios 部分机型 border-radius 和 overflow：hidden 样式不生效"></a>问题 9:ios 部分机型 border-radius 和 overflow：hidden 样式不生效</h2><p>原因：根据<a href="https://juejin.cn/post/7372396174249459750">这篇文章</a>应该是因为 ios 手机会在 transform 的时候导致 border-radius 失效<br>解决方法：1.按照文章的改法、使用动画效果带 transform 的元素的上一级 div 元素的 css 加上语句<code>-webkit-transform:rotate(0deg);</code><br>；2.将圆角样式加到内容器而不是带 transform 样式的外容器</p><h1 id="小程序篇"><a href="#小程序篇" class="headerlink" title="小程序篇"></a>小程序篇</h1><h2 id="问题-1-弹窗滚动穿透问题（即弹窗出现时页面还可以做滚动操作）"><a href="#问题-1-弹窗滚动穿透问题（即弹窗出现时页面还可以做滚动操作）" class="headerlink" title="问题 1: 弹窗滚动穿透问题（即弹窗出现时页面还可以做滚动操作）"></a>问题 1: 弹窗滚动穿透问题（即弹窗出现时页面还可以做滚动操作）</h2><p>解决方法：跟使用的技术及小程序平台有关，如果只有<a href="https://developers.weixin.qq.com/community/develop/doc/d615c9a8957a00225ae66b65a8c2bd01?highLine=%25E6%25BB%259A%25E5%258A%25A8%25E7%25A9%25BF%25E9%2580%258F">微信小程序</a>可以用官方提供的 page-meta，或者在弹窗上增加 catchtouchmove 属性；如果使用了跨端框架（例如<a href="https://taro-docs.jd.com/docs/vue-overall#taro-3-%E5%9C%A8%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AB%AF%E7%9A%84%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6">Taro</a>），可能这些属性不生效，只能通过改变页面样式如固定高度、溢出隐藏等来禁止页面的滚动</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;吐槽一下移动端开发时碰到的各种意想不到的兼容性问题。&lt;/p&gt;</summary>
    
    
    
    <category term="踩坑经历" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E8%B8%A9%E5%9D%91%E7%BB%8F%E5%8E%86/"/>
    
    
    <category term="iOS" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/iOS/"/>
    
    <category term="Android" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>cover-view在webview上显示</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2023/10/07/cover-view/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2023/10/07/cover-view/</id>
    <published>2023-10-07T03:18:04.000Z</published>
    <updated>2023-10-07T03:35:40.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>根据微信小程序官方文档，webview 覆盖全组件，是不支持其他组件进行覆盖的。但有些需求希望在小程序的 webview 页增加浮动图标、提供引导作用。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>利用 webview 的 bindload 属性或者页面的onShow周期、在 webivew 加载完成后显示 cover-view 的内容，为保证 cover-view 能出现最好加上一点时延。<br>这只是一个临时解决方法，并不是官方提供的实现。所以在开发者工具上无法看出效果，只有真机才能看到，日后也有无法生效的可能。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>（1）<a href="https://developers.weixin.qq.com/community/develop/doc/000a40ddcac42010f5ba0737c56800">cover-view能否覆盖webview?</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;根据微信小程序官方文档，webview 覆盖全组件，是不支持其他组件进行覆盖的。但有些需求希望在小程序的 webview 页</summary>
      
    
    
    
    <category term="工作技巧" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="小程序" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>自定义tabbar的实现</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2023/09/21/tabBarMid/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2023/09/21/tabBarMid/</id>
    <published>2023-09-21T07:25:02.000Z</published>
    <updated>2023-10-17T10:41:55.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>根据产品需求，要实现小程序的 tabbar 样式自定义、中间按钮凸起的效果</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li><p>pages.json文件和一般带tabbar的项目一样进行配置（不做配置的话切换页面顶部导航会出现回退键）</p></li><li><p>自定义tabbar中实现tab页面切换的逻辑：每个tab页都设置id值，切换页面时传入自定义tabbar组件的id值变化，改变tabbar的icon激活样式；在mounted周期隐藏默认的tabbar</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;view class=&quot;tab-container&quot;&gt;<br>        &lt;view class=&quot;tabbar-item&quot; v-for=&quot;(item, index) in tabBarList&quot; :class=&quot;[item.centerItem ? &#x27; center-item&#x27; : &#x27;&#x27;]&quot;<br>            @click=&quot;changeItem(item)&quot; :key=&quot;index&quot;&gt;<br>            &lt;view class=&quot;item-top&quot;&gt;<br>                &lt;image :src=&quot;currentItem == item.id ? item.selectIcon : item.icon&quot;&gt;&lt;/image&gt;<br>            &lt;/view&gt;<br>            &lt;view class=&quot;item-bottom&quot; :class=&quot;[currentItem == item.id ? &#x27;item-active&#x27; : &#x27;&#x27;]&quot;&gt;<br>                &lt;text&gt;&#123;&#123; item.text &#125;&#125;&lt;/text&gt;<br>            &lt;/view&gt;<br>        &lt;/view&gt;<br>    &lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; tabBarList &#125; from &#x27;../utils/constants&#x27;<br>export default &#123;<br>    props: &#123;<br>        currentPageId: &#123;<br>            type: Number,<br>            default: 0<br>        &#125;<br>    &#125;,<br>    data() &#123;<br>        return &#123;<br>            currentItem: 0,<br>            tabBarList: tabBarList<br>        &#125;<br>    &#125;,<br>    methods: &#123;<br>        changeItem(item) &#123;<br>            uni.switchTab(&#123;<br>                url: item.path<br>            &#125;);<br>        &#125;<br><br>    &#125;,<br>    mounted() &#123;<br>        this.currentItem = this.currentPageId<br>        uni.hideTabBar();<br>    &#125;,<br><br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot;&gt;<br>.tab-container &#123;<br>    position: fixed;<br>    bottom: 0;<br>    left: 0;<br>    width: 100%;<br>    height: 120rpx;<br>    padding: 10rpx 80rpx 0;<br>    display: flex;<br>    justify-content: space-between;<br>    box-sizing: border-box;<br>    border-top: 1rpx solid #999;<br>    background: #fff;<br><br>    .tabbar-item &#123;<br>        display: flex;<br>        flex-direction: column;<br>        justify-content: center;<br>        align-items: center;<br>        text-align: center;<br><br>        .item-top &#123;<br>            width: 64rpx;<br>            height: 64rpx;<br>            margin-bottom: 10rpx;<br><br>            image &#123;<br>                width: 100%;<br>                height: 100%;<br>                object-fit: contain;<br>            &#125;<br>        &#125;<br><br>        .item-bottom &#123;<br>            font-size: 20rpx;<br>            color: #999;<br>        &#125;<br><br>        &amp;.center-item &#123;<br>            position: absolute;<br>            top: -50rpx;<br>            left: calc(50% - 50rpx);<br>            background: #fff;<br>            width: 100rpx;<br>            border: 1px solid;<br>            border-radius: 10rpx;<br>            padding: 20rpx 0;<br>            box-sizing: border-box;<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure></li><li><p>将自定义的tabbar引入页面</p></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>（1）<a href="https://blog.csdn.net/weixin_56650035/article/details/118027317">uniapp 自定义 tabbar，中间凸起</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;根据产品需求，要实现小程序的 tabbar 样式自定义、中间按钮凸起的效果&lt;/p&gt;
&lt;h2 id=&quot;解决方法&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="工作技巧" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="小程序" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>ios踩坑经历——页面在键盘弹出时上移</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2023/09/18/iosScroll/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2023/09/18/iosScroll/</id>
    <published>2023-09-18T08:16:26.000Z</published>
    <updated>2023-09-19T02:45:41.929Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>iOS 环境下当 input 组件聚焦、弹出键盘时，页面整体位置上移</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>这属于 iOS 系统的特殊操作，必然会出现。解决思路是键盘弹出时记录下当前滚动的位置，用 js 进行位置还原。但考虑执行时可能无法完全抵消 ios 的默认操作，实际展示可能会出现页面上移后迅速回位的奇怪效果，设置为在键盘隐藏时页面回归原位。</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;container&quot;&gt;<br>    &lt;input ref=&quot;input&quot; /&gt;<br>    &lt;button @click=&quot;focusInput&quot; /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      scrollTop: 0,<br>    &#125;;<br>  &#125;,<br><br>  mounted() &#123;<br>    var UA = navigator.userAgent.toLowerCase();<br>    if (<br>      UA.indexOf(&quot;iphone&quot;) &gt; -1 ||<br>      UA.indexOf(&quot;ipad&quot;) &gt; -1 ||<br>      UA.indexOf(&quot;ios&quot;) &gt; -1<br>    ) &#123;<br>      // 监听键盘收起操作<br>      document.body.addEventListener(&quot;focusout&quot;, this.pageRecover);<br>    &#125;<br>  &#125;,<br>  destroyed() &#123;<br>    var UA = navigator.userAgent.toLowerCase();<br>    if (<br>      UA.indexOf(&quot;iphone&quot;) &gt; -1 ||<br>      UA.indexOf(&quot;ipad&quot;) &gt; -1 ||<br>      UA.indexOf(&quot;ios&quot;) &gt; -1<br>    ) &#123;<br>      document.body.removeEventListener(&quot;focusout&quot;, this.pageRecover);<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    focusInput() &#123;<br>      // 触发键盘出现、页面上推<br>      this.$refs[&quot;input&quot;].focus();<br>      this.scrollTop = window.pageYOffset;<br>    &#125;,<br>    //软键盘收起的事件处理<br>    pageRecover() &#123;<br>      setTimeout(() =&gt; &#123;<br>        window.scrollTo(0, this.scrollTop);<br>      &#125;, 500);<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>（1）<a href="https://juejin.cn/post/6844904083438977032">由 Vant Field 组件得到解决 IOS 输入框 键盘上推问题</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;iOS 环境下当 input 组件聚焦、弹出键盘时，页面整体位置上移&lt;/p&gt;
&lt;h2 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="踩坑经历" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E8%B8%A9%E5%9D%91%E7%BB%8F%E5%8E%86/"/>
    
    
    <category term="iOS" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>vscode指令</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2023/09/07/vscodeCmd/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2023/09/07/vscodeCmd/</id>
    <published>2023-09-07T06:45:32.000Z</published>
    <updated>2023-09-07T07:33:29.609Z</updated>
    
    <content type="html"><![CDATA[<p>记录下几个提升效率的 vscode 指令，免得自己突然想不起来又专门查。</p><span id="more"></span><h2 id="打开-vscode-的-setting"><a href="#打开-vscode-的-setting" class="headerlink" title="打开 vscode 的 setting"></a>打开 vscode 的 setting</h2><p>方法一：找到 vscode 顶部菜单，点击首个 tab，按“preferences - setting”的顺序点开</p><p>方法二：IDE 界面的左下角的齿轮点开，选择菜单里的 setting</p><p>方法三：使用指令<code>Cmd + Shift + P</code>（mac）打开命令面板 Command Palette，输入 setting 后点击“Preference：Open User Settings (JSON) ”就会打开用户的设置 json</p><p>举例可以修改 editor.stickyScroll.enabled 属性的状态，让 ide 屏幕顶部显示你所在的函数&#x2F;类，这在阅读较长的代码时比较有用</p><h2 id="项目切换"><a href="#项目切换" class="headerlink" title="项目切换"></a>项目切换</h2><p>指令<code>control + R</code>，可在最近打开的几个项目间进行切换</p><h2 id="文档查找"><a href="#文档查找" class="headerlink" title="文档查找"></a>文档查找</h2><p>指令<code>Cmd + P</code>，搜索当前项目的文件名</p><h2 id="函数查找"><a href="#函数查找" class="headerlink" title="函数查找"></a>函数查找</h2><p>指令<code>Cmd + Shift + O</code>，搜索当前所在文件里的函数名</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>（1）<a href="https://juejin.cn/post/7270061728897204282">你一定要知道的 7 个 VS Code 技巧</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录下几个提升效率的 vscode 指令，免得自己突然想不起来又专门查。&lt;/p&gt;</summary>
    
    
    
    <category term="备忘录" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
    <category term="vscode" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>css文件px转rem操作</title>
    <link href="https://unkonwn404.github.io/unknown404.github.io/2023/08/28/postcss/"/>
    <id>https://unkonwn404.github.io/unknown404.github.io/2023/08/28/postcss/</id>
    <published>2023-08-28T03:04:08.000Z</published>
    <updated>2024-10-20T09:50:22.346Z</updated>
    
    <content type="html"><![CDATA[<p>前端尤其是移动端开发时，对屏幕适配换设计稿的要求比较高。常见的方法是将 px 转为 rem，主要有两种实现方式。</p><h3 id="使用-CSS-预处理器（如-Sass-或-Less）"><a href="#使用-CSS-预处理器（如-Sass-或-Less）" class="headerlink" title="使用 CSS 预处理器（如 Sass 或 Less）"></a>使用 CSS 预处理器（如 Sass 或 Less）</h3><p>通过编写变量和函数来实现</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less">$base-<span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br><br><span class="hljs-variable">@function</span> px2rem($px) &#123;<br>  <span class="hljs-variable">@return</span> $px / $base-font-size * <span class="hljs-number">1rem</span>;<br>&#125;<br><br>.example &#123;<br>  <span class="hljs-attribute">font-size</span>: px2rem(<span class="hljs-number">24px</span>); <span class="hljs-comment">// 1.5rem</span><br>  <span class="hljs-attribute">width</span>: px2rem(<span class="hljs-number">200px</span>); <span class="hljs-comment">// 12.5rem</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用-postcss-插件"><a href="#使用-postcss-插件" class="headerlink" title="使用 postcss 插件"></a>使用 postcss 插件</h3><h4 id="关于-postcss"><a href="#关于-postcss" class="headerlink" title="关于 postcss"></a>关于 postcss</h4><p>PostCSS 是一个用于转换 CSS 的工具，可以通过插件来实现以下功能：</p><ul><li>自动补全浏览器前缀（autoprefixer）</li><li>优化 CSS： cssnano 可以进行压缩，purgecss 可以删除未使用的 CSS。</li></ul><p>常用的单位转换插件包括 postcss-pxtorem 和 postcss-plugin-px2rem。配置插件后，它会自动将 CSS 文件中的 px 单位转换为 rem。</p><p>如果想实现整个项目自动将 px 转为 rem，主要有两个步骤</p><h4 id="1-根元素挂载-font-size-样式"><a href="#1-根元素挂载-font-size-样式" class="headerlink" title="1.根元素挂载 font-size 样式"></a>1.根元素挂载 font-size 样式</h4><p>rem 单位是相对于根节点的字体大小的，所以需要设置根节点的字体大小。当窗口大小调整时，通过调整根节点的字体大小来实现自适应。</p><p>实现代码如下（一般来说设计稿都是 750 的宽度）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span> (<span class="hljs-params">designWidth, maxWidth</span>) &#123;<br>  <span class="hljs-keyword">var</span> doc = <span class="hljs-variable language_">document</span>,<br>    timer;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">refreshRem</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> width = doc.<span class="hljs-property">documentElement</span>.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">width</span>;<br>    <span class="hljs-comment">// *** 一定程度的适配pc ***</span><br>    <span class="hljs-keyword">var</span> rem;<br>    <span class="hljs-keyword">if</span> (width &gt; maxWidth) &#123;<br>      rem = <span class="hljs-number">72</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      rem = (width * <span class="hljs-number">100</span>) / designWidth;<br>    &#125;<br>    <span class="hljs-comment">// *** 适配pc结束 ***</span><br>    doc.<span class="hljs-property">documentElement</span>.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = rem + <span class="hljs-string">&quot;px&quot;</span>;<br>  &#125;<br>  <span class="hljs-comment">// rem初始化开始</span><br>  <span class="hljs-title function_">refreshRem</span>();<br>  <span class="hljs-comment">// 改变窗口大小时重新设置 rem</span><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<br>    <span class="hljs-string">&quot;resize&quot;</span>,<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-built_in">clearTimeout</span>(timer); <span class="hljs-comment">//防止执行两次</span><br>      timer = <span class="hljs-built_in">setTimeout</span>(refreshRem, <span class="hljs-number">300</span>);<br>    &#125;,<br>    <span class="hljs-literal">false</span><br>  );<br>  <span class="hljs-comment">// 浏览器后退的时候重新计算</span><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<br>    <span class="hljs-string">&quot;pageshow&quot;</span>,<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>      <span class="hljs-comment">// 页面从缓存加载时</span><br>      <span class="hljs-keyword">if</span> (e.<span class="hljs-property">persisted</span>) &#123;<br>        <span class="hljs-built_in">clearTimeout</span>(timer);<br>        timer = <span class="hljs-built_in">setTimeout</span>(refreshRem, <span class="hljs-number">300</span>);<br>      &#125;<br>    &#125;,<br>    <span class="hljs-literal">false</span><br>  );<br>&#125;)(<span class="hljs-number">750</span>, <span class="hljs-number">540</span>);<br></code></pre></td></tr></table></figure><p>将这段 js 引入到项目的入口文件 app.html 后，查看页面的 html 节点，是否有被自动添加 font-size。</p><h4 id="2-配置-postcss"><a href="#2-配置-postcss" class="headerlink" title="2.配置 postcss"></a>2.配置 postcss</h4><ol><li>安装 postcss-pxtorem</li><li>在项目根目录下创建一个名为 postcss.config.js 的文件，用于配置 PostCSS 插件。（如果像 nuxt 的项目已经安装了 postcss，可以直接在 nuxt.config.js 文件里配置</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">plugins</span>: &#123;<br>    <span class="hljs-string">&quot;postcss-pxtorem&quot;</span>: &#123;<br>      <span class="hljs-attr">rootValue</span>: <span class="hljs-number">50</span>,<br>      <span class="hljs-attr">propList</span>: [<span class="hljs-string">&quot;*&quot;</span>],<br>    &#125;,<br>    <span class="hljs-attr">autoprefixer</span>: &#123;&#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="备注：viewpoint-适配方法"><a href="#备注：viewpoint-适配方法" class="headerlink" title="备注：viewpoint 适配方法"></a>备注：viewpoint 适配方法</h3><p>到这里 rem 适配方法已经结束了。现在更为流行的是使用 vw、vh 单位进行适配。但满屏的宽度为 100vw，与设计稿的 750 进行手动换算还是比较麻烦。所以仍需要一些适配操作。原理大体同 rem 类似，主要两种：</p><ol><li>使用 CSS 预处理器（如 Sass 或 Less）</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@windowWidth:</span> <span class="hljs-number">100vw</span>;<br><span class="hljs-selector-class">.rpxToVW</span>(<span class="hljs-variable">@name</span>,<span class="hljs-variable">@rpx</span>) &#123;<br>  <span class="hljs-comment">//传入不带单位的rpx数值，将rpx转为vw</span><br>  @&#123;name&#125;: <span class="hljs-selector-tag">unit</span>(<span class="hljs-variable">@rpx</span> / <span class="hljs-number">750</span> * <span class="hljs-variable">@windowWidth</span>, vw);<br>&#125;<br><span class="hljs-selector-class">.taskBlock</span> &#123;<br>  <span class="hljs-selector-class">.rpxToVW</span>(margin,<span class="hljs-number">20</span>);<br>  <span class="hljs-selector-class">.rpxToVW</span>(padding,<span class="hljs-number">30</span>);<br>  <span class="hljs-selector-class">.rpxToVW</span>(border-radius,<span class="hljs-number">10</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>postcss</li></ol><ul><li>安装 postcss-px-to-viewport</li><li>在根目录新建一个名为 postcss.config.js 的文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">plugins</span>: &#123;<br>    <span class="hljs-string">&quot;postcss-px-to-viewport&quot;</span>: &#123;<br>      <span class="hljs-attr">unitToConvert</span>: <span class="hljs-string">&quot;px&quot;</span>, <span class="hljs-comment">// 要转化的单位</span><br>      <span class="hljs-attr">viewportWidth</span>: <span class="hljs-number">375</span>, <span class="hljs-comment">// UI设计稿的宽度</span><br>      <span class="hljs-attr">unitPrecision</span>: <span class="hljs-number">6</span>, <span class="hljs-comment">// 转换后的精度，即小数点位数</span><br>      <span class="hljs-attr">propList</span>: [<span class="hljs-string">&quot;*&quot;</span>], <span class="hljs-comment">// 指定转换的css属性的单位，*代表全部css属性的单位都进行转换</span><br>      <span class="hljs-attr">viewportUnit</span>: <span class="hljs-string">&quot;vw&quot;</span>, <span class="hljs-comment">// 指定需要转换成的视窗单位，默认vw</span><br>      <span class="hljs-attr">fontViewportUnit</span>: <span class="hljs-string">&quot;vw&quot;</span>, <span class="hljs-comment">// 指定字体需要转换成的视窗单位，默认vw</span><br>      <span class="hljs-attr">selectorBlackList</span>: [<span class="hljs-string">&quot;wrap&quot;</span>], <span class="hljs-comment">// 指定不转换为视窗单位的类名，</span><br>      <span class="hljs-attr">minPixelValue</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 默认值1，小于或等于1px则不进行转换</span><br>      <span class="hljs-attr">mediaQuery</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否在媒体查询的css代码中也进行转换，默认false</span><br>      <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否转换后直接更换属性值</span><br>      <span class="hljs-attr">exclude</span>: [<span class="hljs-regexp">/node_modules/</span>], <span class="hljs-comment">// 设置忽略文件，用正则做目录名匹配</span><br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>备注： webpack 5 版本 postcss 配置书写方式有差别，从对象形式变为函数形式，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;postcss-px-to-viewport&quot;</span>)(&#123;<br>      <span class="hljs-attr">unitToConvert</span>: <span class="hljs-string">&quot;px&quot;</span>, <span class="hljs-comment">// 要转化的单位</span><br>      <span class="hljs-attr">viewportWidth</span>: <span class="hljs-number">375</span>, <span class="hljs-comment">// UI设计稿的宽度</span><br>      <span class="hljs-attr">unitPrecision</span>: <span class="hljs-number">6</span>, <span class="hljs-comment">// 转换后的精度，即小数点位数</span><br>      <span class="hljs-attr">propList</span>: [<span class="hljs-string">&quot;*&quot;</span>], <span class="hljs-comment">// 指定转换的css属性的单位，*代表全部css属性的单位都进行转换</span><br>      <span class="hljs-attr">viewportUnit</span>: <span class="hljs-string">&quot;vw&quot;</span>, <span class="hljs-comment">// 指定需要转换成的视窗单位，默认vw</span><br>      <span class="hljs-attr">fontViewportUnit</span>: <span class="hljs-string">&quot;vw&quot;</span>, <span class="hljs-comment">// 指定字体需要转换成的视窗单位，默认vw</span><br>      <span class="hljs-attr">minPixelValue</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 默认值1，小于或等于1px则不进行转换</span><br>      <span class="hljs-attr">mediaQuery</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否在媒体查询的css代码中也进行转换，默认false</span><br>      <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否转换后直接更换属性值</span><br>      <span class="hljs-attr">selectorBlackList</span>: [<span class="hljs-string">&quot;wrap&quot;</span>], <span class="hljs-comment">// 指定不转换为视窗单位的类名</span><br>      <span class="hljs-attr">exclude</span>: [<span class="hljs-regexp">/node_modules/</span>, <span class="hljs-regexp">/src\/views/</span>, <span class="hljs-regexp">/src\/components/</span>, <span class="hljs-regexp">/src\/App/</span>], <span class="hljs-comment">// 设置忽略文件，用正则做目录名匹配</span><br>    &#125;),<br>    <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;autoprefixer&quot;</span>)(),<br>  ],<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="https://juejin.cn/post/6844903557930418189?searchId=202308281046059EA791D01FCE5880F623">Vue 项目自动转换 px 为 rem，高保真还原设计图</a></li><li><a href="https://juejin.cn/post/7061866685166256142?searchId=2023082811284766FD14F856BCD7817236">移动端适配解决方案(二)</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前端尤其是移动端开发时，对屏幕适配换设计稿的要求比较高。常见的方法是将 px 转为 rem，主要有两种实现方式。&lt;/p&gt;
&lt;h3 id=&quot;使用-CSS-预处理器（如-Sass-或-Less）&quot;&gt;&lt;a href=&quot;#使用-CSS-预处理器（如-Sass-或-Less）&quot; cl</summary>
      
    
    
    
    <category term="工作技巧" scheme="https://unkonwn404.github.io/unknown404.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="postcss" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/postcss/"/>
    
    <category term="rem" scheme="https://unkonwn404.github.io/unknown404.github.io/tags/rem/"/>
    
  </entry>
  
</feed>
